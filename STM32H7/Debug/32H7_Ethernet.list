
32H7_Ethernet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004824  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08004ac4  08004ac4  00014ac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004b44  08004b44  00014b44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004b48  08004b48  00014b48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08004b4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .RxDecripSection 00000060  2000000c  08004b58  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .TxDecripSection 00000060  2000006c  08004bb8  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00003f3c  200000cc  08004c18  000200cc  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20004008  08004c18  00024008  2**0
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 11 .debug_info   00030a5e  00000000  00000000  000200fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000525e  00000000  00000000  00050b58  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00010591  00000000  00000000  00055db6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013b0  00000000  00000000  00066348  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001ba8  00000000  00000000  000676f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000c22a  00000000  00000000  000692a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00008bfe  00000000  00000000  000754ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0007e0c8  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00003a4c  00000000  00000000  0007e144  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	200000cc 	.word	0x200000cc
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08004aac 	.word	0x08004aac

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	200000d0 	.word	0x200000d0
 80002dc:	08004aac 	.word	0x08004aac

080002e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80002e0:	b508      	push	{r3, lr}

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80002e2:	2003      	movs	r0, #3
 80002e4:	f000 f820 	bl	8000328 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
   HAL_InitTick(TICK_INT_PRIORITY);
 80002e8:	2000      	movs	r0, #0
 80002ea:	f004 faff 	bl	80048ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80002ee:	f004 fabd 	bl	800486c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80002f2:	2000      	movs	r0, #0
 80002f4:	bd08      	pop	{r3, pc}
	...

080002f8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80002f8:	4a02      	ldr	r2, [pc, #8]	; (8000304 <HAL_IncTick+0xc>)
 80002fa:	6813      	ldr	r3, [r2, #0]
 80002fc:	3301      	adds	r3, #1
 80002fe:	6013      	str	r3, [r2, #0]
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop
 8000304:	20003e48 	.word	0x20003e48

08000308 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000308:	4b01      	ldr	r3, [pc, #4]	; (8000310 <HAL_GetTick+0x8>)
 800030a:	6818      	ldr	r0, [r3, #0]
}
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop
 8000310:	20003e48 	.word	0x20003e48

08000314 <HAL_SYSCFG_ETHInterfaceSelect>:
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));  
 8000314:	4a03      	ldr	r2, [pc, #12]	; (8000324 <HAL_SYSCFG_ETHInterfaceSelect+0x10>)
 8000316:	6853      	ldr	r3, [r2, #4]
 8000318:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 800031c:	4318      	orrs	r0, r3
 800031e:	6050      	str	r0, [r2, #4]
 8000320:	4770      	bx	lr
 8000322:	bf00      	nop
 8000324:	58000400 	.word	0x58000400

08000328 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000328:	4a07      	ldr	r2, [pc, #28]	; (8000348 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800032a:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800032c:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800032e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000332:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000336:	041b      	lsls	r3, r3, #16
 8000338:	0c1b      	lsrs	r3, r3, #16
 800033a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800033e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000342:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000344:	60d3      	str	r3, [r2, #12]
 8000346:	4770      	bx	lr
 8000348:	e000ed00 	.word	0xe000ed00

0800034c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800034c:	4b19      	ldr	r3, [pc, #100]	; (80003b4 <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800034e:	b530      	push	{r4, r5, lr}
 8000350:	68dc      	ldr	r4, [r3, #12]
 8000352:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000356:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800035a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800035c:	2b04      	cmp	r3, #4
 800035e:	bf28      	it	cs
 8000360:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000362:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000364:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000368:	bf8c      	ite	hi
 800036a:	3c03      	subhi	r4, #3
 800036c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800036e:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 8000372:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000374:	f103 33ff 	add.w	r3, r3, #4294967295
 8000378:	ea01 0103 	and.w	r1, r1, r3
 800037c:	fa01 f104 	lsl.w	r1, r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000380:	fa05 f404 	lsl.w	r4, r5, r4
 8000384:	f104 34ff 	add.w	r4, r4, #4294967295
 8000388:	ea02 0204 	and.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800038c:	ea42 0201 	orr.w	r2, r2, r1
 8000390:	ea4f 1202 	mov.w	r2, r2, lsl #4
  if ((int32_t)(IRQn) >= 0)
 8000394:	db07      	blt.n	80003a6 <HAL_NVIC_SetPriority+0x5a>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000396:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800039a:	b2d2      	uxtb	r2, r2
 800039c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80003a0:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 80003a4:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003a6:	f000 000f 	and.w	r0, r0, #15
 80003aa:	b2d2      	uxtb	r2, r2
 80003ac:	4b02      	ldr	r3, [pc, #8]	; (80003b8 <HAL_NVIC_SetPriority+0x6c>)
 80003ae:	541a      	strb	r2, [r3, r0]
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	bf00      	nop
 80003b4:	e000ed00 	.word	0xe000ed00
 80003b8:	e000ed14 	.word	0xe000ed14

080003bc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80003bc:	2800      	cmp	r0, #0
 80003be:	db08      	blt.n	80003d2 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80003c0:	0942      	lsrs	r2, r0, #5
 80003c2:	2301      	movs	r3, #1
 80003c4:	f000 001f 	and.w	r0, r0, #31
 80003c8:	fa03 f000 	lsl.w	r0, r3, r0
 80003cc:	4b01      	ldr	r3, [pc, #4]	; (80003d4 <HAL_NVIC_EnableIRQ+0x18>)
 80003ce:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80003d2:	4770      	bx	lr
 80003d4:	e000e100 	.word	0xe000e100

080003d8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003d8:	3801      	subs	r0, #1
 80003da:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80003de:	d20a      	bcs.n	80003f6 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003e0:	4b06      	ldr	r3, [pc, #24]	; (80003fc <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003e2:	21f0      	movs	r1, #240	; 0xf0
 80003e4:	4a06      	ldr	r2, [pc, #24]	; (8000400 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003e6:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003e8:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003ea:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003ee:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003f0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003f2:	601a      	str	r2, [r3, #0]
 80003f4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80003f6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80003f8:	4770      	bx	lr
 80003fa:	bf00      	nop
 80003fc:	e000e010 	.word	0xe000e010
 8000400:	e000ed00 	.word	0xe000ed00

08000404 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000404:	4b04      	ldr	r3, [pc, #16]	; (8000418 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000406:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000408:	681a      	ldr	r2, [r3, #0]
 800040a:	bf0c      	ite	eq
 800040c:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000410:	f022 0204 	bicne.w	r2, r2, #4
 8000414:	601a      	str	r2, [r3, #0]
 8000416:	4770      	bx	lr
 8000418:	e000e010 	.word	0xe000e010

0800041c <ETH_SetMACConfig>:
/**
  * @}
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800041c:	688b      	ldr	r3, [r1, #8]
 800041e:	680a      	ldr	r2, [r1, #0]
  uint32_t macregval = 0;
  
  /*------------------------ MACCR Configuration --------------------*/  
  macregval =(macconf->InterPacketGapVal |
              macconf->SourceAddrControl |
                (uint32_t)(macconf->ChecksumOffload << 27) |  
 8000420:	f891 c004 	ldrb.w	ip, [r1, #4]
 8000424:	431a      	orrs	r2, r3
                  (uint32_t)(macconf->GiantPacketSizeLimitControl << 23) |
                    (uint32_t)(macconf->Support2KPacket << 22) |
                      (uint32_t)(macconf->CRCStripTypePacket << 21) |
                        (uint32_t)(macconf->AutomaticPadCRCStrip << 20) | 
                          (uint32_t)(!macconf->Watchdog << 19) | 
 8000426:	7c0b      	ldrb	r3, [r1, #16]
 8000428:	2b00      	cmp	r3, #0
{
 800042a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                          (uint32_t)(!macconf->Watchdog << 19) | 
 800042e:	bf08      	it	eq
 8000430:	f44f 2300 	moveq.w	r3, #524288	; 0x80000
{
 8000434:	b085      	sub	sp, #20
                          (uint32_t)(!macconf->Watchdog << 19) | 
 8000436:	bf18      	it	ne
 8000438:	2300      	movne	r3, #0
                  (uint32_t)(macconf->GiantPacketSizeLimitControl << 23) |
 800043a:	f891 e00c 	ldrb.w	lr, [r1, #12]
                    (uint32_t)(macconf->Support2KPacket << 22) |
 800043e:	7b4f      	ldrb	r7, [r1, #13]
                          (uint32_t)(!macconf->Watchdog << 19) | 
 8000440:	9300      	str	r3, [sp, #0]
                            (uint32_t)(!macconf->Jabber << 17) | 
 8000442:	7c4b      	ldrb	r3, [r1, #17]
                      (uint32_t)(macconf->CRCStripTypePacket << 21) |
 8000444:	7b8e      	ldrb	r6, [r1, #14]
                            (uint32_t)(!macconf->Jabber << 17) | 
 8000446:	2b00      	cmp	r3, #0
                        (uint32_t)(macconf->AutomaticPadCRCStrip << 20) | 
 8000448:	7bcd      	ldrb	r5, [r1, #15]
                              (uint32_t)(macconf->JumboPacket << 16) |
 800044a:	7c8c      	ldrb	r4, [r1, #18]
                            (uint32_t)(!macconf->Jabber << 17) | 
 800044c:	bf0c      	ite	eq
 800044e:	f44f 3300 	moveq.w	r3, #131072	; 0x20000
 8000452:	2300      	movne	r3, #0
                                macconf->Speed |
                                  macconf->DuplexMode | 
                                    (uint32_t)(macconf->LoopbackMode << 12) |
 8000454:	f891 901c 	ldrb.w	r9, [r1, #28]
                            (uint32_t)(!macconf->Jabber << 17) | 
 8000458:	9301      	str	r3, [sp, #4]
 800045a:	694b      	ldr	r3, [r1, #20]
                                      (uint32_t)(macconf->CarrierSenseBeforeTransmit << 11)|
 800045c:	f891 b01d 	ldrb.w	fp, [r1, #29]
 8000460:	431a      	orrs	r2, r3
 8000462:	698b      	ldr	r3, [r1, #24]
 8000464:	4313      	orrs	r3, r2
                                        (uint32_t)(!macconf->ReceiveOwn << 10)|
 8000466:	7f8a      	ldrb	r2, [r1, #30]
 8000468:	2a00      	cmp	r2, #0
 800046a:	bf0c      	ite	eq
 800046c:	f44f 6280 	moveq.w	r2, #1024	; 0x400
 8000470:	2200      	movne	r2, #0
 8000472:	9202      	str	r2, [sp, #8]
                                          (uint32_t)(macconf->CarrierSenseDuringTransmit << 9)|
 8000474:	7fca      	ldrb	r2, [r1, #31]
 8000476:	9203      	str	r2, [sp, #12]
                                            (uint32_t)(!macconf->RetryTransmission << 8)| 
 8000478:	f891 2020 	ldrb.w	r2, [r1, #32]
 800047c:	2a00      	cmp	r2, #0
                                              macconf->BackOffLimit | 
                                                (uint32_t)(macconf->DeferralCheck << 4)|
                                                  macconf->PreambleLength);
  
  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800047e:	6802      	ldr	r2, [r0, #0]
 8000480:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8000482:	f8d2 a000 	ldr.w	sl, [r2]
                                            (uint32_t)(!macconf->RetryTransmission << 8)| 
 8000486:	bf08      	it	eq
 8000488:	f44f 7880 	moveq.w	r8, #256	; 0x100
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800048c:	ea43 0300 	orr.w	r3, r3, r0
 8000490:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
 8000492:	f02a 4a7f 	bic.w	sl, sl, #4278190080	; 0xff000000
                                            (uint32_t)(!macconf->RetryTransmission << 8)| 
 8000496:	bf18      	it	ne
 8000498:	f04f 0800 	movne.w	r8, #0
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800049c:	4303      	orrs	r3, r0
 800049e:	9803      	ldr	r0, [sp, #12]
 80004a0:	f42a 0a7b 	bic.w	sl, sl, #16449536	; 0xfb0000
 80004a4:	f42a 4afe 	bic.w	sl, sl, #32512	; 0x7f00
 80004a8:	f02a 0a7c 	bic.w	sl, sl, #124	; 0x7c
 80004ac:	ea43 030a 	orr.w	r3, r3, sl
 80004b0:	ea43 63cc 	orr.w	r3, r3, ip, lsl #27
 80004b4:	ea43 53ce 	orr.w	r3, r3, lr, lsl #23
 80004b8:	ea43 5387 	orr.w	r3, r3, r7, lsl #22
 80004bc:	ea43 5346 	orr.w	r3, r3, r6, lsl #21
 80004c0:	ea43 5305 	orr.w	r3, r3, r5, lsl #20
 80004c4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c8:	ea43 3309 	orr.w	r3, r3, r9, lsl #12
 80004cc:	ea43 23cb 	orr.w	r3, r3, fp, lsl #11
                                                (uint32_t)(macconf->DeferralCheck << 4)|
 80004d0:	f891 b028 	ldrb.w	fp, [r1, #40]	; 0x28
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80004d4:	ea43 2340 	orr.w	r3, r3, r0, lsl #9
 80004d8:	9800      	ldr	r0, [sp, #0]
 80004da:	ea43 130b 	orr.w	r3, r3, fp, lsl #4
 80004de:	4303      	orrs	r3, r0
 80004e0:	9801      	ldr	r0, [sp, #4]
 80004e2:	4303      	orrs	r3, r0
 80004e4:	9802      	ldr	r0, [sp, #8]
 80004e6:	4303      	orrs	r3, r0
 80004e8:	ea43 0308 	orr.w	r3, r3, r8
 80004ec:	6013      	str	r3, [r2, #0]
  
  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80004ee:	6bce      	ldr	r6, [r1, #60]	; 0x3c
               (uint32_t)(macconf->ExtendedInterPacketGap << 24)|
                 (uint32_t)(macconf->UnicastSlowProtocolPacketDetect << 18)|
                   (uint32_t)(macconf->SlowProtocolDetect << 17)|
                     (uint32_t)(!macconf->CRCCheckingRxPackets << 16) |
 80004f0:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
               (uint32_t)(macconf->ExtendedInterPacketGap << 24)|
 80004f4:	f891 7038 	ldrb.w	r7, [r1, #56]	; 0x38
                     (uint32_t)(!macconf->CRCCheckingRxPackets << 16) |
 80004f8:	2b00      	cmp	r3, #0
                       macconf->GiantPacketSizeLimit);
  
  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80004fa:	6853      	ldr	r3, [r2, #4]
                 (uint32_t)(macconf->UnicastSlowProtocolPacketDetect << 18)|
 80004fc:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8000500:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
                   (uint32_t)(macconf->SlowProtocolDetect << 17)|
 8000504:	f891 4031 	ldrb.w	r4, [r1, #49]	; 0x31
                     (uint32_t)(!macconf->CRCCheckingRxPackets << 16) |
 8000508:	bf0c      	ite	eq
 800050a:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800050e:	2000      	movne	r0, #0
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8000510:	f423 23ef 	bic.w	r3, r3, #489472	; 0x77800
 8000514:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000518:	f023 0307 	bic.w	r3, r3, #7
 800051c:	ea43 6346 	orr.w	r3, r3, r6, lsl #25
 8000520:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 8000522:	4333      	orrs	r3, r6
  
  /*------------------------ MACTFCR Configuration --------------------*/  
  macregval = ((uint32_t)(macconf->TransmitFlowControl << 1) |
               macconf->PauseLowThreshold | 
                 (uint32_t)(!macconf->ZeroQuantaPause << 7) |
                   (macconf->PauseTime << 16));
 8000524:	6c8e      	ldr	r6, [r1, #72]	; 0x48
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8000526:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
 800052a:	ea43 4385 	orr.w	r3, r3, r5, lsl #18
               macconf->PauseLowThreshold | 
 800052e:	6d0d      	ldr	r5, [r1, #80]	; 0x50
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8000530:	ea43 4344 	orr.w	r3, r3, r4, lsl #17
  macregval = ((uint32_t)(macconf->TransmitFlowControl << 1) |
 8000534:	f891 4054 	ldrb.w	r4, [r1, #84]	; 0x54
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8000538:	4303      	orrs	r3, r0
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);   
 800053a:	6c48      	ldr	r0, [r1, #68]	; 0x44
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800053c:	6053      	str	r3, [r2, #4]
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);   
 800053e:	68d3      	ldr	r3, [r2, #12]
 8000540:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 8000544:	f023 0301 	bic.w	r3, r3, #1
 8000548:	4303      	orrs	r3, r0
  macregval = ((uint32_t)(macconf->ProgrammableWatchdog << 8) |
 800054a:	f891 0040 	ldrb.w	r0, [r1, #64]	; 0x40
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);   
 800054e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8000552:	60d3      	str	r3, [r2, #12]
                 (uint32_t)(!macconf->ZeroQuantaPause << 7) |
 8000554:	f891 304c 	ldrb.w	r3, [r1, #76]	; 0x4c
 8000558:	2b00      	cmp	r3, #0
  
  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval); 
 800055a:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800055c:	f023 03f2 	bic.w	r3, r3, #242	; 0xf2
                 (uint32_t)(!macconf->ZeroQuantaPause << 7) |
 8000560:	bf0c      	ite	eq
 8000562:	2080      	moveq	r0, #128	; 0x80
 8000564:	2000      	movne	r0, #0
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval); 
 8000566:	041b      	lsls	r3, r3, #16
 8000568:	0c1b      	lsrs	r3, r3, #16
 800056a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800056e:	432b      	orrs	r3, r5
  /*------------------------ MTLTQOMR Configuration --------------------*/  
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
  
  /*------------------------ MTLRQOMR Configuration --------------------*/  
  macregval = (macconf->ReceiveQueueMode |
 8000570:	6dcd      	ldr	r5, [r1, #92]	; 0x5c
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval); 
 8000572:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
               (uint32_t)(!macconf->DropTCPIPChecksumErrorPacket << 6) |
                 (uint32_t)(macconf->ForwardRxErrorPacket << 4) |
 8000576:	f891 4061 	ldrb.w	r4, [r1, #97]	; 0x61
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval); 
 800057a:	4303      	orrs	r3, r0
 800057c:	6713      	str	r3, [r2, #112]	; 0x70
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800057e:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8000582:	f891 3056 	ldrb.w	r3, [r1, #86]	; 0x56
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8000586:	f020 0003 	bic.w	r0, r0, #3
 800058a:	4303      	orrs	r3, r0
               (uint32_t)(macconf->UnicastPausePacketDetect << 1));
 800058c:	f891 0055 	ldrb.w	r0, [r1, #85]	; 0x55
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8000590:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8000594:	6d88      	ldr	r0, [r1, #88]	; 0x58
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8000596:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800059a:	f8d2 3d00 	ldr.w	r3, [r2, #3328]	; 0xd00
 800059e:	f023 0372 	bic.w	r3, r3, #114	; 0x72
 80005a2:	4303      	orrs	r3, r0
 80005a4:	f8c2 3d00 	str.w	r3, [r2, #3328]	; 0xd00
               (uint32_t)(!macconf->DropTCPIPChecksumErrorPacket << 6) |
 80005a8:	f891 3060 	ldrb.w	r3, [r1, #96]	; 0x60
                   (uint32_t)(macconf->ForwardRxUndersizedGoodPacket << 3));
 80005ac:	f891 1062 	ldrb.w	r1, [r1, #98]	; 0x62
               (uint32_t)(!macconf->DropTCPIPChecksumErrorPacket << 6) |
 80005b0:	2b00      	cmp	r3, #0
  
  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);  
 80005b2:	f8d2 3d30 	ldr.w	r3, [r2, #3376]	; 0xd30
 80005b6:	f023 037b 	bic.w	r3, r3, #123	; 0x7b
               (uint32_t)(!macconf->DropTCPIPChecksumErrorPacket << 6) |
 80005ba:	bf0c      	ite	eq
 80005bc:	2040      	moveq	r0, #64	; 0x40
 80005be:	2000      	movne	r0, #0
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);  
 80005c0:	432b      	orrs	r3, r5
 80005c2:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 80005c6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80005ca:	4303      	orrs	r3, r0
 80005cc:	f8c2 3d30 	str.w	r3, [r2, #3376]	; 0xd30
}
 80005d0:	b005      	add	sp, #20
 80005d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080005d8 <ETH_SetDMAConfig>:
static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
  uint32_t dmaregval = 0;

  /*------------------------ DMAMR Configuration --------------------*/    
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80005d8:	6802      	ldr	r2, [r0, #0]
 80005da:	f502 5080 	add.w	r0, r2, #4096	; 0x1000
 80005de:	6803      	ldr	r3, [r0, #0]
 80005e0:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
{
 80005e4:	b530      	push	{r4, r5, lr}
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80005e6:	f023 0302 	bic.w	r3, r3, #2
 80005ea:	680c      	ldr	r4, [r1, #0]
  
  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = ((uint32_t)(dmaconf->AddressAlignedBeats << 12) |
 80005ec:	790d      	ldrb	r5, [r1, #4]
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80005ee:	4323      	orrs	r3, r4
               dmaconf->BurstMode |
                 (uint32_t)(dmaconf->RebuildINCRxBurst << 15));
  
  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80005f0:	f241 0404 	movw	r4, #4100	; 0x1004
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80005f4:	6003      	str	r3, [r0, #0]
                 (uint32_t)(dmaconf->RebuildINCRxBurst << 15));
 80005f6:	7b0b      	ldrb	r3, [r1, #12]
  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80005f8:	5910      	ldr	r0, [r2, r4]
                 (uint32_t)(dmaconf->RebuildINCRxBurst << 15));
 80005fa:	03db      	lsls	r3, r3, #15
  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80005fc:	f420 4050 	bic.w	r0, r0, #53248	; 0xd000
  dmaregval = ((uint32_t)(dmaconf->AddressAlignedBeats << 12) |
 8000600:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
 8000604:	688d      	ldr	r5, [r1, #8]
  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8000606:	f020 0001 	bic.w	r0, r0, #1
  dmaregval = ((uint32_t)(dmaconf->AddressAlignedBeats << 12) |
 800060a:	432b      	orrs	r3, r5
  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800060c:	4303      	orrs	r3, r0
  
  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = ((uint32_t)(dmaconf->PBLx8Mode <<16) | 
               dmaconf->MaximumSegmentSize);
  
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800060e:	f502 5088 	add.w	r0, r2, #4352	; 0x1100
  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8000612:	5113      	str	r3, [r2, r4]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8000614:	4b12      	ldr	r3, [pc, #72]	; (8000660 <ETH_SetDMAConfig+0x88>)
 8000616:	6805      	ldr	r5, [r0, #0]
  dmaregval = ((uint32_t)(dmaconf->PBLx8Mode <<16) | 
 8000618:	7b4c      	ldrb	r4, [r1, #13]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800061a:	402b      	ands	r3, r5
 800061c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000620:	6a0c      	ldr	r4, [r1, #32]
 8000622:	4323      	orrs	r3, r4
  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength | 
               (uint32_t)(dmaconf->SecondPacketOperate << 4)| 
                 (uint32_t)(dmaconf->TCPSegmentation << 12));
  
  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8000624:	f241 1404 	movw	r4, #4356	; 0x1104
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8000628:	6003      	str	r3, [r0, #0]
                 (uint32_t)(dmaconf->TCPSegmentation << 12));
 800062a:	7f4b      	ldrb	r3, [r1, #29]
               (uint32_t)(dmaconf->SecondPacketOperate << 4)| 
 800062c:	7d08      	ldrb	r0, [r1, #20]
                 (uint32_t)(dmaconf->TCPSegmentation << 12));
 800062e:	031b      	lsls	r3, r3, #12
  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8000630:	5915      	ldr	r5, [r2, r4]
  dmaregval = (dmaconf->TxDMABurstLength | 
 8000632:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8000636:	6908      	ldr	r0, [r1, #16]
 8000638:	4303      	orrs	r3, r0
  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800063a:	480a      	ldr	r0, [pc, #40]	; (8000664 <ETH_SetDMAConfig+0x8c>)
 800063c:	4028      	ands	r0, r5
 800063e:	4303      	orrs	r3, r0
  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = ((uint32_t)(dmaconf->FlushRxPacket << 31) |
               dmaconf->RxDMABurstLength);
  
  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8000640:	f241 1008 	movw	r0, #4360	; 0x1108
  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8000644:	5113      	str	r3, [r2, r4]
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8000646:	5813      	ldr	r3, [r2, r0]
  dmaregval = ((uint32_t)(dmaconf->FlushRxPacket << 31) |
 8000648:	7f0c      	ldrb	r4, [r1, #28]
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800064a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800064e:	6989      	ldr	r1, [r1, #24]
 8000650:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8000654:	ea43 73c4 	orr.w	r3, r3, r4, lsl #31
 8000658:	430b      	orrs	r3, r1
 800065a:	5013      	str	r3, [r2, r0]
 800065c:	bd30      	pop	{r4, r5, pc}
 800065e:	bf00      	nop
 8000660:	fffec000 	.word	0xfffec000
 8000664:	ffc0efef 	.word	0xffc0efef

08000668 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8000668:	b538      	push	{r3, r4, r5, lr}
  uint32_t tmpreg = 0;
  uint32_t hclk = 0;
  
  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800066a:	6803      	ldr	r3, [r0, #0]
{
 800066c:	4605      	mov	r5, r0
  tmpreg = (heth->Instance)->MACMDIOAR;
 800066e:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
  
  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;  
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8000672:	f001 f907 	bl	8001884 <HAL_RCC_GetHCLKFreq>
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8000676:	4b12      	ldr	r3, [pc, #72]	; (80006c0 <HAL_ETH_SetMDIOClockRange+0x58>)
 8000678:	4a12      	ldr	r2, [pc, #72]	; (80006c4 <HAL_ETH_SetMDIOClockRange+0x5c>)
  tmpreg &= ~ETH_MACMDIOAR_CR;  
 800067a:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
  if((hclk >= 20000000)&&(hclk < 35000000))
 800067e:	4403      	add	r3, r0
 8000680:	4293      	cmp	r3, r2
 8000682:	d805      	bhi.n	8000690 <HAL_ETH_SetMDIOClockRange+0x28>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8000684:	f444 7400 	orr.w	r4, r4, #512	; 0x200
    /* CSR Clock Range between 150-200 MHz */ 
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;    
  }
  
  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;		
 8000688:	682b      	ldr	r3, [r5, #0]
 800068a:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
 800068e:	bd38      	pop	{r3, r4, r5, pc}
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8000690:	4b0d      	ldr	r3, [pc, #52]	; (80006c8 <HAL_ETH_SetMDIOClockRange+0x60>)
 8000692:	4a0e      	ldr	r2, [pc, #56]	; (80006cc <HAL_ETH_SetMDIOClockRange+0x64>)
 8000694:	4403      	add	r3, r0
 8000696:	4293      	cmp	r3, r2
 8000698:	d802      	bhi.n	80006a0 <HAL_ETH_SetMDIOClockRange+0x38>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800069a:	f444 7440 	orr.w	r4, r4, #768	; 0x300
 800069e:	e7f3      	b.n	8000688 <HAL_ETH_SetMDIOClockRange+0x20>
  else if((hclk >= 60000000)&&(hclk < 100000000))
 80006a0:	4b0b      	ldr	r3, [pc, #44]	; (80006d0 <HAL_ETH_SetMDIOClockRange+0x68>)
 80006a2:	4a0c      	ldr	r2, [pc, #48]	; (80006d4 <HAL_ETH_SetMDIOClockRange+0x6c>)
 80006a4:	4403      	add	r3, r0
 80006a6:	4293      	cmp	r3, r2
 80006a8:	d9ee      	bls.n	8000688 <HAL_ETH_SetMDIOClockRange+0x20>
  else if((hclk >= 100000000)&&(hclk < 150000000))
 80006aa:	4b0b      	ldr	r3, [pc, #44]	; (80006d8 <HAL_ETH_SetMDIOClockRange+0x70>)
 80006ac:	4a0b      	ldr	r2, [pc, #44]	; (80006dc <HAL_ETH_SetMDIOClockRange+0x74>)
 80006ae:	4403      	add	r3, r0
 80006b0:	4293      	cmp	r3, r2
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80006b2:	bf94      	ite	ls
 80006b4:	f444 7480 	orrls.w	r4, r4, #256	; 0x100
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;    
 80006b8:	f444 6480 	orrhi.w	r4, r4, #1024	; 0x400
 80006bc:	e7e4      	b.n	8000688 <HAL_ETH_SetMDIOClockRange+0x20>
 80006be:	bf00      	nop
 80006c0:	feced300 	.word	0xfeced300
 80006c4:	00e4e1bf 	.word	0x00e4e1bf
 80006c8:	fde9f140 	.word	0xfde9f140
 80006cc:	017d783f 	.word	0x017d783f
 80006d0:	fc6c7900 	.word	0xfc6c7900
 80006d4:	026259ff 	.word	0x026259ff
 80006d8:	fa0a1f00 	.word	0xfa0a1f00
 80006dc:	02faf07f 	.word	0x02faf07f

080006e0 <HAL_ETH_Init>:
{
 80006e0:	b570      	push	{r4, r5, r6, lr}
  if(heth == NULL)
 80006e2:	4605      	mov	r5, r0
{
 80006e4:	b0a4      	sub	sp, #144	; 0x90
  if(heth == NULL)
 80006e6:	2800      	cmp	r0, #0
 80006e8:	f000 80c0 	beq.w	800086c <HAL_ETH_Init+0x18c>
  if(heth->gState == HAL_ETH_STATE_RESET)
 80006ec:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 80006f0:	b90b      	cbnz	r3, 80006f6 <HAL_ETH_Init+0x16>
    HAL_ETH_MspInit(heth);
 80006f2:	f003 fd7f 	bl	80041f4 <HAL_ETH_MspInit>
  heth->gState = HAL_ETH_STATE_BUSY;
 80006f6:	2323      	movs	r3, #35	; 0x23
  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80006f8:	7a28      	ldrb	r0, [r5, #8]
  heth->gState = HAL_ETH_STATE_BUSY;
 80006fa:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006fe:	4b97      	ldr	r3, [pc, #604]	; (800095c <HAL_ETH_Init+0x27c>)
 8000700:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8000704:	f042 0202 	orr.w	r2, r2, #2
 8000708:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 800070c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000710:	f003 0302 	and.w	r3, r3, #2
 8000714:	9301      	str	r3, [sp, #4]
 8000716:	9b01      	ldr	r3, [sp, #4]
  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8000718:	2800      	cmp	r0, #0
 800071a:	f040 8098 	bne.w	800084e <HAL_ETH_Init+0x16e>
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800071e:	f7ff fdf9 	bl	8000314 <HAL_SYSCFG_ETHInterfaceSelect>
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8000722:	682b      	ldr	r3, [r5, #0]
 8000724:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000728:	681a      	ldr	r2, [r3, #0]
 800072a:	f042 0201 	orr.w	r2, r2, #1
 800072e:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8000730:	f7ff fdea 	bl	8000308 <HAL_GetTick>
 8000734:	4606      	mov	r6, r0
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR))
 8000736:	682b      	ldr	r3, [r5, #0]
 8000738:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800073c:	681c      	ldr	r4, [r3, #0]
 800073e:	f014 0401 	ands.w	r4, r4, #1
 8000742:	f040 8087 	bne.w	8000854 <HAL_ETH_Init+0x174>
  ETH_MAC_MDIO_ClkConfig(heth);
 8000746:	4628      	mov	r0, r5
 8000748:	f7ff ff8e 	bl	8000668 <HAL_ETH_SetMDIOClockRange>
  WRITE_REG(heth->Instance->MAC1USTCR, ((HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1));
 800074c:	682e      	ldr	r6, [r5, #0]
 800074e:	f001 f899 	bl	8001884 <HAL_RCC_GetHCLKFreq>
 8000752:	4b83      	ldr	r3, [pc, #524]	; (8000960 <HAL_ETH_Init+0x280>)
  ETH_SetMACConfig(heth, &macDefaultConf);
 8000754:	a90b      	add	r1, sp, #44	; 0x2c
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10; 
 8000756:	9414      	str	r4, [sp, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE; 
 8000758:	f88d 4049 	strb.w	r4, [sp, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800075c:	f88d 404b 	strb.w	r4, [sp, #75]	; 0x4b
  macDefaultConf.DeferralCheck = DISABLE;
 8000760:	f88d 4054 	strb.w	r4, [sp, #84]	; 0x54
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8000764:	f88d 4064 	strb.w	r4, [sp, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8000768:	941a      	str	r4, [sp, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 800076a:	f88d 408d 	strb.w	r4, [sp, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800076e:	f88d 408e 	strb.w	r4, [sp, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8000772:	f88d 4038 	strb.w	r4, [sp, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8000776:	940d      	str	r4, [sp, #52]	; 0x34
  macDefaultConf.JumboPacket = DISABLE;
 8000778:	f88d 403e 	strb.w	r4, [sp, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 800077c:	f88d 4048 	strb.w	r4, [sp, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8000780:	941f      	str	r4, [sp, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8000782:	941d      	str	r4, [sp, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8000784:	9416      	str	r4, [sp, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8000786:	f88d 406c 	strb.w	r4, [sp, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800078a:	f88d 4082 	strb.w	r4, [sp, #130]	; 0x82
  macDefaultConf.SlowProtocolDetect = DISABLE;
 800078e:	f88d 405d 	strb.w	r4, [sp, #93]	; 0x5d
  WRITE_REG(heth->Instance->MAC1USTCR, ((HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1));
 8000792:	fbb0 f0f3 	udiv	r0, r0, r3
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8000796:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  WRITE_REG(heth->Instance->MAC1USTCR, ((HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1));
 800079a:	3801      	subs	r0, #1
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800079c:	9311      	str	r3, [sp, #68]	; 0x44
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 800079e:	f44f 63c3 	mov.w	r3, #1560	; 0x618
  WRITE_REG(heth->Instance->MAC1USTCR, ((HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1));
 80007a2:	f8c6 00dc 	str.w	r0, [r6, #220]	; 0xdc
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80007a6:	2601      	movs	r6, #1
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80007a8:	9318      	str	r3, [sp, #96]	; 0x60
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80007aa:	2320      	movs	r3, #32
  ETH_SetMACConfig(heth, &macDefaultConf);
 80007ac:	4628      	mov	r0, r5
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80007ae:	f88d 603b 	strb.w	r6, [sp, #59]	; 0x3b
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80007b2:	9322      	str	r3, [sp, #136]	; 0x88
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80007b4:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
  macDefaultConf.ChecksumOffload = ENABLE; 
 80007b8:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80007bc:	930b      	str	r3, [sp, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80007be:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80007c2:	f88d 605e 	strb.w	r6, [sp, #94]	; 0x5e
  macDefaultConf.Speed = ETH_SPEED_100M;
 80007c6:	9310      	str	r3, [sp, #64]	; 0x40
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80007c8:	2302      	movs	r3, #2
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80007ca:	f88d 603a 	strb.w	r6, [sp, #58]	; 0x3a
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80007ce:	f88d 608c 	strb.w	r6, [sp, #140]	; 0x8c
  macDefaultConf.Jabber = ENABLE;
 80007d2:	f88d 603d 	strb.w	r6, [sp, #61]	; 0x3d
  macDefaultConf.ReceiveOwn = ENABLE;
 80007d6:	f88d 604a 	strb.w	r6, [sp, #74]	; 0x4a
  macDefaultConf.RetryTransmission = ENABLE;
 80007da:	f88d 604c 	strb.w	r6, [sp, #76]	; 0x4c
  macDefaultConf.Support2KPacket = DISABLE;
 80007de:	f88d 4039 	strb.w	r4, [sp, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80007e2:	9321      	str	r3, [sp, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80007e4:	f88d 4080 	strb.w	r4, [sp, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80007e8:	f88d 4081 	strb.w	r4, [sp, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80007ec:	f88d 405c 	strb.w	r4, [sp, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80007f0:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80007f4:	941c      	str	r4, [sp, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80007f6:	f88d 6078 	strb.w	r6, [sp, #120]	; 0x78
  ETH_SetMACConfig(heth, &macDefaultConf);
 80007fa:	f7ff fe0f 	bl	800041c <ETH_SetMACConfig>
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80007fe:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8000802:	a902      	add	r1, sp, #8
 8000804:	4628      	mov	r0, r5
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8000806:	f88d 600c 	strb.w	r6, [sp, #12]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800080a:	9308      	str	r3, [sp, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800080c:	9306      	str	r3, [sp, #24]
  dmaDefaultConf.MaximumSegmentSize = 536;
 800080e:	f44f 7306 	mov.w	r3, #536	; 0x218
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8000812:	9604      	str	r6, [sp, #16]
  dmaDefaultConf.MaximumSegmentSize = 536;
 8000814:	930a      	str	r3, [sp, #40]	; 0x28
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8000816:	9402      	str	r4, [sp, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8000818:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800081c:	f88d 4015 	strb.w	r4, [sp, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8000820:	f88d 4014 	strb.w	r4, [sp, #20]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8000824:	f88d 401c 	strb.w	r4, [sp, #28]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8000828:	f88d 4025 	strb.w	r4, [sp, #37]	; 0x25
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800082c:	f7ff fed4 	bl	80005d8 <ETH_SetDMAConfig>
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);	
 8000830:	6829      	ldr	r1, [r5, #0]
  if (heth->Init.RxBuffLen % 4)
 8000832:	6968      	ldr	r0, [r5, #20]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);	
 8000834:	f501 5288 	add.w	r2, r1, #4352	; 0x1100
 8000838:	6813      	ldr	r3, [r2, #0]
 800083a:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 800083e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000842:	6013      	str	r3, [r2, #0]
  if (heth->Init.RxBuffLen % 4)
 8000844:	f010 0203 	ands.w	r2, r0, #3
 8000848:	d012      	beq.n	8000870 <HAL_ETH_Init+0x190>
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800084a:	656e      	str	r6, [r5, #84]	; 0x54
 800084c:	e00b      	b.n	8000866 <HAL_ETH_Init+0x186>
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800084e:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000852:	e764      	b.n	800071e <HAL_ETH_Init+0x3e>
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8000854:	f7ff fd58 	bl	8000308 <HAL_GetTick>
 8000858:	1b80      	subs	r0, r0, r6
 800085a:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 800085e:	f67f af6a 	bls.w	8000736 <HAL_ETH_Init+0x56>
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8000862:	2304      	movs	r3, #4
 8000864:	656b      	str	r3, [r5, #84]	; 0x54
    heth->gState = HAL_ETH_STATE_ERROR;
 8000866:	23e0      	movs	r3, #224	; 0xe0
 8000868:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51
    return HAL_ERROR;
 800086c:	2001      	movs	r0, #1
 800086e:	e072      	b.n	8000956 <HAL_ETH_Init+0x276>
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8000870:	f241 1408 	movw	r4, #4360	; 0x1108
 8000874:	590b      	ldr	r3, [r1, r4]
 8000876:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800087a:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
 800087e:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
  uint32_t i;
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < ETH_TX_DESC_CNT; i++)
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8000882:	68e8      	ldr	r0, [r5, #12]
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8000884:	510b      	str	r3, [r1, r4]
 8000886:	f100 0660 	add.w	r6, r0, #96	; 0x60
 800088a:	f105 0418 	add.w	r4, r5, #24
    dmatxdesc = heth->Init.TxDesc + i;
 800088e:	4603      	mov	r3, r0

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8000890:	701a      	strb	r2, [r3, #0]
 8000892:	705a      	strb	r2, [r3, #1]
 8000894:	709a      	strb	r2, [r3, #2]
 8000896:	70da      	strb	r2, [r3, #3]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8000898:	711a      	strb	r2, [r3, #4]
 800089a:	715a      	strb	r2, [r3, #5]
 800089c:	719a      	strb	r2, [r3, #6]
 800089e:	71da      	strb	r2, [r3, #7]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80008a0:	721a      	strb	r2, [r3, #8]
 80008a2:	725a      	strb	r2, [r3, #9]
 80008a4:	729a      	strb	r2, [r3, #10]
 80008a6:	72da      	strb	r2, [r3, #11]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80008a8:	731a      	strb	r2, [r3, #12]
 80008aa:	735a      	strb	r2, [r3, #13]
 80008ac:	739a      	strb	r2, [r3, #14]
 80008ae:	73da      	strb	r2, [r3, #15]
    
    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80008b0:	f844 3b04 	str.w	r3, [r4], #4
 80008b4:	3318      	adds	r3, #24
  for(i=0; i < ETH_TX_DESC_CNT; i++)
 80008b6:	42b3      	cmp	r3, r6
 80008b8:	d1ea      	bne.n	8000890 <HAL_ETH_Init+0x1b0>
  }
  
  heth->TxDescList.CurTxDesc = 0;
 80008ba:	62aa      	str	r2, [r5, #40]	; 0x28
  
  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 80008bc:	f241 132c 	movw	r3, #4396	; 0x112c
 80008c0:	2203      	movs	r2, #3
  
  for(i = 0; i < ETH_RX_DESC_CNT; i++)
  {
    dmarxdesc =  heth->Init.RxDesc + i;
    
    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80008c2:	2400      	movs	r4, #0
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 80008c4:	50ca      	str	r2, [r1, r3]
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80008c6:	f241 1314 	movw	r3, #4372	; 0x1114
    dmarxdesc =  heth->Init.RxDesc + i;
 80008ca:	692a      	ldr	r2, [r5, #16]
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80008cc:	50c8      	str	r0, [r1, r3]
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80008ce:	f501 5389 	add.w	r3, r1, #4384	; 0x1120
 80008d2:	f102 0660 	add.w	r6, r2, #96	; 0x60
 80008d6:	6018      	str	r0, [r3, #0]
 80008d8:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    dmarxdesc =  heth->Init.RxDesc + i;
 80008dc:	4613      	mov	r3, r2
    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80008de:	701c      	strb	r4, [r3, #0]
 80008e0:	705c      	strb	r4, [r3, #1]
 80008e2:	709c      	strb	r4, [r3, #2]
 80008e4:	70dc      	strb	r4, [r3, #3]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80008e6:	711c      	strb	r4, [r3, #4]
 80008e8:	715c      	strb	r4, [r3, #5]
 80008ea:	719c      	strb	r4, [r3, #6]
 80008ec:	71dc      	strb	r4, [r3, #7]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80008ee:	721c      	strb	r4, [r3, #8]
 80008f0:	725c      	strb	r4, [r3, #9]
 80008f2:	729c      	strb	r4, [r3, #10]
 80008f4:	72dc      	strb	r4, [r3, #11]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80008f6:	731c      	strb	r4, [r3, #12]
 80008f8:	735c      	strb	r4, [r3, #13]
 80008fa:	739c      	strb	r4, [r3, #14]
 80008fc:	73dc      	strb	r4, [r3, #15]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80008fe:	741c      	strb	r4, [r3, #16]
 8000900:	745c      	strb	r4, [r3, #17]
 8000902:	749c      	strb	r4, [r3, #18]
 8000904:	74dc      	strb	r4, [r3, #19]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8000906:	751c      	strb	r4, [r3, #20]
 8000908:	755c      	strb	r4, [r3, #21]
 800090a:	759c      	strb	r4, [r3, #22]
 800090c:	75dc      	strb	r4, [r3, #23]
    
    /* Set Rx descritors adresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800090e:	f840 3b04 	str.w	r3, [r0], #4
 8000912:	3318      	adds	r3, #24
  for(i = 0; i < ETH_RX_DESC_CNT; i++)
 8000914:	42b3      	cmp	r3, r6
 8000916:	d1e2      	bne.n	80008de <HAL_ETH_Init+0x1fe>
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
  WRITE_REG(heth->RxDescList.ItMode, 0);
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
  
  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, (ETH_RX_DESC_CNT - 1));
 8000918:	f241 1330 	movw	r3, #4400	; 0x1130
 800091c:	2603      	movs	r6, #3
  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 800091e:	63ec      	str	r4, [r5, #60]	; 0x3c
 8000920:	f102 0048 	add.w	r0, r2, #72	; 0x48
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8000924:	642c      	str	r4, [r5, #64]	; 0x40
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8000926:	646c      	str	r4, [r5, #68]	; 0x44
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8000928:	64ec      	str	r4, [r5, #76]	; 0x4c
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 800092a:	64ac      	str	r4, [r5, #72]	; 0x48
  WRITE_REG(heth->Instance->DMACRDRLR, (ETH_RX_DESC_CNT - 1));
 800092c:	50ce      	str	r6, [r1, r3]
  
  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800092e:	f241 131c 	movw	r3, #4380	; 0x111c
 8000932:	50ca      	str	r2, [r1, r3]
  
  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t) dmarxdesc);
 8000934:	f241 1328 	movw	r3, #4392	; 0x1128
 8000938:	50c8      	str	r0, [r1, r3]
  return HAL_OK;
 800093a:	2000      	movs	r0, #0
  heth->Instance->MACA0HR = ((heth->Init.MACAddr[5] << 8) | heth->Init.MACAddr[4]);
 800093c:	686b      	ldr	r3, [r5, #4]
 800093e:	889a      	ldrh	r2, [r3, #4]
 8000940:	f8c1 2300 	str.w	r2, [r1, #768]	; 0x300
 8000944:	681b      	ldr	r3, [r3, #0]
  heth->Instance->MACA0LR = ((heth->Init.MACAddr[3] << 24) | (heth->Init.MACAddr[2] << 16) | (heth->Init.MACAddr[1] << 8) | heth->Init.MACAddr[0]);
 8000946:	f8c1 3304 	str.w	r3, [r1, #772]	; 0x304
  heth->gState = HAL_ETH_STATE_READY;
 800094a:	2310      	movs	r3, #16
  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800094c:	656c      	str	r4, [r5, #84]	; 0x54
  heth->gState = HAL_ETH_STATE_READY;
 800094e:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51
  heth->RxState = HAL_ETH_STATE_READY;
 8000952:	f885 3052 	strb.w	r3, [r5, #82]	; 0x52
}
 8000956:	b024      	add	sp, #144	; 0x90
 8000958:	bd70      	pop	{r4, r5, r6, pc}
 800095a:	bf00      	nop
 800095c:	58024400 	.word	0x58024400
 8000960:	000f4240 	.word	0x000f4240

08000964 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000968:	680b      	ldr	r3, [r1, #0]
{
 800096a:	b085      	sub	sp, #20
      /* Configure the External Interrupt or event for the current IO */
      
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800096c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8000b30 <HAL_GPIO_Init+0x1cc>
          temp |= iocurrent;
        }
        EXTI_Ptr->EMR1 = temp;
             
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000970:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000974:	9301      	str	r3, [sp, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000976:	2300      	movs	r3, #0
        temp = EXTI_Ptr->IMR1;
 8000978:	f8df c1b8 	ldr.w	ip, [pc, #440]	; 8000b34 <HAL_GPIO_Init+0x1d0>
    ioposition = ((uint32_t)0x01) << position;
 800097c:	2701      	movs	r7, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800097e:	9a01      	ldr	r2, [sp, #4]
    ioposition = ((uint32_t)0x01) << position;
 8000980:	409f      	lsls	r7, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000982:	ea07 0502 	and.w	r5, r7, r2
    if(iocurrent == ioposition)
 8000986:	42af      	cmp	r7, r5
 8000988:	f040 80b7 	bne.w	8000afa <HAL_GPIO_Init+0x196>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800098c:	684a      	ldr	r2, [r1, #4]
 800098e:	f022 0610 	bic.w	r6, r2, #16
 8000992:	2e02      	cmp	r6, #2
 8000994:	d116      	bne.n	80009c4 <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3];
 8000996:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800099a:	f003 0b07 	and.w	fp, r3, #7
 800099e:	f04f 0e0f 	mov.w	lr, #15
 80009a2:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 80009a6:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 80009aa:	f8da 4020 	ldr.w	r4, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80009ae:	fa0e fe0b 	lsl.w	lr, lr, fp
 80009b2:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80009b6:	690c      	ldr	r4, [r1, #16]
 80009b8:	fa04 f40b 	lsl.w	r4, r4, fp
 80009bc:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3] = temp;
 80009c0:	f8ca 4020 	str.w	r4, [sl, #32]
 80009c4:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80009c8:	2403      	movs	r4, #3
      temp = GPIOx->MODER;
 80009ca:	f8d0 b000 	ldr.w	fp, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80009ce:	f002 0e03 	and.w	lr, r2, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80009d2:	fa04 f40a 	lsl.w	r4, r4, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009d6:	3e01      	subs	r6, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80009d8:	fa0e fe0a 	lsl.w	lr, lr, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80009dc:	43e4      	mvns	r4, r4
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009de:	2e01      	cmp	r6, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80009e0:	ea0b 0b04 	and.w	fp, fp, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80009e4:	ea4e 0e0b 	orr.w	lr, lr, fp
      GPIOx->MODER = temp;
 80009e8:	f8c0 e000 	str.w	lr, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009ec:	d810      	bhi.n	8000a10 <HAL_GPIO_Init+0xac>
        temp = GPIOx->OSPEEDR; 
 80009ee:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80009f0:	ea06 0b04 	and.w	fp, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 80009f4:	68ce      	ldr	r6, [r1, #12]
 80009f6:	fa06 fe0a 	lsl.w	lr, r6, sl
 80009fa:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 80009fe:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000a00:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a02:	ea26 0707 	bic.w	r7, r6, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000a06:	f3c2 1600 	ubfx	r6, r2, #4, #1
 8000a0a:	409e      	lsls	r6, r3
 8000a0c:	4337      	orrs	r7, r6
        GPIOx->OTYPER = temp;
 8000a0e:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000a10:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000a12:	4034      	ands	r4, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000a14:	688e      	ldr	r6, [r1, #8]
 8000a16:	fa06 f60a 	lsl.w	r6, r6, sl
 8000a1a:	4334      	orrs	r4, r6
      GPIOx->PUPDR = temp;
 8000a1c:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a1e:	00d4      	lsls	r4, r2, #3
 8000a20:	d56b      	bpl.n	8000afa <HAL_GPIO_Init+0x196>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a22:	f8d8 40f4 	ldr.w	r4, [r8, #244]	; 0xf4
 8000a26:	f023 0603 	bic.w	r6, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000a2a:	f003 0703 	and.w	r7, r3, #3
 8000a2e:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a32:	f044 0402 	orr.w	r4, r4, #2
 8000a36:	f106 46b0 	add.w	r6, r6, #1476395008	; 0x58000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000a3a:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a3c:	f8c8 40f4 	str.w	r4, [r8, #244]	; 0xf4
 8000a40:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000a44:	f8d8 40f4 	ldr.w	r4, [r8, #244]	; 0xf4
 8000a48:	f004 0402 	and.w	r4, r4, #2
 8000a4c:	9403      	str	r4, [sp, #12]
 8000a4e:	9c03      	ldr	r4, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000a50:	fa0e f407 	lsl.w	r4, lr, r7
        temp = SYSCFG->EXTICR[position >> 2];
 8000a54:	f8d6 a008 	ldr.w	sl, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000a58:	ea2a 0e04 	bic.w	lr, sl, r4
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000a5c:	4c33      	ldr	r4, [pc, #204]	; (8000b2c <HAL_GPIO_Init+0x1c8>)
 8000a5e:	42a0      	cmp	r0, r4
 8000a60:	d052      	beq.n	8000b08 <HAL_GPIO_Init+0x1a4>
 8000a62:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000a66:	42a0      	cmp	r0, r4
 8000a68:	d050      	beq.n	8000b0c <HAL_GPIO_Init+0x1a8>
 8000a6a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000a6e:	42a0      	cmp	r0, r4
 8000a70:	d04e      	beq.n	8000b10 <HAL_GPIO_Init+0x1ac>
 8000a72:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000a76:	42a0      	cmp	r0, r4
 8000a78:	d04c      	beq.n	8000b14 <HAL_GPIO_Init+0x1b0>
 8000a7a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000a7e:	42a0      	cmp	r0, r4
 8000a80:	d04a      	beq.n	8000b18 <HAL_GPIO_Init+0x1b4>
 8000a82:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000a86:	42a0      	cmp	r0, r4
 8000a88:	d048      	beq.n	8000b1c <HAL_GPIO_Init+0x1b8>
 8000a8a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000a8e:	42a0      	cmp	r0, r4
 8000a90:	d046      	beq.n	8000b20 <HAL_GPIO_Init+0x1bc>
 8000a92:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000a96:	42a0      	cmp	r0, r4
 8000a98:	d044      	beq.n	8000b24 <HAL_GPIO_Init+0x1c0>
 8000a9a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000a9e:	42a0      	cmp	r0, r4
 8000aa0:	d042      	beq.n	8000b28 <HAL_GPIO_Init+0x1c4>
 8000aa2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000aa6:	42a0      	cmp	r0, r4
 8000aa8:	bf14      	ite	ne
 8000aaa:	240a      	movne	r4, #10
 8000aac:	2409      	moveq	r4, #9
 8000aae:	40bc      	lsls	r4, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ab0:	03d7      	lsls	r7, r2, #15
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000ab2:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8000ab6:	60b4      	str	r4, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 8000ab8:	ea6f 0605 	mvn.w	r6, r5
        temp = EXTI_Ptr->IMR1;
 8000abc:	f8dc 4000 	ldr.w	r4, [ip]
        temp &= ~((uint32_t)iocurrent);
 8000ac0:	bf54      	ite	pl
 8000ac2:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8000ac4:	432c      	orrmi	r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ac6:	0397      	lsls	r7, r2, #14
        EXTI_Ptr->IMR1 = temp;
 8000ac8:	f8cc 4000 	str.w	r4, [ip]
        temp = EXTI_Ptr->EMR1;
 8000acc:	f8dc 4004 	ldr.w	r4, [ip, #4]
        temp &= ~((uint32_t)iocurrent);
 8000ad0:	bf54      	ite	pl
 8000ad2:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8000ad4:	432c      	orrmi	r4, r5
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ad6:	02d7      	lsls	r7, r2, #11
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8000ad8:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
        EXTI_Ptr->EMR1 = temp;
 8000adc:	f8cc 4004 	str.w	r4, [ip, #4]
        temp = EXTI->RTSR1;
 8000ae0:	f8d9 4000 	ldr.w	r4, [r9]
        temp &= ~((uint32_t)iocurrent);
 8000ae4:	bf54      	ite	pl
 8000ae6:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8000ae8:	432c      	orrmi	r4, r5

        temp = EXTI->FTSR1;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000aea:	0292      	lsls	r2, r2, #10
        EXTI->RTSR1 = temp;
 8000aec:	603c      	str	r4, [r7, #0]
        temp = EXTI->FTSR1;
 8000aee:	687c      	ldr	r4, [r7, #4]
        temp &= ~((uint32_t)iocurrent);
 8000af0:	bf54      	ite	pl
 8000af2:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8000af4:	432c      	orrmi	r4, r5
        }
        EXTI->FTSR1 = temp;
 8000af6:	f8c9 4004 	str.w	r4, [r9, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000afa:	3301      	adds	r3, #1
 8000afc:	2b10      	cmp	r3, #16
 8000afe:	f47f af3d 	bne.w	800097c <HAL_GPIO_Init+0x18>
      }      
    }
  }
}
 8000b02:	b005      	add	sp, #20
 8000b04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000b08:	2400      	movs	r4, #0
 8000b0a:	e7d0      	b.n	8000aae <HAL_GPIO_Init+0x14a>
 8000b0c:	2401      	movs	r4, #1
 8000b0e:	e7ce      	b.n	8000aae <HAL_GPIO_Init+0x14a>
 8000b10:	2402      	movs	r4, #2
 8000b12:	e7cc      	b.n	8000aae <HAL_GPIO_Init+0x14a>
 8000b14:	2403      	movs	r4, #3
 8000b16:	e7ca      	b.n	8000aae <HAL_GPIO_Init+0x14a>
 8000b18:	2404      	movs	r4, #4
 8000b1a:	e7c8      	b.n	8000aae <HAL_GPIO_Init+0x14a>
 8000b1c:	2405      	movs	r4, #5
 8000b1e:	e7c6      	b.n	8000aae <HAL_GPIO_Init+0x14a>
 8000b20:	2406      	movs	r4, #6
 8000b22:	e7c4      	b.n	8000aae <HAL_GPIO_Init+0x14a>
 8000b24:	2407      	movs	r4, #7
 8000b26:	e7c2      	b.n	8000aae <HAL_GPIO_Init+0x14a>
 8000b28:	2408      	movs	r4, #8
 8000b2a:	e7c0      	b.n	8000aae <HAL_GPIO_Init+0x14a>
 8000b2c:	58020000 	.word	0x58020000
 8000b30:	58024400 	.word	0x58024400
 8000b34:	58000080 	.word	0x58000080

08000b38 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000b38:	6943      	ldr	r3, [r0, #20]
 8000b3a:	4059      	eors	r1, r3
 8000b3c:	6141      	str	r1, [r0, #20]
 8000b3e:	4770      	bx	lr

08000b40 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8000b40:	6803      	ldr	r3, [r0, #0]
 8000b42:	699a      	ldr	r2, [r3, #24]
 8000b44:	0791      	lsls	r1, r2, #30
 8000b46:	d501      	bpl.n	8000b4c <I2C_Flush_TXDR+0xc>
  {
     hi2c->Instance->TXDR = 0x00U;
 8000b48:	2200      	movs	r2, #0
 8000b4a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000b4c:	699a      	ldr	r2, [r3, #24]
 8000b4e:	07d2      	lsls	r2, r2, #31
 8000b50:	d403      	bmi.n	8000b5a <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8000b52:	699a      	ldr	r2, [r3, #24]
 8000b54:	f042 0201 	orr.w	r2, r2, #1
 8000b58:	619a      	str	r2, [r3, #24]
 8000b5a:	4770      	bx	lr

08000b5c <I2C_TransferConfig>:
  *     @arg I2C_GENERATE_START_READ: Generate Restart for read request.
  *     @arg I2C_GENERATE_START_WRITE: Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8000b5c:	b530      	push	{r4, r5, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 8000b5e:	6805      	ldr	r5, [r0, #0]

  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));

  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 8000b60:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8000b64:	9c03      	ldr	r4, [sp, #12]
  tmpreg = hi2c->Instance->CR2;
 8000b66:	6868      	ldr	r0, [r5, #4]
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 8000b68:	4323      	orrs	r3, r4
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8000b6a:	f020 707f 	bic.w	r0, r0, #66846720	; 0x3fc0000
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 8000b6e:	4319      	orrs	r1, r3
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8000b70:	f420 3059 	bic.w	r0, r0, #222208	; 0x36400
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 8000b74:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8000b78:	f420 707f 	bic.w	r0, r0, #1020	; 0x3fc
 8000b7c:	f020 0003 	bic.w	r0, r0, #3
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 8000b80:	4301      	orrs	r1, r0
            (uint32_t)Mode | (uint32_t)Request);

  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;
 8000b82:	6069      	str	r1, [r5, #4]
 8000b84:	bd30      	pop	{r4, r5, pc}

08000b86 <I2C_WaitOnFlagUntilTimeout>:
{
 8000b86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000b8a:	9f06      	ldr	r7, [sp, #24]
 8000b8c:	4604      	mov	r4, r0
 8000b8e:	4688      	mov	r8, r1
 8000b90:	4616      	mov	r6, r2
 8000b92:	461d      	mov	r5, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000b94:	6822      	ldr	r2, [r4, #0]
 8000b96:	6993      	ldr	r3, [r2, #24]
 8000b98:	ea38 0303 	bics.w	r3, r8, r3
 8000b9c:	bf0c      	ite	eq
 8000b9e:	2301      	moveq	r3, #1
 8000ba0:	2300      	movne	r3, #0
 8000ba2:	42b3      	cmp	r3, r6
 8000ba4:	d002      	beq.n	8000bac <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8000ba6:	2000      	movs	r0, #0
}
 8000ba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000bac:	1c6b      	adds	r3, r5, #1
 8000bae:	d0f2      	beq.n	8000b96 <I2C_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000bb0:	b955      	cbnz	r5, 8000bc8 <I2C_WaitOnFlagUntilTimeout+0x42>
        hi2c->State= HAL_I2C_STATE_READY;
 8000bb2:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 8000bb4:	2003      	movs	r0, #3
        hi2c->State= HAL_I2C_STATE_READY;
 8000bb6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8000bc0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 8000bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000bc8:	f7ff fb9e 	bl	8000308 <HAL_GetTick>
 8000bcc:	1bc0      	subs	r0, r0, r7
 8000bce:	4285      	cmp	r5, r0
 8000bd0:	d2e0      	bcs.n	8000b94 <I2C_WaitOnFlagUntilTimeout+0xe>
 8000bd2:	e7ee      	b.n	8000bb2 <I2C_WaitOnFlagUntilTimeout+0x2c>

08000bd4 <I2C_IsAcknowledgeFailed>:
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000bd4:	6803      	ldr	r3, [r0, #0]
{
 8000bd6:	b570      	push	{r4, r5, r6, lr}
 8000bd8:	4604      	mov	r4, r0
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000bda:	6998      	ldr	r0, [r3, #24]
{
 8000bdc:	460d      	mov	r5, r1
 8000bde:	4616      	mov	r6, r2
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000be0:	f010 0010 	ands.w	r0, r0, #16
 8000be4:	d112      	bne.n	8000c0c <I2C_IsAcknowledgeFailed+0x38>
 8000be6:	bd70      	pop	{r4, r5, r6, pc}
      if(Timeout != HAL_MAX_DELAY)
 8000be8:	1c69      	adds	r1, r5, #1
 8000bea:	d010      	beq.n	8000c0e <I2C_IsAcknowledgeFailed+0x3a>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 8000bec:	b94d      	cbnz	r5, 8000c02 <I2C_IsAcknowledgeFailed+0x2e>
          hi2c->State= HAL_I2C_STATE_READY;
 8000bee:	2320      	movs	r3, #32
          return HAL_TIMEOUT;
 8000bf0:	2003      	movs	r0, #3
          hi2c->State= HAL_I2C_STATE_READY;
 8000bf2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8000bfc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8000c00:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 8000c02:	f7ff fb81 	bl	8000308 <HAL_GetTick>
 8000c06:	1b80      	subs	r0, r0, r6
 8000c08:	4285      	cmp	r5, r0
 8000c0a:	d3f0      	bcc.n	8000bee <I2C_IsAcknowledgeFailed+0x1a>
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000c0c:	6823      	ldr	r3, [r4, #0]
 8000c0e:	6999      	ldr	r1, [r3, #24]
 8000c10:	068a      	lsls	r2, r1, #26
 8000c12:	d5e9      	bpl.n	8000be8 <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000c14:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000c16:	2520      	movs	r5, #32
    I2C_Flush_TXDR(hi2c);
 8000c18:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000c1a:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000c1c:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8000c1e:	f7ff ff8f 	bl	8000b40 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8000c22:	6822      	ldr	r2, [r4, #0]
    return HAL_ERROR;
 8000c24:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 8000c26:	6853      	ldr	r3, [r2, #4]
 8000c28:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8000c2c:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8000c30:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8000c34:	f023 0301 	bic.w	r3, r3, #1
 8000c38:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8000c3a:	2304      	movs	r3, #4
 8000c3c:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000c3e:	2300      	movs	r3, #0
    hi2c->State= HAL_I2C_STATE_READY;
 8000c40:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000c44:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000c48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
}
 8000c4c:	bd70      	pop	{r4, r5, r6, pc}

08000c4e <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8000c4e:	b570      	push	{r4, r5, r6, lr}
 8000c50:	4604      	mov	r4, r0
 8000c52:	460d      	mov	r5, r1
 8000c54:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8000c56:	6823      	ldr	r3, [r4, #0]
 8000c58:	699b      	ldr	r3, [r3, #24]
 8000c5a:	079b      	lsls	r3, r3, #30
 8000c5c:	d501      	bpl.n	8000c62 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8000c5e:	2000      	movs	r0, #0
 8000c60:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000c62:	4632      	mov	r2, r6
 8000c64:	4629      	mov	r1, r5
 8000c66:	4620      	mov	r0, r4
 8000c68:	f7ff ffb4 	bl	8000bd4 <I2C_IsAcknowledgeFailed>
 8000c6c:	b9b0      	cbnz	r0, 8000c9c <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if(Timeout != HAL_MAX_DELAY)
 8000c6e:	1c6a      	adds	r2, r5, #1
 8000c70:	d0f1      	beq.n	8000c56 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 8000c72:	b96d      	cbnz	r5, 8000c90 <I2C_WaitOnTXISFlagUntilTimeout+0x42>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000c74:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8000c76:	2003      	movs	r0, #3
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000c78:	f043 0320 	orr.w	r3, r3, #32
 8000c7c:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State= HAL_I2C_STATE_READY;
 8000c7e:	2320      	movs	r3, #32
 8000c80:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000c84:	2300      	movs	r3, #0
 8000c86:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8000c8a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8000c8e:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 8000c90:	f7ff fb3a 	bl	8000308 <HAL_GetTick>
 8000c94:	1b80      	subs	r0, r0, r6
 8000c96:	4285      	cmp	r5, r0
 8000c98:	d2dd      	bcs.n	8000c56 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
 8000c9a:	e7eb      	b.n	8000c74 <I2C_WaitOnTXISFlagUntilTimeout+0x26>
      return HAL_ERROR;
 8000c9c:	2001      	movs	r0, #1
}
 8000c9e:	bd70      	pop	{r4, r5, r6, pc}

08000ca0 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8000ca0:	b570      	push	{r4, r5, r6, lr}
 8000ca2:	4604      	mov	r4, r0
 8000ca4:	460d      	mov	r5, r1
 8000ca6:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8000ca8:	6823      	ldr	r3, [r4, #0]
 8000caa:	699b      	ldr	r3, [r3, #24]
 8000cac:	075b      	lsls	r3, r3, #29
 8000cae:	d501      	bpl.n	8000cb4 <I2C_WaitOnRXNEFlagUntilTimeout+0x14>
  return HAL_OK;
 8000cb0:	2000      	movs	r0, #0
 8000cb2:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000cb4:	4632      	mov	r2, r6
 8000cb6:	4629      	mov	r1, r5
 8000cb8:	4620      	mov	r0, r4
 8000cba:	f7ff ff8b 	bl	8000bd4 <I2C_IsAcknowledgeFailed>
 8000cbe:	b9b0      	cbnz	r0, 8000cee <I2C_WaitOnRXNEFlagUntilTimeout+0x4e>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8000cc0:	6823      	ldr	r3, [r4, #0]
 8000cc2:	699a      	ldr	r2, [r3, #24]
 8000cc4:	0692      	lsls	r2, r2, #26
 8000cc6:	d514      	bpl.n	8000cf2 <I2C_WaitOnRXNEFlagUntilTimeout+0x52>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000cc8:	2120      	movs	r1, #32
 8000cca:	61d9      	str	r1, [r3, #28]
      I2C_RESET_CR2(hi2c);
 8000ccc:	685a      	ldr	r2, [r3, #4]
 8000cce:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8000cd2:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8000cd6:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8000cda:	f022 0201 	bic.w	r2, r2, #1
 8000cde:	605a      	str	r2, [r3, #4]
      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ce0:	6460      	str	r0, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8000ce2:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 8000ce6:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000cea:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
      return HAL_ERROR;
 8000cee:	2001      	movs	r0, #1
}
 8000cf0:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 8000cf2:	b95d      	cbnz	r5, 8000d0c <I2C_WaitOnRXNEFlagUntilTimeout+0x6c>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000cf4:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8000cf6:	2003      	movs	r0, #3
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000cf8:	f043 0320 	orr.w	r3, r3, #32
 8000cfc:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State= HAL_I2C_STATE_READY;
 8000cfe:	2320      	movs	r3, #32
 8000d00:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      __HAL_UNLOCK(hi2c);
 8000d04:	2300      	movs	r3, #0
 8000d06:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8000d0a:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 8000d0c:	f7ff fafc 	bl	8000308 <HAL_GetTick>
 8000d10:	1b80      	subs	r0, r0, r6
 8000d12:	4285      	cmp	r5, r0
 8000d14:	d2c8      	bcs.n	8000ca8 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
 8000d16:	e7ed      	b.n	8000cf4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>

08000d18 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8000d18:	b570      	push	{r4, r5, r6, lr}
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	460d      	mov	r5, r1
 8000d1e:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000d20:	6823      	ldr	r3, [r4, #0]
 8000d22:	699b      	ldr	r3, [r3, #24]
 8000d24:	069b      	lsls	r3, r3, #26
 8000d26:	d501      	bpl.n	8000d2c <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8000d28:	2000      	movs	r0, #0
 8000d2a:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000d2c:	4632      	mov	r2, r6
 8000d2e:	4629      	mov	r1, r5
 8000d30:	4620      	mov	r0, r4
 8000d32:	f7ff ff4f 	bl	8000bd4 <I2C_IsAcknowledgeFailed>
 8000d36:	b9a0      	cbnz	r0, 8000d62 <I2C_WaitOnSTOPFlagUntilTimeout+0x4a>
    if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 8000d38:	b96d      	cbnz	r5, 8000d56 <I2C_WaitOnSTOPFlagUntilTimeout+0x3e>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000d3a:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8000d3c:	2003      	movs	r0, #3
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000d3e:	f043 0320 	orr.w	r3, r3, #32
 8000d42:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State= HAL_I2C_STATE_READY;
 8000d44:	2320      	movs	r3, #32
 8000d46:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8000d50:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8000d54:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 8000d56:	f7ff fad7 	bl	8000308 <HAL_GetTick>
 8000d5a:	1b80      	subs	r0, r0, r6
 8000d5c:	4285      	cmp	r5, r0
 8000d5e:	d2df      	bcs.n	8000d20 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
 8000d60:	e7eb      	b.n	8000d3a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8000d62:	2001      	movs	r0, #1
}
 8000d64:	bd70      	pop	{r4, r5, r6, pc}

08000d66 <HAL_I2C_Init>:
{
 8000d66:	b510      	push	{r4, lr}
  if(hi2c == NULL)
 8000d68:	4604      	mov	r4, r0
 8000d6a:	2800      	cmp	r0, #0
 8000d6c:	d04a      	beq.n	8000e04 <HAL_I2C_Init+0x9e>
  if(hi2c->State == HAL_I2C_STATE_RESET)
 8000d6e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000d72:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000d76:	b91b      	cbnz	r3, 8000d80 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8000d78:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8000d7c:	f003 fb7e 	bl	800447c <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000d80:	2324      	movs	r3, #36	; 0x24
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000d82:	68e1      	ldr	r1, [r4, #12]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000d84:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000d88:	2901      	cmp	r1, #1
  __HAL_I2C_DISABLE(hi2c);
 8000d8a:	6823      	ldr	r3, [r4, #0]
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	f022 0201 	bic.w	r2, r2, #1
 8000d92:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000d94:	6862      	ldr	r2, [r4, #4]
 8000d96:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000d9a:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000d9c:	689a      	ldr	r2, [r3, #8]
 8000d9e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	68a2      	ldr	r2, [r4, #8]
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000da6:	d124      	bne.n	8000df2 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000da8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000dac:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000dae:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000db0:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000db2:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000db4:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8000db8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000dbc:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000dbe:	68da      	ldr	r2, [r3, #12]
 8000dc0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000dc4:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000dc6:	6922      	ldr	r2, [r4, #16]
 8000dc8:	430a      	orrs	r2, r1
 8000dca:	69a1      	ldr	r1, [r4, #24]
 8000dcc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000dd0:	6a21      	ldr	r1, [r4, #32]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000dd2:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000dd4:	69e2      	ldr	r2, [r4, #28]
 8000dd6:	430a      	orrs	r2, r1
 8000dd8:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	f042 0201 	orr.w	r2, r2, #1
 8000de0:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8000de2:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000de4:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000de6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000dea:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000dec:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 8000df0:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000df2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000df6:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000df8:	609a      	str	r2, [r3, #8]
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000dfa:	d1d8      	bne.n	8000dae <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000dfc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e00:	605a      	str	r2, [r3, #4]
 8000e02:	e7d4      	b.n	8000dae <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8000e04:	2001      	movs	r0, #1
}
 8000e06:	bd10      	pop	{r4, pc}

08000e08 <HAL_I2C_Master_Transmit>:
{
 8000e08:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8000e0c:	4698      	mov	r8, r3
  if(hi2c->State == HAL_I2C_STATE_READY)
 8000e0e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8000e12:	4604      	mov	r4, r0
 8000e14:	460e      	mov	r6, r1
  if(hi2c->State == HAL_I2C_STATE_READY)
 8000e16:	2b20      	cmp	r3, #32
{
 8000e18:	4691      	mov	r9, r2
  if(hi2c->State == HAL_I2C_STATE_READY)
 8000e1a:	f040 808c 	bne.w	8000f36 <HAL_I2C_Master_Transmit+0x12e>
    __HAL_LOCK(hi2c);
 8000e1e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	f000 8087 	beq.w	8000f36 <HAL_I2C_Master_Transmit+0x12e>
 8000e28:	2701      	movs	r7, #1
 8000e2a:	f880 7040 	strb.w	r7, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8000e2e:	f7ff fa6b 	bl	8000308 <HAL_GetTick>
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000e32:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8000e34:	4605      	mov	r5, r0
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000e36:	9000      	str	r0, [sp, #0]
 8000e38:	463a      	mov	r2, r7
 8000e3a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e3e:	4620      	mov	r0, r4
 8000e40:	f7ff fea1 	bl	8000b86 <I2C_WaitOnFlagUntilTimeout>
 8000e44:	2800      	cmp	r0, #0
 8000e46:	d14b      	bne.n	8000ee0 <HAL_I2C_Master_Transmit+0xd8>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000e48:	2321      	movs	r3, #33	; 0x21
    hi2c->pBuffPtr  = pData;
 8000e4a:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 8000e4e:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000e50:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000e54:	2310      	movs	r3, #16
 8000e56:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e5a:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8000e5c:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if(hi2c->XferCount > MAX_NBYTE_SIZE)
 8000e60:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000e62:	b29b      	uxth	r3, r3
 8000e64:	2bff      	cmp	r3, #255	; 0xff
 8000e66:	d927      	bls.n	8000eb8 <HAL_I2C_Master_Transmit+0xb0>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000e68:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8000e6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000e6e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8000e70:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000e72:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000e76:	4631      	mov	r1, r6
 8000e78:	4620      	mov	r0, r4
 8000e7a:	f7ff fe6f 	bl	8000b5c <I2C_TransferConfig>
    while(hi2c->XferCount > 0U)
 8000e7e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000e80:	462a      	mov	r2, r5
 8000e82:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000e84:	4620      	mov	r0, r4
    while(hi2c->XferCount > 0U)
 8000e86:	b29b      	uxth	r3, r3
 8000e88:	bb03      	cbnz	r3, 8000ecc <HAL_I2C_Master_Transmit+0xc4>
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000e8a:	f7ff ff45 	bl	8000d18 <I2C_WaitOnSTOPFlagUntilTimeout>
 8000e8e:	bb00      	cbnz	r0, 8000ed2 <HAL_I2C_Master_Transmit+0xca>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000e90:	6823      	ldr	r3, [r4, #0]
 8000e92:	2120      	movs	r1, #32
 8000e94:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8000e96:	685a      	ldr	r2, [r3, #4]
 8000e98:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8000e9c:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8000ea0:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8000ea4:	f022 0201 	bic.w	r2, r2, #1
 8000ea8:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8000eaa:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000eae:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000eb2:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8000eb6:	e010      	b.n	8000eda <HAL_I2C_Master_Transmit+0xd2>
      hi2c->XferSize = hi2c->XferCount;
 8000eb8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8000eba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
      hi2c->XferSize = hi2c->XferCount;
 8000ebe:	b292      	uxth	r2, r2
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8000ec0:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8000ec2:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000ec4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000ec8:	b2d2      	uxtb	r2, r2
 8000eca:	e7d4      	b.n	8000e76 <HAL_I2C_Master_Transmit+0x6e>
      if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000ecc:	f7ff febf 	bl	8000c4e <I2C_WaitOnTXISFlagUntilTimeout>
 8000ed0:	b140      	cbz	r0, 8000ee4 <HAL_I2C_Master_Transmit+0xdc>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000ed2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000ed4:	2b04      	cmp	r3, #4
 8000ed6:	d103      	bne.n	8000ee0 <HAL_I2C_Master_Transmit+0xd8>
          return HAL_ERROR;
 8000ed8:	2001      	movs	r0, #1
}
 8000eda:	b003      	add	sp, #12
 8000edc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          return HAL_TIMEOUT;
 8000ee0:	2003      	movs	r0, #3
 8000ee2:	e7fa      	b.n	8000eda <HAL_I2C_Master_Transmit+0xd2>
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8000ee4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000ee6:	6822      	ldr	r2, [r4, #0]
 8000ee8:	1c59      	adds	r1, r3, #1
 8000eea:	6261      	str	r1, [r4, #36]	; 0x24
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferSize--;
 8000ef0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8000ef2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000ef4:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8000ef6:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8000ef8:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8000efa:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8000efc:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8000efe:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((hi2c->XferSize == 0U) && (hi2c->XferCount!=0U))
 8000f00:	2a00      	cmp	r2, #0
 8000f02:	d1bc      	bne.n	8000e7e <HAL_I2C_Master_Transmit+0x76>
 8000f04:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000f06:	b29b      	uxth	r3, r3
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d0b8      	beq.n	8000e7e <HAL_I2C_Master_Transmit+0x76>
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000f0c:	9500      	str	r5, [sp, #0]
 8000f0e:	2180      	movs	r1, #128	; 0x80
 8000f10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000f12:	4620      	mov	r0, r4
 8000f14:	f7ff fe37 	bl	8000b86 <I2C_WaitOnFlagUntilTimeout>
 8000f18:	2800      	cmp	r0, #0
 8000f1a:	d1e1      	bne.n	8000ee0 <HAL_I2C_Master_Transmit+0xd8>
        if(hi2c->XferCount > MAX_NBYTE_SIZE)
 8000f1c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000f1e:	b29b      	uxth	r3, r3
 8000f20:	2bff      	cmp	r3, #255	; 0xff
 8000f22:	d903      	bls.n	8000f2c <HAL_I2C_Master_Transmit+0x124>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000f24:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000f26:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000f28:	8522      	strh	r2, [r4, #40]	; 0x28
 8000f2a:	e7a2      	b.n	8000e72 <HAL_I2C_Master_Transmit+0x6a>
          hi2c->XferSize = hi2c->XferCount;
 8000f2c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000f2e:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8000f30:	b292      	uxth	r2, r2
 8000f32:	8522      	strh	r2, [r4, #40]	; 0x28
 8000f34:	e7c6      	b.n	8000ec4 <HAL_I2C_Master_Transmit+0xbc>
    return HAL_BUSY;
 8000f36:	2002      	movs	r0, #2
 8000f38:	e7cf      	b.n	8000eda <HAL_I2C_Master_Transmit+0xd2>

08000f3a <HAL_I2C_Master_Receive>:
{
 8000f3a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8000f3e:	4698      	mov	r8, r3
  if(hi2c->State == HAL_I2C_STATE_READY)
 8000f40:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8000f44:	4604      	mov	r4, r0
 8000f46:	460e      	mov	r6, r1
  if(hi2c->State == HAL_I2C_STATE_READY)
 8000f48:	2b20      	cmp	r3, #32
{
 8000f4a:	4691      	mov	r9, r2
  if(hi2c->State == HAL_I2C_STATE_READY)
 8000f4c:	f040 808c 	bne.w	8001068 <HAL_I2C_Master_Receive+0x12e>
    __HAL_LOCK(hi2c);
 8000f50:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	f000 8087 	beq.w	8001068 <HAL_I2C_Master_Receive+0x12e>
 8000f5a:	2701      	movs	r7, #1
 8000f5c:	f880 7040 	strb.w	r7, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8000f60:	f7ff f9d2 	bl	8000308 <HAL_GetTick>
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000f64:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8000f66:	4605      	mov	r5, r0
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000f68:	9000      	str	r0, [sp, #0]
 8000f6a:	463a      	mov	r2, r7
 8000f6c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f70:	4620      	mov	r0, r4
 8000f72:	f7ff fe08 	bl	8000b86 <I2C_WaitOnFlagUntilTimeout>
 8000f76:	2800      	cmp	r0, #0
 8000f78:	d14b      	bne.n	8001012 <HAL_I2C_Master_Receive+0xd8>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8000f7a:	2322      	movs	r3, #34	; 0x22
    hi2c->pBuffPtr  = pData;
 8000f7c:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 8000f80:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8000f82:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000f86:	2310      	movs	r3, #16
 8000f88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f8c:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8000f8e:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if(hi2c->XferCount > MAX_NBYTE_SIZE)
 8000f92:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000f94:	b29b      	uxth	r3, r3
 8000f96:	2bff      	cmp	r3, #255	; 0xff
 8000f98:	d927      	bls.n	8000fea <HAL_I2C_Master_Receive+0xb0>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000f9a:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8000f9c:	f44f 5310 	mov.w	r3, #9216	; 0x2400
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000fa0:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8000fa2:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000fa4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000fa8:	4631      	mov	r1, r6
 8000faa:	4620      	mov	r0, r4
 8000fac:	f7ff fdd6 	bl	8000b5c <I2C_TransferConfig>
    while(hi2c->XferCount > 0U)
 8000fb0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000fb2:	462a      	mov	r2, r5
 8000fb4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000fb6:	4620      	mov	r0, r4
    while(hi2c->XferCount > 0U)
 8000fb8:	b29b      	uxth	r3, r3
 8000fba:	bb03      	cbnz	r3, 8000ffe <HAL_I2C_Master_Receive+0xc4>
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000fbc:	f7ff feac 	bl	8000d18 <I2C_WaitOnSTOPFlagUntilTimeout>
 8000fc0:	bb00      	cbnz	r0, 8001004 <HAL_I2C_Master_Receive+0xca>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000fc2:	6823      	ldr	r3, [r4, #0]
 8000fc4:	2120      	movs	r1, #32
 8000fc6:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8000fc8:	685a      	ldr	r2, [r3, #4]
 8000fca:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8000fce:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8000fd2:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8000fd6:	f022 0201 	bic.w	r2, r2, #1
 8000fda:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8000fdc:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000fe0:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000fe4:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8000fe8:	e010      	b.n	800100c <HAL_I2C_Master_Receive+0xd2>
      hi2c->XferSize = hi2c->XferCount;
 8000fea:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8000fec:	f44f 5310 	mov.w	r3, #9216	; 0x2400
      hi2c->XferSize = hi2c->XferCount;
 8000ff0:	b292      	uxth	r2, r2
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8000ff2:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8000ff4:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000ff6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000ffa:	b2d2      	uxtb	r2, r2
 8000ffc:	e7d4      	b.n	8000fa8 <HAL_I2C_Master_Receive+0x6e>
      if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000ffe:	f7ff fe4f 	bl	8000ca0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001002:	b140      	cbz	r0, 8001016 <HAL_I2C_Master_Receive+0xdc>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001004:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001006:	2b04      	cmp	r3, #4
 8001008:	d103      	bne.n	8001012 <HAL_I2C_Master_Receive+0xd8>
          return HAL_ERROR;
 800100a:	2001      	movs	r0, #1
}
 800100c:	b003      	add	sp, #12
 800100e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          return HAL_TIMEOUT;
 8001012:	2003      	movs	r0, #3
 8001014:	e7fa      	b.n	800100c <HAL_I2C_Master_Receive+0xd2>
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8001016:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001018:	1c5a      	adds	r2, r3, #1
 800101a:	6262      	str	r2, [r4, #36]	; 0x24
 800101c:	6822      	ldr	r2, [r4, #0]
 800101e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001020:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 8001022:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001024:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001026:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8001028:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 800102a:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 800102c:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 800102e:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001030:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8001032:	2a00      	cmp	r2, #0
 8001034:	d1bc      	bne.n	8000fb0 <HAL_I2C_Master_Receive+0x76>
 8001036:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001038:	b29b      	uxth	r3, r3
 800103a:	2b00      	cmp	r3, #0
 800103c:	d0b8      	beq.n	8000fb0 <HAL_I2C_Master_Receive+0x76>
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800103e:	9500      	str	r5, [sp, #0]
 8001040:	2180      	movs	r1, #128	; 0x80
 8001042:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001044:	4620      	mov	r0, r4
 8001046:	f7ff fd9e 	bl	8000b86 <I2C_WaitOnFlagUntilTimeout>
 800104a:	2800      	cmp	r0, #0
 800104c:	d1e1      	bne.n	8001012 <HAL_I2C_Master_Receive+0xd8>
        if(hi2c->XferCount > MAX_NBYTE_SIZE)
 800104e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001050:	b29b      	uxth	r3, r3
 8001052:	2bff      	cmp	r3, #255	; 0xff
 8001054:	d903      	bls.n	800105e <HAL_I2C_Master_Receive+0x124>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001056:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001058:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800105a:	8522      	strh	r2, [r4, #40]	; 0x28
 800105c:	e7a2      	b.n	8000fa4 <HAL_I2C_Master_Receive+0x6a>
          hi2c->XferSize = hi2c->XferCount;
 800105e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001060:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8001062:	b292      	uxth	r2, r2
 8001064:	8522      	strh	r2, [r4, #40]	; 0x28
 8001066:	e7c6      	b.n	8000ff6 <HAL_I2C_Master_Receive+0xbc>
    return HAL_BUSY;
 8001068:	2002      	movs	r0, #2
 800106a:	e7cf      	b.n	800100c <HAL_I2C_Master_Receive+0xd2>

0800106c <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if(hi2c->State == HAL_I2C_STATE_READY)
 800106c:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8001070:	b2d2      	uxtb	r2, r2
 8001072:	2a20      	cmp	r2, #32
{
 8001074:	b510      	push	{r4, lr}
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001076:	d11d      	bne.n	80010b4 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001078:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800107c:	2b01      	cmp	r3, #1
 800107e:	d019      	beq.n	80010b4 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001080:	2324      	movs	r3, #36	; 0x24
 8001082:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001086:	6803      	ldr	r3, [r0, #0]
 8001088:	681c      	ldr	r4, [r3, #0]
 800108a:	f024 0401 	bic.w	r4, r4, #1
 800108e:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001090:	681c      	ldr	r4, [r3, #0]
 8001092:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8001096:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001098:	681c      	ldr	r4, [r3, #0]
 800109a:	4321      	orrs	r1, r4
 800109c:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800109e:	6819      	ldr	r1, [r3, #0]
 80010a0:	f041 0101 	orr.w	r1, r1, #1
 80010a4:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80010a6:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80010a8:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80010ac:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80010b0:	4618      	mov	r0, r3
 80010b2:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 80010b4:	2002      	movs	r0, #2
  }
}
 80010b6:	bd10      	pop	{r4, pc}

080010b8 <HAL_I2CEx_ConfigDigitalFilter>:
  *               the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter: Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80010b8:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if(hi2c->State == HAL_I2C_STATE_READY)
 80010ba:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 80010be:	b2e4      	uxtb	r4, r4
 80010c0:	2c20      	cmp	r4, #32
 80010c2:	d11c      	bne.n	80010fe <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80010c4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d018      	beq.n	80010fe <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80010cc:	2324      	movs	r3, #36	; 0x24
 80010ce:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80010d2:	6803      	ldr	r3, [r0, #0]
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	f022 0201 	bic.w	r2, r2, #1
 80010da:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80010dc:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80010de:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80010e2:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80010e6:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	f042 0201 	orr.w	r2, r2, #1
 80010ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80010f0:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80010f2:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80010f6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80010fa:	4618      	mov	r0, r3
 80010fc:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 80010fe:	2002      	movs	r0, #2
  }
}
 8001100:	bd10      	pop	{r4, pc}
	...

08001104 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart = 0;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001106:	6803      	ldr	r3, [r0, #0]
{
 8001108:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800110a:	07d8      	lsls	r0, r3, #31
 800110c:	d45c      	bmi.n	80011c8 <HAL_RCC_OscConfig+0xc4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800110e:	682b      	ldr	r3, [r5, #0]
 8001110:	0799      	lsls	r1, r3, #30
 8001112:	f100 80af 	bmi.w	8001274 <HAL_RCC_OscConfig+0x170>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001116:	682b      	ldr	r3, [r5, #0]
 8001118:	06d9      	lsls	r1, r3, #27
 800111a:	d525      	bpl.n	8001168 <HAL_RCC_OscConfig+0x64>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_CSI) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL1) && ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800111c:	4bac      	ldr	r3, [pc, #688]	; (80013d0 <HAL_RCC_OscConfig+0x2cc>)
 800111e:	691a      	ldr	r2, [r3, #16]
 8001120:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8001124:	2a08      	cmp	r2, #8
 8001126:	d00b      	beq.n	8001140 <HAL_RCC_OscConfig+0x3c>
 8001128:	691a      	ldr	r2, [r3, #16]
 800112a:	f002 0238 	and.w	r2, r2, #56	; 0x38
 800112e:	2a18      	cmp	r2, #24
 8001130:	f040 80f7 	bne.w	8001322 <HAL_RCC_OscConfig+0x21e>
 8001134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001136:	f003 0303 	and.w	r3, r3, #3
 800113a:	2b01      	cmp	r3, #1
 800113c:	f040 80f1 	bne.w	8001322 <HAL_RCC_OscConfig+0x21e>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001140:	4ba3      	ldr	r3, [pc, #652]	; (80013d0 <HAL_RCC_OscConfig+0x2cc>)
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	05d2      	lsls	r2, r2, #23
 8001146:	d502      	bpl.n	800114e <HAL_RCC_OscConfig+0x4a>
 8001148:	69ea      	ldr	r2, [r5, #28]
 800114a:	2a80      	cmp	r2, #128	; 0x80
 800114c:	d153      	bne.n	80011f6 <HAL_RCC_OscConfig+0xf2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800114e:	6858      	ldr	r0, [r3, #4]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001150:	f04f 42f8 	mov.w	r2, #2080374784	; 0x7c000000
 8001154:	fa92 f2a2 	rbit	r2, r2
 8001158:	fab2 f182 	clz	r1, r2
 800115c:	6a2a      	ldr	r2, [r5, #32]
 800115e:	408a      	lsls	r2, r1
 8001160:	f020 41f8 	bic.w	r1, r0, #2080374784	; 0x7c000000
 8001164:	430a      	orrs	r2, r1
 8001166:	605a      	str	r2, [r3, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001168:	682b      	ldr	r3, [r5, #0]
 800116a:	0719      	lsls	r1, r3, #28
 800116c:	f100 810b 	bmi.w	8001386 <HAL_RCC_OscConfig+0x282>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001170:	682b      	ldr	r3, [r5, #0]
 8001172:	069a      	lsls	r2, r3, #26
 8001174:	f100 8130 	bmi.w	80013d8 <HAL_RCC_OscConfig+0x2d4>
        }      
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001178:	682b      	ldr	r3, [r5, #0]
 800117a:	075c      	lsls	r4, r3, #29
 800117c:	d51e      	bpl.n	80011bc <HAL_RCC_OscConfig+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800117e:	4c95      	ldr	r4, [pc, #596]	; (80013d4 <HAL_RCC_OscConfig+0x2d0>)
 8001180:	6823      	ldr	r3, [r4, #0]
 8001182:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001186:	6023      	str	r3, [r4, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001188:	f7ff f8be 	bl	8000308 <HAL_GetTick>
 800118c:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800118e:	6823      	ldr	r3, [r4, #0]
 8001190:	05da      	lsls	r2, r3, #23
 8001192:	f140 8146 	bpl.w	8001422 <HAL_RCC_OscConfig+0x31e>
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001196:	68ab      	ldr	r3, [r5, #8]
 8001198:	4c8d      	ldr	r4, [pc, #564]	; (80013d0 <HAL_RCC_OscConfig+0x2cc>)
 800119a:	2b01      	cmp	r3, #1
 800119c:	f040 8148 	bne.w	8001430 <HAL_RCC_OscConfig+0x32c>
 80011a0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80011a2:	f043 0301 	orr.w	r3, r3, #1
 80011a6:	6723      	str	r3, [r4, #112]	; 0x70
      tickstart = HAL_GetTick();

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((int32_t) (HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011a8:	f241 3488 	movw	r4, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80011ac:	f7ff f8ac 	bl	8000308 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011b0:	4e87      	ldr	r6, [pc, #540]	; (80013d0 <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 80011b2:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011b4:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80011b6:	079b      	lsls	r3, r3, #30
 80011b8:	f140 8160 	bpl.w	800147c <HAL_RCC_OscConfig+0x378>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011bc:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80011be:	2a00      	cmp	r2, #0
 80011c0:	f040 8163 	bne.w	800148a <HAL_RCC_OscConfig+0x386>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 80011c4:	2000      	movs	r0, #0
 80011c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL1) && ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80011c8:	4b81      	ldr	r3, [pc, #516]	; (80013d0 <HAL_RCC_OscConfig+0x2cc>)
 80011ca:	691a      	ldr	r2, [r3, #16]
 80011cc:	f002 0238 	and.w	r2, r2, #56	; 0x38
 80011d0:	2a10      	cmp	r2, #16
 80011d2:	d009      	beq.n	80011e8 <HAL_RCC_OscConfig+0xe4>
 80011d4:	691a      	ldr	r2, [r3, #16]
 80011d6:	f002 0238 	and.w	r2, r2, #56	; 0x38
 80011da:	2a18      	cmp	r2, #24
 80011dc:	d10d      	bne.n	80011fa <HAL_RCC_OscConfig+0xf6>
 80011de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011e0:	f003 0303 	and.w	r3, r3, #3
 80011e4:	2b02      	cmp	r3, #2
 80011e6:	d108      	bne.n	80011fa <HAL_RCC_OscConfig+0xf6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011e8:	4b79      	ldr	r3, [pc, #484]	; (80013d0 <HAL_RCC_OscConfig+0x2cc>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	039a      	lsls	r2, r3, #14
 80011ee:	d58e      	bpl.n	800110e <HAL_RCC_OscConfig+0xa>
 80011f0:	686b      	ldr	r3, [r5, #4]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d18b      	bne.n	800110e <HAL_RCC_OscConfig+0xa>
      return HAL_ERROR;
 80011f6:	2001      	movs	r0, #1
 80011f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011fa:	686b      	ldr	r3, [r5, #4]
 80011fc:	4c74      	ldr	r4, [pc, #464]	; (80013d0 <HAL_RCC_OscConfig+0x2cc>)
 80011fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001202:	d112      	bne.n	800122a <HAL_RCC_OscConfig+0x126>
 8001204:	6823      	ldr	r3, [r4, #0]
 8001206:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800120a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800120c:	f7ff f87c 	bl	8000308 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001210:	4c6f      	ldr	r4, [pc, #444]	; (80013d0 <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 8001212:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001214:	6823      	ldr	r3, [r4, #0]
 8001216:	039b      	lsls	r3, r3, #14
 8001218:	f53f af79 	bmi.w	800110e <HAL_RCC_OscConfig+0xa>
          if((int32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800121c:	f7ff f874 	bl	8000308 <HAL_GetTick>
 8001220:	1b80      	subs	r0, r0, r6
 8001222:	2864      	cmp	r0, #100	; 0x64
 8001224:	d9f6      	bls.n	8001214 <HAL_RCC_OscConfig+0x110>
            return HAL_TIMEOUT;
 8001226:	2003      	movs	r0, #3
 8001228:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800122a:	b9a3      	cbnz	r3, 8001256 <HAL_RCC_OscConfig+0x152>
 800122c:	6823      	ldr	r3, [r4, #0]
 800122e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001232:	6023      	str	r3, [r4, #0]
 8001234:	6823      	ldr	r3, [r4, #0]
 8001236:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800123a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800123c:	f7ff f864 	bl	8000308 <HAL_GetTick>
 8001240:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001242:	6823      	ldr	r3, [r4, #0]
 8001244:	039f      	lsls	r7, r3, #14
 8001246:	f57f af62 	bpl.w	800110e <HAL_RCC_OscConfig+0xa>
          if((int32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800124a:	f7ff f85d 	bl	8000308 <HAL_GetTick>
 800124e:	1b80      	subs	r0, r0, r6
 8001250:	2864      	cmp	r0, #100	; 0x64
 8001252:	d9f6      	bls.n	8001242 <HAL_RCC_OscConfig+0x13e>
 8001254:	e7e7      	b.n	8001226 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001256:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800125a:	6823      	ldr	r3, [r4, #0]
 800125c:	d103      	bne.n	8001266 <HAL_RCC_OscConfig+0x162>
 800125e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001262:	6023      	str	r3, [r4, #0]
 8001264:	e7ce      	b.n	8001204 <HAL_RCC_OscConfig+0x100>
 8001266:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800126a:	6023      	str	r3, [r4, #0]
 800126c:	6823      	ldr	r3, [r4, #0]
 800126e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001272:	e7ca      	b.n	800120a <HAL_RCC_OscConfig+0x106>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL1) && ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001274:	4b56      	ldr	r3, [pc, #344]	; (80013d0 <HAL_RCC_OscConfig+0x2cc>)
 8001276:	68e9      	ldr	r1, [r5, #12]
 8001278:	691a      	ldr	r2, [r3, #16]
 800127a:	f012 0f38 	tst.w	r2, #56	; 0x38
 800127e:	d007      	beq.n	8001290 <HAL_RCC_OscConfig+0x18c>
 8001280:	691a      	ldr	r2, [r3, #16]
 8001282:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8001286:	2a18      	cmp	r2, #24
 8001288:	d128      	bne.n	80012dc <HAL_RCC_OscConfig+0x1d8>
 800128a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800128c:	079c      	lsls	r4, r3, #30
 800128e:	d125      	bne.n	80012dc <HAL_RCC_OscConfig+0x1d8>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001290:	4a4f      	ldr	r2, [pc, #316]	; (80013d0 <HAL_RCC_OscConfig+0x2cc>)
 8001292:	6813      	ldr	r3, [r2, #0]
 8001294:	0758      	lsls	r0, r3, #29
 8001296:	d501      	bpl.n	800129c <HAL_RCC_OscConfig+0x198>
 8001298:	2900      	cmp	r1, #0
 800129a:	d0ac      	beq.n	80011f6 <HAL_RCC_OscConfig+0xf2>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800129c:	6813      	ldr	r3, [r2, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800129e:	4c4c      	ldr	r4, [pc, #304]	; (80013d0 <HAL_RCC_OscConfig+0x2cc>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80012a0:	f023 0319 	bic.w	r3, r3, #25
 80012a4:	430b      	orrs	r3, r1
 80012a6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80012a8:	f7ff f82e 	bl	8000308 <HAL_GetTick>
 80012ac:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012ae:	6823      	ldr	r3, [r4, #0]
 80012b0:	075b      	lsls	r3, r3, #29
 80012b2:	d50d      	bpl.n	80012d0 <HAL_RCC_OscConfig+0x1cc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012b4:	6861      	ldr	r1, [r4, #4]
 80012b6:	f44f 337c 	mov.w	r3, #258048	; 0x3f000
 80012ba:	fa93 f3a3 	rbit	r3, r3
 80012be:	fab3 f283 	clz	r2, r3
 80012c2:	692b      	ldr	r3, [r5, #16]
 80012c4:	4093      	lsls	r3, r2
 80012c6:	f421 327c 	bic.w	r2, r1, #258048	; 0x3f000
 80012ca:	4313      	orrs	r3, r2
 80012cc:	6063      	str	r3, [r4, #4]
 80012ce:	e722      	b.n	8001116 <HAL_RCC_OscConfig+0x12>
          if((int32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012d0:	f7ff f81a 	bl	8000308 <HAL_GetTick>
 80012d4:	1b80      	subs	r0, r0, r6
 80012d6:	2802      	cmp	r0, #2
 80012d8:	d9e9      	bls.n	80012ae <HAL_RCC_OscConfig+0x1aa>
 80012da:	e7a4      	b.n	8001226 <HAL_RCC_OscConfig+0x122>
 80012dc:	4c3c      	ldr	r4, [pc, #240]	; (80013d0 <HAL_RCC_OscConfig+0x2cc>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80012de:	6823      	ldr	r3, [r4, #0]
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012e0:	b179      	cbz	r1, 8001302 <HAL_RCC_OscConfig+0x1fe>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80012e2:	f023 0319 	bic.w	r3, r3, #25
 80012e6:	430b      	orrs	r3, r1
 80012e8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80012ea:	f7ff f80d 	bl	8000308 <HAL_GetTick>
 80012ee:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012f0:	6823      	ldr	r3, [r4, #0]
 80012f2:	075f      	lsls	r7, r3, #29
 80012f4:	d4de      	bmi.n	80012b4 <HAL_RCC_OscConfig+0x1b0>
          if((int32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012f6:	f7ff f807 	bl	8000308 <HAL_GetTick>
 80012fa:	1b80      	subs	r0, r0, r6
 80012fc:	2802      	cmp	r0, #2
 80012fe:	d9f7      	bls.n	80012f0 <HAL_RCC_OscConfig+0x1ec>
 8001300:	e791      	b.n	8001226 <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_HSI_DISABLE();
 8001302:	f023 0301 	bic.w	r3, r3, #1
 8001306:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001308:	f7fe fffe 	bl	8000308 <HAL_GetTick>
 800130c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800130e:	6823      	ldr	r3, [r4, #0]
 8001310:	0758      	lsls	r0, r3, #29
 8001312:	f57f af00 	bpl.w	8001116 <HAL_RCC_OscConfig+0x12>
          if((int32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001316:	f7fe fff7 	bl	8000308 <HAL_GetTick>
 800131a:	1b80      	subs	r0, r0, r6
 800131c:	2802      	cmp	r0, #2
 800131e:	d9f6      	bls.n	800130e <HAL_RCC_OscConfig+0x20a>
 8001320:	e781      	b.n	8001226 <HAL_RCC_OscConfig+0x122>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001322:	69eb      	ldr	r3, [r5, #28]
 8001324:	4c2a      	ldr	r4, [pc, #168]	; (80013d0 <HAL_RCC_OscConfig+0x2cc>)
 8001326:	b1eb      	cbz	r3, 8001364 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_CSI_ENABLE();
 8001328:	6823      	ldr	r3, [r4, #0]
 800132a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800132e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001330:	f7fe ffea 	bl	8000308 <HAL_GetTick>
 8001334:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
 8001336:	6823      	ldr	r3, [r4, #0]
 8001338:	05df      	lsls	r7, r3, #23
 800133a:	d50d      	bpl.n	8001358 <HAL_RCC_OscConfig+0x254>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800133c:	6861      	ldr	r1, [r4, #4]
 800133e:	f04f 43f8 	mov.w	r3, #2080374784	; 0x7c000000
 8001342:	fa93 f3a3 	rbit	r3, r3
 8001346:	fab3 f283 	clz	r2, r3
 800134a:	6a2b      	ldr	r3, [r5, #32]
 800134c:	4093      	lsls	r3, r2
 800134e:	f021 42f8 	bic.w	r2, r1, #2080374784	; 0x7c000000
 8001352:	4313      	orrs	r3, r2
 8001354:	6063      	str	r3, [r4, #4]
 8001356:	e707      	b.n	8001168 <HAL_RCC_OscConfig+0x64>
          if((int32_t) (HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001358:	f7fe ffd6 	bl	8000308 <HAL_GetTick>
 800135c:	1b80      	subs	r0, r0, r6
 800135e:	2802      	cmp	r0, #2
 8001360:	d9e9      	bls.n	8001336 <HAL_RCC_OscConfig+0x232>
 8001362:	e760      	b.n	8001226 <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_CSI_DISABLE();
 8001364:	6823      	ldr	r3, [r4, #0]
 8001366:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800136a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800136c:	f7fe ffcc 	bl	8000308 <HAL_GetTick>
 8001370:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
 8001372:	6823      	ldr	r3, [r4, #0]
 8001374:	05d8      	lsls	r0, r3, #23
 8001376:	f57f aef7 	bpl.w	8001168 <HAL_RCC_OscConfig+0x64>
          if((int32_t) (HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800137a:	f7fe ffc5 	bl	8000308 <HAL_GetTick>
 800137e:	1b80      	subs	r0, r0, r6
 8001380:	2802      	cmp	r0, #2
 8001382:	d9f6      	bls.n	8001372 <HAL_RCC_OscConfig+0x26e>
 8001384:	e74f      	b.n	8001226 <HAL_RCC_OscConfig+0x122>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001386:	696b      	ldr	r3, [r5, #20]
 8001388:	4c11      	ldr	r4, [pc, #68]	; (80013d0 <HAL_RCC_OscConfig+0x2cc>)
 800138a:	b183      	cbz	r3, 80013ae <HAL_RCC_OscConfig+0x2aa>
      __HAL_RCC_LSI_ENABLE();
 800138c:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800138e:	f043 0301 	orr.w	r3, r3, #1
 8001392:	6763      	str	r3, [r4, #116]	; 0x74
      tickstart = HAL_GetTick();
 8001394:	f7fe ffb8 	bl	8000308 <HAL_GetTick>
 8001398:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800139a:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800139c:	079b      	lsls	r3, r3, #30
 800139e:	f53f aee7 	bmi.w	8001170 <HAL_RCC_OscConfig+0x6c>
        if((int32_t) (HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013a2:	f7fe ffb1 	bl	8000308 <HAL_GetTick>
 80013a6:	1b80      	subs	r0, r0, r6
 80013a8:	2802      	cmp	r0, #2
 80013aa:	d9f6      	bls.n	800139a <HAL_RCC_OscConfig+0x296>
 80013ac:	e73b      	b.n	8001226 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_LSI_DISABLE();
 80013ae:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80013b0:	f023 0301 	bic.w	r3, r3, #1
 80013b4:	6763      	str	r3, [r4, #116]	; 0x74
      tickstart = HAL_GetTick();
 80013b6:	f7fe ffa7 	bl	8000308 <HAL_GetTick>
 80013ba:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013bc:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80013be:	079f      	lsls	r7, r3, #30
 80013c0:	f57f aed6 	bpl.w	8001170 <HAL_RCC_OscConfig+0x6c>
        if((int32_t) (HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013c4:	f7fe ffa0 	bl	8000308 <HAL_GetTick>
 80013c8:	1b80      	subs	r0, r0, r6
 80013ca:	2802      	cmp	r0, #2
 80013cc:	d9f6      	bls.n	80013bc <HAL_RCC_OscConfig+0x2b8>
 80013ce:	e72a      	b.n	8001226 <HAL_RCC_OscConfig+0x122>
 80013d0:	58024400 	.word	0x58024400
 80013d4:	58024800 	.word	0x58024800
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80013d8:	69ab      	ldr	r3, [r5, #24]
 80013da:	4c6e      	ldr	r4, [pc, #440]	; (8001594 <HAL_RCC_OscConfig+0x490>)
 80013dc:	b183      	cbz	r3, 8001400 <HAL_RCC_OscConfig+0x2fc>
      __HAL_RCC_HSI48_ENABLE();
 80013de:	6823      	ldr	r3, [r4, #0]
 80013e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013e4:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 80013e6:	f7fe ff8f 	bl	8000308 <HAL_GetTick>
 80013ea:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80013ec:	6823      	ldr	r3, [r4, #0]
 80013ee:	0498      	lsls	r0, r3, #18
 80013f0:	f53f aec2 	bmi.w	8001178 <HAL_RCC_OscConfig+0x74>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80013f4:	f7fe ff88 	bl	8000308 <HAL_GetTick>
 80013f8:	1b80      	subs	r0, r0, r6
 80013fa:	2802      	cmp	r0, #2
 80013fc:	d9f6      	bls.n	80013ec <HAL_RCC_OscConfig+0x2e8>
 80013fe:	e712      	b.n	8001226 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSI48_DISABLE();
 8001400:	6823      	ldr	r3, [r4, #0]
 8001402:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001406:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 8001408:	f7fe ff7e 	bl	8000308 <HAL_GetTick>
 800140c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800140e:	6823      	ldr	r3, [r4, #0]
 8001410:	0499      	lsls	r1, r3, #18
 8001412:	f57f aeb1 	bpl.w	8001178 <HAL_RCC_OscConfig+0x74>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001416:	f7fe ff77 	bl	8000308 <HAL_GetTick>
 800141a:	1b80      	subs	r0, r0, r6
 800141c:	2802      	cmp	r0, #2
 800141e:	d9f6      	bls.n	800140e <HAL_RCC_OscConfig+0x30a>
 8001420:	e701      	b.n	8001226 <HAL_RCC_OscConfig+0x122>
      if((int32_t) (HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001422:	f7fe ff71 	bl	8000308 <HAL_GetTick>
 8001426:	1b80      	subs	r0, r0, r6
 8001428:	2864      	cmp	r0, #100	; 0x64
 800142a:	f67f aeb0 	bls.w	800118e <HAL_RCC_OscConfig+0x8a>
 800142e:	e6fa      	b.n	8001226 <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001430:	b9b3      	cbnz	r3, 8001460 <HAL_RCC_OscConfig+0x35c>
 8001432:	6f23      	ldr	r3, [r4, #112]	; 0x70
        if((int32_t) (HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001434:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001438:	f023 0301 	bic.w	r3, r3, #1
 800143c:	6723      	str	r3, [r4, #112]	; 0x70
 800143e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8001440:	f023 0304 	bic.w	r3, r3, #4
 8001444:	6723      	str	r3, [r4, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001446:	f7fe ff5f 	bl	8000308 <HAL_GetTick>
 800144a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800144c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800144e:	0798      	lsls	r0, r3, #30
 8001450:	f57f aeb4 	bpl.w	80011bc <HAL_RCC_OscConfig+0xb8>
        if((int32_t) (HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001454:	f7fe ff58 	bl	8000308 <HAL_GetTick>
 8001458:	1b80      	subs	r0, r0, r6
 800145a:	42b8      	cmp	r0, r7
 800145c:	d9f6      	bls.n	800144c <HAL_RCC_OscConfig+0x348>
 800145e:	e6e2      	b.n	8001226 <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001460:	2b05      	cmp	r3, #5
 8001462:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8001464:	d103      	bne.n	800146e <HAL_RCC_OscConfig+0x36a>
 8001466:	f043 0304 	orr.w	r3, r3, #4
 800146a:	6723      	str	r3, [r4, #112]	; 0x70
 800146c:	e698      	b.n	80011a0 <HAL_RCC_OscConfig+0x9c>
 800146e:	f023 0301 	bic.w	r3, r3, #1
 8001472:	6723      	str	r3, [r4, #112]	; 0x70
 8001474:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8001476:	f023 0304 	bic.w	r3, r3, #4
 800147a:	e694      	b.n	80011a6 <HAL_RCC_OscConfig+0xa2>
        if((int32_t) (HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800147c:	f7fe ff44 	bl	8000308 <HAL_GetTick>
 8001480:	1bc0      	subs	r0, r0, r7
 8001482:	42a0      	cmp	r0, r4
 8001484:	f67f ae96 	bls.w	80011b4 <HAL_RCC_OscConfig+0xb0>
 8001488:	e6cd      	b.n	8001226 <HAL_RCC_OscConfig+0x122>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800148a:	4c42      	ldr	r4, [pc, #264]	; (8001594 <HAL_RCC_OscConfig+0x490>)
 800148c:	6923      	ldr	r3, [r4, #16]
 800148e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001492:	2b18      	cmp	r3, #24
 8001494:	f43f aeaf 	beq.w	80011f6 <HAL_RCC_OscConfig+0xf2>
        __HAL_RCC_PLL_DISABLE();
 8001498:	6823      	ldr	r3, [r4, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800149a:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800149c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014a0:	6023      	str	r3, [r4, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014a2:	d169      	bne.n	8001578 <HAL_RCC_OscConfig+0x474>
        tickstart = HAL_GetTick();
 80014a4:	f7fe ff30 	bl	8000308 <HAL_GetTick>
 80014a8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014aa:	6823      	ldr	r3, [r4, #0]
 80014ac:	0199      	lsls	r1, r3, #6
 80014ae:	d45d      	bmi.n	800156c <HAL_RCC_OscConfig+0x468>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014b0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80014b2:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80014b4:	f423 737c 	bic.w	r3, r3, #1008	; 0x3f0
 80014b8:	f023 0303 	bic.w	r3, r3, #3
 80014bc:	4313      	orrs	r3, r2
 80014be:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80014c0:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80014c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80014c6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80014c8:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80014ca:	3b01      	subs	r3, #1
 80014cc:	3a01      	subs	r2, #1
 80014ce:	025b      	lsls	r3, r3, #9
 80014d0:	0412      	lsls	r2, r2, #16
 80014d2:	b29b      	uxth	r3, r3
 80014d4:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80014d8:	4313      	orrs	r3, r2
 80014da:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80014dc:	3a01      	subs	r2, #1
 80014de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80014e2:	4313      	orrs	r3, r2
 80014e4:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 80014e6:	3a01      	subs	r2, #1
 80014e8:	0612      	lsls	r2, r2, #24
 80014ea:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80014ee:	4313      	orrs	r3, r2
 80014f0:	6323      	str	r3, [r4, #48]	; 0x30
 80014f2:	f64f 73f8 	movw	r3, #65528	; 0xfff8
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80014f6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80014f8:	fa93 f3a3 	rbit	r3, r3
 80014fc:	fab3 f183 	clz	r1, r3
 8001500:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001504:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8001506:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800150a:	408b      	lsls	r3, r1
 800150c:	4313      	orrs	r3, r2
 800150e:	6363      	str	r3, [r4, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001510:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001512:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8001514:	f023 030c 	bic.w	r3, r3, #12
 8001518:	4313      	orrs	r3, r2
 800151a:	62e3      	str	r3, [r4, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800151c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800151e:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8001520:	f023 0302 	bic.w	r3, r3, #2
 8001524:	4313      	orrs	r3, r2
 8001526:	62e3      	str	r3, [r4, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001528:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800152a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800152e:	62e3      	str	r3, [r4, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001530:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001532:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001536:	62e3      	str	r3, [r4, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001538:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800153a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800153e:	62e3      	str	r3, [r4, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8001540:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001542:	f043 0301 	orr.w	r3, r3, #1
 8001546:	62e3      	str	r3, [r4, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8001548:	6823      	ldr	r3, [r4, #0]
 800154a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800154e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001550:	f7fe feda 	bl	8000308 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001554:	4c0f      	ldr	r4, [pc, #60]	; (8001594 <HAL_RCC_OscConfig+0x490>)
        tickstart = HAL_GetTick();
 8001556:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001558:	6823      	ldr	r3, [r4, #0]
 800155a:	019a      	lsls	r2, r3, #6
 800155c:	f53f ae32 	bmi.w	80011c4 <HAL_RCC_OscConfig+0xc0>
          if((int32_t) (HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001560:	f7fe fed2 	bl	8000308 <HAL_GetTick>
 8001564:	1b40      	subs	r0, r0, r5
 8001566:	2802      	cmp	r0, #2
 8001568:	d9f6      	bls.n	8001558 <HAL_RCC_OscConfig+0x454>
 800156a:	e65c      	b.n	8001226 <HAL_RCC_OscConfig+0x122>
          if((int32_t) (HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800156c:	f7fe fecc 	bl	8000308 <HAL_GetTick>
 8001570:	1b80      	subs	r0, r0, r6
 8001572:	2802      	cmp	r0, #2
 8001574:	d999      	bls.n	80014aa <HAL_RCC_OscConfig+0x3a6>
 8001576:	e656      	b.n	8001226 <HAL_RCC_OscConfig+0x122>
        tickstart = HAL_GetTick();
 8001578:	f7fe fec6 	bl	8000308 <HAL_GetTick>
 800157c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800157e:	6823      	ldr	r3, [r4, #0]
 8001580:	019b      	lsls	r3, r3, #6
 8001582:	f57f ae1f 	bpl.w	80011c4 <HAL_RCC_OscConfig+0xc0>
          if((int32_t) (HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001586:	f7fe febf 	bl	8000308 <HAL_GetTick>
 800158a:	1b40      	subs	r0, r0, r5
 800158c:	2802      	cmp	r0, #2
 800158e:	d9f6      	bls.n	800157e <HAL_RCC_OscConfig+0x47a>
 8001590:	e649      	b.n	8001226 <HAL_RCC_OscConfig+0x122>
 8001592:	bf00      	nop
 8001594:	58024400 	.word	0x58024400

08001598 <HAL_RCC_GetSysClockFreq>:
 uint32_t pllp = 1, pllsource = 0, pllm = 1 ,pllfracen =0 , hsivalue = 0;
 float fracn1=0, pllvco = 0;
 uint32_t sysclockfreq = 0;
  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001598:	4b48      	ldr	r3, [pc, #288]	; (80016bc <HAL_RCC_GetSysClockFreq+0x124>)
 800159a:	691a      	ldr	r2, [r3, #16]
 800159c:	f002 0238 	and.w	r2, r2, #56	; 0x38
 80015a0:	2a10      	cmp	r2, #16
{
 80015a2:	b510      	push	{r4, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015a4:	d00e      	beq.n	80015c4 <HAL_RCC_GetSysClockFreq+0x2c>
 80015a6:	2a18      	cmp	r2, #24
 80015a8:	d00e      	beq.n	80015c8 <HAL_RCC_GetSysClockFreq+0x30>
 80015aa:	2a00      	cmp	r2, #0
 80015ac:	f040 8084 	bne.w	80016b8 <HAL_RCC_GetSysClockFreq+0x120>
  {
  case 0x00:  /* HSI used as system clock source */
  
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	4843      	ldr	r0, [pc, #268]	; (80016c0 <HAL_RCC_GetSysClockFreq+0x128>)
 80015b4:	f012 0f20 	tst.w	r2, #32
 80015b8:	d07f      	beq.n	80016ba <HAL_RCC_GetSysClockFreq+0x122>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80015c0:	40d8      	lsrs	r0, r3
 80015c2:	bd10      	pop	{r4, pc}
  case 0x08:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
    break;

  case 0x10:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80015c4:	483f      	ldr	r0, [pc, #252]	; (80016c4 <HAL_RCC_GetSysClockFreq+0x12c>)
 80015c6:	bd10      	pop	{r4, pc}
  case 0x18:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80015c8:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80015ca:	6a98      	ldr	r0, [r3, #40]	; 0x28
    pllfracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80015cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    fracn1 = (pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80015ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80015d0:	f3c0 1005 	ubfx	r0, r0, #4, #6
    pllfracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80015d4:	f001 0101 	and.w	r1, r1, #1
 80015d8:	eddf 5a3b 	vldr	s11, [pc, #236]	; 80016c8 <HAL_RCC_GetSysClockFreq+0x130>
    fracn1 = (pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80015dc:	f3c2 02cc 	ubfx	r2, r2, #3, #13
 80015e0:	4351      	muls	r1, r2
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80015e2:	f004 0203 	and.w	r2, r4, #3
    fracn1 = (pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80015e6:	ee07 1a90 	vmov	s15, r1

    switch (pllsource)
 80015ea:	2a01      	cmp	r2, #1
    fracn1 = (pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80015ec:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80015f0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    switch (pllsource)
 80015f4:	d002      	beq.n	80015fc <HAL_RCC_GetSysClockFreq+0x64>
 80015f6:	d30e      	bcc.n	8001616 <HAL_RCC_GetSysClockFreq+0x7e>
 80015f8:	2a02      	cmp	r2, #2
 80015fa:	d04c      	beq.n	8001696 <HAL_RCC_GetSysClockFreq+0xfe>
    case 0x02:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
      break;

    default:
      pllvco = (CSI_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	4a33      	ldr	r2, [pc, #204]	; (80016cc <HAL_RCC_GetSysClockFreq+0x134>)
 8001600:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001604:	ee07 3a10 	vmov	s14, r3
 8001608:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800160c:	eea6 7a25 	vfma.f32	s14, s12, s11
 8001610:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001614:	e04b      	b.n	80016ae <HAL_RCC_GetSysClockFreq+0x116>
     if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	f012 0f20 	tst.w	r2, #32
 800161c:	4a28      	ldr	r2, [pc, #160]	; (80016c0 <HAL_RCC_GetSysClockFreq+0x128>)
 800161e:	d026      	beq.n	800166e <HAL_RCC_GetSysClockFreq+0xd6>
        hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001620:	6819      	ldr	r1, [r3, #0]
        pllvco = ( hsivalue / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8001622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001624:	f3c1 01c1 	ubfx	r1, r1, #3, #2
        pllvco = ( hsivalue / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8001628:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800162c:	40ca      	lsrs	r2, r1
        pllvco = ( hsivalue / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 800162e:	fbb2 f2f0 	udiv	r2, r2, r0
 8001632:	ee07 2a10 	vmov	s14, r2
 8001636:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800163a:	ee07 3a10 	vmov	s14, r3
 800163e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001642:	eea6 7a25 	vfma.f32	s14, s12, s11
 8001646:	ee37 7a27 	vadd.f32	s14, s14, s15
 800164a:	ee66 7a87 	vmul.f32	s15, s13, s14
      break;
    }
    pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1 ) ;
 800164e:	4b1b      	ldr	r3, [pc, #108]	; (80016bc <HAL_RCC_GetSysClockFreq+0x124>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8001656:	3301      	adds	r3, #1
    sysclockfreq =  (uint32_t)(pllvco/pllp);
 8001658:	ee07 3a10 	vmov	s14, r3
 800165c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8001660:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001664:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8001668:	ee17 0a90 	vmov	r0, s15
 800166c:	bd10      	pop	{r4, pc}
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 800166e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001670:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001674:	ee07 3a10 	vmov	s14, r3
 8001678:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800167c:	fbb2 f3f0 	udiv	r3, r2, r0
 8001680:	eea6 7a25 	vfma.f32	s14, s12, s11
 8001684:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001688:	ee07 3a90 	vmov	s15, r3
      pllvco = (CSI_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 800168c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001690:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001694:	e7db      	b.n	800164e <HAL_RCC_GetSysClockFreq+0xb6>
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8001696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001698:	4a0a      	ldr	r2, [pc, #40]	; (80016c4 <HAL_RCC_GetSysClockFreq+0x12c>)
 800169a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800169e:	ee07 3a10 	vmov	s14, r3
 80016a2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80016a6:	eea6 7a25 	vfma.f32	s14, s12, s11
 80016aa:	ee37 7a27 	vadd.f32	s14, s14, s15
      pllvco = (CSI_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 80016ae:	fbb2 f2f0 	udiv	r2, r2, r0
 80016b2:	ee07 2a90 	vmov	s15, r2
 80016b6:	e7e9      	b.n	800168c <HAL_RCC_GetSysClockFreq+0xf4>
    sysclockfreq = CSI_VALUE;
 80016b8:	4804      	ldr	r0, [pc, #16]	; (80016cc <HAL_RCC_GetSysClockFreq+0x134>)
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 80016ba:	bd10      	pop	{r4, pc}
 80016bc:	58024400 	.word	0x58024400
 80016c0:	03d09000 	.word	0x03d09000
 80016c4:	017d7840 	.word	0x017d7840
 80016c8:	39000000 	.word	0x39000000
 80016cc:	003d0900 	.word	0x003d0900

080016d0 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80016d0:	4a68      	ldr	r2, [pc, #416]	; (8001874 <HAL_RCC_ClockConfig+0x1a4>)
 80016d2:	6813      	ldr	r3, [r2, #0]
 80016d4:	f003 0307 	and.w	r3, r3, #7
 80016d8:	428b      	cmp	r3, r1
{
 80016da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80016de:	4604      	mov	r4, r0
 80016e0:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80016e2:	d342      	bcc.n	800176a <HAL_RCC_ClockConfig+0x9a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016e4:	6822      	ldr	r2, [r4, #0]
 80016e6:	0797      	lsls	r7, r2, #30
 80016e8:	d44c      	bmi.n	8001784 <HAL_RCC_ClockConfig+0xb4>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016ea:	07d6      	lsls	r6, r2, #31
 80016ec:	d452      	bmi.n	8001794 <HAL_RCC_ClockConfig+0xc4>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80016ee:	4a61      	ldr	r2, [pc, #388]	; (8001874 <HAL_RCC_ClockConfig+0x1a4>)
 80016f0:	6813      	ldr	r3, [r2, #0]
 80016f2:	f003 0307 	and.w	r3, r3, #7
 80016f6:	429d      	cmp	r5, r3
 80016f8:	f0c0 80a8 	bcc.w	800184c <HAL_RCC_ClockConfig+0x17c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80016fc:	6822      	ldr	r2, [r4, #0]
 80016fe:	0755      	lsls	r5, r2, #29
 8001700:	f100 80af 	bmi.w	8001862 <HAL_RCC_ClockConfig+0x192>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001704:	0710      	lsls	r0, r2, #28
 8001706:	d506      	bpl.n	8001716 <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001708:	495b      	ldr	r1, [pc, #364]	; (8001878 <HAL_RCC_ClockConfig+0x1a8>)
 800170a:	6960      	ldr	r0, [r4, #20]
 800170c:	69cb      	ldr	r3, [r1, #28]
 800170e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001712:	4303      	orrs	r3, r0
 8001714:	61cb      	str	r3, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001716:	06d1      	lsls	r1, r2, #27
 8001718:	d506      	bpl.n	8001728 <HAL_RCC_ClockConfig+0x58>
    MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800171a:	4957      	ldr	r1, [pc, #348]	; (8001878 <HAL_RCC_ClockConfig+0x1a8>)
 800171c:	69a0      	ldr	r0, [r4, #24]
 800171e:	69cb      	ldr	r3, [r1, #28]
 8001720:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001724:	4303      	orrs	r3, r0
 8001726:	61cb      	str	r3, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001728:	0693      	lsls	r3, r2, #26
 800172a:	d506      	bpl.n	800173a <HAL_RCC_ClockConfig+0x6a>
    MODIFY_REG(RCC->D3CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB4CLKDivider) );
 800172c:	4a52      	ldr	r2, [pc, #328]	; (8001878 <HAL_RCC_ClockConfig+0x1a8>)
 800172e:	69e1      	ldr	r1, [r4, #28]
 8001730:	6a13      	ldr	r3, [r2, #32]
 8001732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001736:	430b      	orrs	r3, r1
 8001738:	6213      	str	r3, [r2, #32]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> POSITION_VAL(RCC_D1CFGR_D1CPRE_0)];
 800173a:	f7ff ff2d 	bl	8001598 <HAL_RCC_GetSysClockFreq>
 800173e:	4b4e      	ldr	r3, [pc, #312]	; (8001878 <HAL_RCC_ClockConfig+0x1a8>)
 8001740:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001744:	699b      	ldr	r3, [r3, #24]
 8001746:	fa92 f2a2 	rbit	r2, r2
 800174a:	fab2 f282 	clz	r2, r2
 800174e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001752:	40d3      	lsrs	r3, r2
 8001754:	4a49      	ldr	r2, [pc, #292]	; (800187c <HAL_RCC_ClockConfig+0x1ac>)
 8001756:	5cd3      	ldrb	r3, [r2, r3]
 8001758:	40d8      	lsrs	r0, r3
 800175a:	4b49      	ldr	r3, [pc, #292]	; (8001880 <HAL_RCC_ClockConfig+0x1b0>)
 800175c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800175e:	2000      	movs	r0, #0
 8001760:	f003 f8c4 	bl	80048ec <HAL_InitTick>
  return HAL_OK;
 8001764:	2000      	movs	r0, #0
}
 8001766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800176a:	6813      	ldr	r3, [r2, #0]
 800176c:	f023 0307 	bic.w	r3, r3, #7
 8001770:	430b      	orrs	r3, r1
 8001772:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001774:	6813      	ldr	r3, [r2, #0]
 8001776:	f003 0307 	and.w	r3, r3, #7
 800177a:	4299      	cmp	r1, r3
 800177c:	d0b2      	beq.n	80016e4 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 800177e:	2001      	movs	r0, #1
 8001780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001784:	493c      	ldr	r1, [pc, #240]	; (8001878 <HAL_RCC_ClockConfig+0x1a8>)
 8001786:	68e0      	ldr	r0, [r4, #12]
 8001788:	698b      	ldr	r3, [r1, #24]
 800178a:	f023 030f 	bic.w	r3, r3, #15
 800178e:	4303      	orrs	r3, r0
 8001790:	618b      	str	r3, [r1, #24]
 8001792:	e7aa      	b.n	80016ea <HAL_RCC_ClockConfig+0x1a>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001794:	4b38      	ldr	r3, [pc, #224]	; (8001878 <HAL_RCC_ClockConfig+0x1a8>)
 8001796:	68a1      	ldr	r1, [r4, #8]
 8001798:	699a      	ldr	r2, [r3, #24]
 800179a:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 800179e:	430a      	orrs	r2, r1
 80017a0:	619a      	str	r2, [r3, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017a2:	6861      	ldr	r1, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017a4:	681a      	ldr	r2, [r3, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017a6:	2902      	cmp	r1, #2
 80017a8:	d11d      	bne.n	80017e6 <HAL_RCC_ClockConfig+0x116>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017aa:	f412 3f00 	tst.w	r2, #131072	; 0x20000
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ae:	d0e6      	beq.n	800177e <HAL_RCC_ClockConfig+0xae>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80017b0:	691a      	ldr	r2, [r3, #16]
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017b2:	f241 3888 	movw	r8, #5000	; 0x1388
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 80017b6:	4f30      	ldr	r7, [pc, #192]	; (8001878 <HAL_RCC_ClockConfig+0x1a8>)
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80017b8:	f022 0207 	bic.w	r2, r2, #7
 80017bc:	430a      	orrs	r2, r1
 80017be:	611a      	str	r2, [r3, #16]
      tickstart = HAL_GetTick();
 80017c0:	f7fe fda2 	bl	8000308 <HAL_GetTick>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017c4:	6863      	ldr	r3, [r4, #4]
      tickstart = HAL_GetTick();
 80017c6:	4606      	mov	r6, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d119      	bne.n	8001800 <HAL_RCC_ClockConfig+0x130>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80017d2:	2b10      	cmp	r3, #16
 80017d4:	d08b      	beq.n	80016ee <HAL_RCC_ClockConfig+0x1e>
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017d6:	f7fe fd97 	bl	8000308 <HAL_GetTick>
 80017da:	1b80      	subs	r0, r0, r6
 80017dc:	4540      	cmp	r0, r8
 80017de:	d9f5      	bls.n	80017cc <HAL_RCC_ClockConfig+0xfc>
            return HAL_TIMEOUT;
 80017e0:	2003      	movs	r0, #3
 80017e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017e6:	2903      	cmp	r1, #3
 80017e8:	d102      	bne.n	80017f0 <HAL_RCC_ClockConfig+0x120>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ea:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80017ee:	e7de      	b.n	80017ae <HAL_RCC_ClockConfig+0xde>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80017f0:	2901      	cmp	r1, #1
 80017f2:	d102      	bne.n	80017fa <HAL_RCC_ClockConfig+0x12a>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
 80017f4:	f412 7f80 	tst.w	r2, #256	; 0x100
 80017f8:	e7d9      	b.n	80017ae <HAL_RCC_ClockConfig+0xde>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017fa:	f012 0f04 	tst.w	r2, #4
 80017fe:	e7d6      	b.n	80017ae <HAL_RCC_ClockConfig+0xde>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001800:	2b03      	cmp	r3, #3
 8001802:	d10b      	bne.n	800181c <HAL_RCC_ClockConfig+0x14c>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800180a:	2b18      	cmp	r3, #24
 800180c:	f43f af6f 	beq.w	80016ee <HAL_RCC_ClockConfig+0x1e>
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001810:	f7fe fd7a 	bl	8000308 <HAL_GetTick>
 8001814:	1b80      	subs	r0, r0, r6
 8001816:	4540      	cmp	r0, r8
 8001818:	d9f4      	bls.n	8001804 <HAL_RCC_ClockConfig+0x134>
 800181a:	e7e1      	b.n	80017e0 <HAL_RCC_ClockConfig+0x110>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800181c:	2b01      	cmp	r3, #1
 800181e:	d110      	bne.n	8001842 <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_CSI)
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001826:	2b08      	cmp	r3, #8
 8001828:	f43f af61 	beq.w	80016ee <HAL_RCC_ClockConfig+0x1e>
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800182c:	f7fe fd6c 	bl	8000308 <HAL_GetTick>
 8001830:	1b80      	subs	r0, r0, r6
 8001832:	4540      	cmp	r0, r8
 8001834:	d9f4      	bls.n	8001820 <HAL_RCC_ClockConfig+0x150>
 8001836:	e7d3      	b.n	80017e0 <HAL_RCC_ClockConfig+0x110>
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001838:	f7fe fd66 	bl	8000308 <HAL_GetTick>
 800183c:	1b80      	subs	r0, r0, r6
 800183e:	4540      	cmp	r0, r8
 8001840:	d8ce      	bhi.n	80017e0 <HAL_RCC_ClockConfig+0x110>
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	f013 0f38 	tst.w	r3, #56	; 0x38
 8001848:	d1f6      	bne.n	8001838 <HAL_RCC_ClockConfig+0x168>
 800184a:	e750      	b.n	80016ee <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800184c:	6813      	ldr	r3, [r2, #0]
 800184e:	f023 0307 	bic.w	r3, r3, #7
 8001852:	432b      	orrs	r3, r5
 8001854:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001856:	6813      	ldr	r3, [r2, #0]
 8001858:	f003 0307 	and.w	r3, r3, #7
 800185c:	429d      	cmp	r5, r3
 800185e:	d18e      	bne.n	800177e <HAL_RCC_ClockConfig+0xae>
 8001860:	e74c      	b.n	80016fc <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001862:	4905      	ldr	r1, [pc, #20]	; (8001878 <HAL_RCC_ClockConfig+0x1a8>)
 8001864:	6920      	ldr	r0, [r4, #16]
 8001866:	698b      	ldr	r3, [r1, #24]
 8001868:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800186c:	4303      	orrs	r3, r0
 800186e:	618b      	str	r3, [r1, #24]
 8001870:	e748      	b.n	8001704 <HAL_RCC_ClockConfig+0x34>
 8001872:	bf00      	nop
 8001874:	52002000 	.word	0x52002000
 8001878:	58024400 	.word	0x58024400
 800187c:	08004b31 	.word	0x08004b31
 8001880:	20000004 	.word	0x20000004

08001884 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001884:	b508      	push	{r3, lr}
  SystemD2Clock = (HAL_RCCEx_GetD1SysClockFreq() >> D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> POSITION_VAL(RCC_D1CFGR_HPRE_0)]);
 8001886:	f000 fdf9 	bl	800247c <HAL_RCCEx_GetD1SysClockFreq>
 800188a:	4b08      	ldr	r3, [pc, #32]	; (80018ac <HAL_RCC_GetHCLKFreq+0x28>)
 800188c:	2201      	movs	r2, #1
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	fa92 f2a2 	rbit	r2, r2
 8001894:	fab2 f282 	clz	r2, r2
 8001898:	f003 030f 	and.w	r3, r3, #15
 800189c:	40d3      	lsrs	r3, r2
 800189e:	4a04      	ldr	r2, [pc, #16]	; (80018b0 <HAL_RCC_GetHCLKFreq+0x2c>)
 80018a0:	5cd3      	ldrb	r3, [r2, r3]
 80018a2:	40d8      	lsrs	r0, r3
 80018a4:	4b03      	ldr	r3, [pc, #12]	; (80018b4 <HAL_RCC_GetHCLKFreq+0x30>)
 80018a6:	6018      	str	r0, [r3, #0]
  return SystemD2Clock;
}
 80018a8:	bd08      	pop	{r3, pc}
 80018aa:	bf00      	nop
 80018ac:	58024400 	.word	0x58024400
 80018b0:	08004b31 	.word	0x08004b31
 80018b4:	20000008 	.word	0x20000008

080018b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018b8:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> POSITION_VAL(RCC_D2CFGR_D2PPRE2_0)]);
 80018ba:	f7ff ffe3 	bl	8001884 <HAL_RCC_GetHCLKFreq>
 80018be:	4b07      	ldr	r3, [pc, #28]	; (80018dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80018c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018c4:	69db      	ldr	r3, [r3, #28]
 80018c6:	fa92 f2a2 	rbit	r2, r2
 80018ca:	fab2 f282 	clz	r2, r2
 80018ce:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80018d2:	40d3      	lsrs	r3, r2
 80018d4:	4a02      	ldr	r2, [pc, #8]	; (80018e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80018d6:	5cd3      	ldrb	r3, [r2, r3]
}
 80018d8:	40d8      	lsrs	r0, r3
 80018da:	bd08      	pop	{r3, pc}
 80018dc:	58024400 	.word	0x58024400
 80018e0:	08004b31 	.word	0x08004b31

080018e4 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80018e4:	233f      	movs	r3, #63	; 0x3f
 80018e6:	6003      	str	r3, [r0, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80018e8:	4b11      	ldr	r3, [pc, #68]	; (8001930 <HAL_RCC_GetClockConfig+0x4c>)
 80018ea:	691a      	ldr	r2, [r3, #16]
 80018ec:	f002 0207 	and.w	r2, r2, #7
 80018f0:	6042      	str	r2, [r0, #4]

  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80018f2:	699a      	ldr	r2, [r3, #24]
 80018f4:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 80018f8:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80018fa:	699a      	ldr	r2, [r3, #24]
 80018fc:	f002 020f 	and.w	r2, r2, #15
 8001900:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8001902:	699a      	ldr	r2, [r3, #24]
 8001904:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8001908:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800190a:	69da      	ldr	r2, [r3, #28]
 800190c:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8001910:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8001912:	69da      	ldr	r2, [r3, #28]
 8001914:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8001918:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800191a:	6a1b      	ldr	r3, [r3, #32]
 800191c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001920:	61c3      	str	r3, [r0, #28]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001922:	4b04      	ldr	r3, [pc, #16]	; (8001934 <HAL_RCC_GetClockConfig+0x50>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0307 	and.w	r3, r3, #7
 800192a:	600b      	str	r3, [r1, #0]
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	58024400 	.word	0x58024400
 8001934:	52002000 	.word	0x52002000

08001938 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2)
{
 8001938:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_RCC_PLL2P_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLL2R_VALUE(pll2->PLL2R));
  assert_param(IS_RCC_PLL2Q_VALUE(pll2->PLL2Q));
  
  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800193a:	4c2b      	ldr	r4, [pc, #172]	; (80019e8 <RCCEx_PLL2_Config+0xb0>)
{
 800193c:	4605      	mov	r5, r0
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800193e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001940:	f003 0303 	and.w	r3, r3, #3
 8001944:	2b03      	cmp	r3, #3
 8001946:	d04c      	beq.n	80019e2 <RCCEx_PLL2_Config+0xaa>
  
  
  else    
  {  
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8001948:	6823      	ldr	r3, [r4, #0]
 800194a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800194e:	6023      	str	r3, [r4, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001950:	f7fe fcda 	bl	8000308 <HAL_GetTick>
 8001954:	4606      	mov	r6, r0
    
    /* Wait till PLL is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8001956:	6823      	ldr	r3, [r4, #0]
 8001958:	011a      	lsls	r2, r3, #4
 800195a:	d435      	bmi.n	80019c8 <RCCEx_PLL2_Config+0x90>
        return HAL_TIMEOUT;
      }
    }
    
    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800195c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800195e:	682a      	ldr	r2, [r5, #0]
 8001960:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001964:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8001968:	62a3      	str	r3, [r4, #40]	; 0x28
 800196a:	68ab      	ldr	r3, [r5, #8]
 800196c:	68ea      	ldr	r2, [r5, #12]
 800196e:	3b01      	subs	r3, #1
 8001970:	3a01      	subs	r2, #1
 8001972:	025b      	lsls	r3, r3, #9
 8001974:	0412      	lsls	r2, r2, #16
 8001976:	b29b      	uxth	r3, r3
 8001978:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800197c:	4313      	orrs	r3, r2
 800197e:	686a      	ldr	r2, [r5, #4]
 8001980:	3a01      	subs	r2, #1
 8001982:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001986:	4313      	orrs	r3, r2
 8001988:	692a      	ldr	r2, [r5, #16]
 800198a:	3a01      	subs	r2, #1
 800198c:	0612      	lsls	r2, r2, #24
 800198e:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8001992:	4313      	orrs	r3, r2
 8001994:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);
    
    /* Select PLL2 input reference frequency range: VCI */  
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8001996:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001998:	696a      	ldr	r2, [r5, #20]
 800199a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800199e:	4313      	orrs	r3, r2
 80019a0:	62e3      	str	r3, [r4, #44]	; 0x2c
    
    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80019a2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80019a4:	69aa      	ldr	r2, [r5, #24]
 80019a6:	f023 0320 	bic.w	r3, r3, #32
 80019aa:	4313      	orrs	r3, r2
 80019ac:	62e3      	str	r3, [r4, #44]	; 0x2c
    
    
    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80019ae:	6823      	ldr	r3, [r4, #0]
 80019b0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80019b4:	6023      	str	r3, [r4, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019b6:	f7fe fca7 	bl	8000308 <HAL_GetTick>
    
    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
 80019ba:	4c0b      	ldr	r4, [pc, #44]	; (80019e8 <RCCEx_PLL2_Config+0xb0>)
    tickstart = HAL_GetTick();
 80019bc:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
 80019be:	6823      	ldr	r3, [r4, #0]
 80019c0:	011b      	lsls	r3, r3, #4
 80019c2:	d508      	bpl.n	80019d6 <RCCEx_PLL2_Config+0x9e>
    }
    
  }
  
  
  return status;
 80019c4:	2000      	movs	r0, #0
 80019c6:	bd70      	pop	{r4, r5, r6, pc}
      if((int32_t) (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80019c8:	f7fe fc9e 	bl	8000308 <HAL_GetTick>
 80019cc:	1b80      	subs	r0, r0, r6
 80019ce:	2802      	cmp	r0, #2
 80019d0:	d9c1      	bls.n	8001956 <RCCEx_PLL2_Config+0x1e>
        return HAL_TIMEOUT;
 80019d2:	2003      	movs	r0, #3
 80019d4:	bd70      	pop	{r4, r5, r6, pc}
      if((int32_t) (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80019d6:	f7fe fc97 	bl	8000308 <HAL_GetTick>
 80019da:	1b40      	subs	r0, r0, r5
 80019dc:	2802      	cmp	r0, #2
 80019de:	d9ee      	bls.n	80019be <RCCEx_PLL2_Config+0x86>
 80019e0:	e7f7      	b.n	80019d2 <RCCEx_PLL2_Config+0x9a>
    return HAL_ERROR;
 80019e2:	2001      	movs	r0, #1
}
 80019e4:	bd70      	pop	{r4, r5, r6, pc}
 80019e6:	bf00      	nop
 80019e8:	58024400 	.word	0x58024400

080019ec <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3)
{
 80019ec:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_RCC_PLL3P_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLL3R_VALUE(pll3->PLL3R));
  assert_param(IS_RCC_PLL3Q_VALUE(pll3->PLL3Q));
  
  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80019ee:	4c2b      	ldr	r4, [pc, #172]	; (8001a9c <RCCEx_PLL3_Config+0xb0>)
{
 80019f0:	4605      	mov	r5, r0
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80019f2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80019f4:	f003 0303 	and.w	r3, r3, #3
 80019f8:	2b03      	cmp	r3, #3
 80019fa:	d04c      	beq.n	8001a96 <RCCEx_PLL3_Config+0xaa>
  
  
  else    
  { 
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80019fc:	6823      	ldr	r3, [r4, #0]
 80019fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a02:	6023      	str	r3, [r4, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a04:	f7fe fc80 	bl	8000308 <HAL_GetTick>
 8001a08:	4606      	mov	r6, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
 8001a0a:	6823      	ldr	r3, [r4, #0]
 8001a0c:	009a      	lsls	r2, r3, #2
 8001a0e:	d435      	bmi.n	8001a7c <RCCEx_PLL3_Config+0x90>
        return HAL_TIMEOUT;
      }
    }
    
    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8001a10:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001a12:	682a      	ldr	r2, [r5, #0]
 8001a14:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8001a18:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8001a1c:	62a3      	str	r3, [r4, #40]	; 0x28
 8001a1e:	68ab      	ldr	r3, [r5, #8]
 8001a20:	68ea      	ldr	r2, [r5, #12]
 8001a22:	3b01      	subs	r3, #1
 8001a24:	3a01      	subs	r2, #1
 8001a26:	025b      	lsls	r3, r3, #9
 8001a28:	0412      	lsls	r2, r2, #16
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8001a30:	4313      	orrs	r3, r2
 8001a32:	686a      	ldr	r2, [r5, #4]
 8001a34:	3a01      	subs	r2, #1
 8001a36:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	692a      	ldr	r2, [r5, #16]
 8001a3e:	3a01      	subs	r2, #1
 8001a40:	0612      	lsls	r2, r2, #24
 8001a42:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8001a46:	4313      	orrs	r3, r2
 8001a48:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);
    
    /* Select PLL3 input reference frequency range: VCI */  
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8001a4a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001a4c:	696a      	ldr	r2, [r5, #20]
 8001a4e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001a52:	4313      	orrs	r3, r2
 8001a54:	62e3      	str	r3, [r4, #44]	; 0x2c
    
    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8001a56:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001a58:	69aa      	ldr	r2, [r5, #24]
 8001a5a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	62e3      	str	r3, [r4, #44]	; 0x2c
    
    
    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8001a62:	6823      	ldr	r3, [r4, #0]
 8001a64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a68:	6023      	str	r3, [r4, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a6a:	f7fe fc4d 	bl	8000308 <HAL_GetTick>
    
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
 8001a6e:	4c0b      	ldr	r4, [pc, #44]	; (8001a9c <RCCEx_PLL3_Config+0xb0>)
    tickstart = HAL_GetTick();
 8001a70:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
 8001a72:	6823      	ldr	r3, [r4, #0]
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	d508      	bpl.n	8001a8a <RCCEx_PLL3_Config+0x9e>
    }
    
  }
  
  
  return status;
 8001a78:	2000      	movs	r0, #0
 8001a7a:	bd70      	pop	{r4, r5, r6, pc}
      if((int32_t) (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8001a7c:	f7fe fc44 	bl	8000308 <HAL_GetTick>
 8001a80:	1b80      	subs	r0, r0, r6
 8001a82:	2802      	cmp	r0, #2
 8001a84:	d9c1      	bls.n	8001a0a <RCCEx_PLL3_Config+0x1e>
        return HAL_TIMEOUT;
 8001a86:	2003      	movs	r0, #3
 8001a88:	bd70      	pop	{r4, r5, r6, pc}
      if((int32_t) (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8001a8a:	f7fe fc3d 	bl	8000308 <HAL_GetTick>
 8001a8e:	1b40      	subs	r0, r0, r5
 8001a90:	2802      	cmp	r0, #2
 8001a92:	d9ee      	bls.n	8001a72 <RCCEx_PLL3_Config+0x86>
 8001a94:	e7f7      	b.n	8001a86 <RCCEx_PLL3_Config+0x9a>
    return HAL_ERROR;
 8001a96:	2001      	movs	r0, #1
}
 8001a98:	bd70      	pop	{r4, r5, r6, pc}
 8001a9a:	bf00      	nop
 8001a9c:	58024400 	.word	0x58024400

08001aa0 <HAL_RCCEx_PeriphCLKConfig>:
{
 8001aa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX)
 8001aa4:	6805      	ldr	r5, [r0, #0]
{
 8001aa6:	4604      	mov	r4, r0
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX)
 8001aa8:	f015 6500 	ands.w	r5, r5, #134217728	; 0x8000000
 8001aac:	d027      	beq.n	8001afe <HAL_RCCEx_PeriphCLKConfig+0x5e>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8001aae:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8001ab0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ab4:	d018      	beq.n	8001ae8 <HAL_RCCEx_PeriphCLKConfig+0x48>
 8001ab6:	d802      	bhi.n	8001abe <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001ab8:	b183      	cbz	r3, 8001adc <HAL_RCCEx_PeriphCLKConfig+0x3c>
      ret = HAL_ERROR;
 8001aba:	2501      	movs	r5, #1
 8001abc:	e01f      	b.n	8001afe <HAL_RCCEx_PeriphCLKConfig+0x5e>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8001abe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001ac2:	d027      	beq.n	8001b14 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8001ac4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8001ac8:	d1f7      	bne.n	8001aba <HAL_RCCEx_PeriphCLKConfig+0x1a>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8001aca:	4a9f      	ldr	r2, [pc, #636]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8001acc:	2500      	movs	r5, #0
 8001ace:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8001ad0:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8001ad2:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001ad6:	430b      	orrs	r3, r1
 8001ad8:	6513      	str	r3, [r2, #80]	; 0x50
 8001ada:	e010      	b.n	8001afe <HAL_RCCEx_PeriphCLKConfig+0x5e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001adc:	4a9a      	ldr	r2, [pc, #616]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8001ade:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001ae0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ae4:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8001ae6:	e7f0      	b.n	8001aca <HAL_RCCEx_PeriphCLKConfig+0x2a>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8001ae8:	4a97      	ldr	r2, [pc, #604]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8001aea:	3004      	adds	r0, #4
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8001aec:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001aee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001af2:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8001af4:	f7ff ff20 	bl	8001938 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8001af8:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8001afa:	2800      	cmp	r0, #0
 8001afc:	d0e5      	beq.n	8001aca <HAL_RCCEx_PeriphCLKConfig+0x2a>
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1)
 8001afe:	6823      	ldr	r3, [r4, #0]
 8001b00:	05de      	lsls	r6, r3, #23
 8001b02:	d545      	bpl.n	8001b90 <HAL_RCCEx_PeriphCLKConfig+0xf0>
    switch(PeriphClkInit->Sai1ClockSelection)
 8001b04:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001b06:	2b04      	cmp	r3, #4
 8001b08:	d83e      	bhi.n	8001b88 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001b0a:	e8df f003 	tbb	[pc, r3]
 8001b0e:	130c      	.short	0x130c
 8001b10:	1133      	.short	0x1133
 8001b12:	11          	.byte	0x11
 8001b13:	00          	.byte	0x00
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);  
 8001b14:	4a8c      	ldr	r2, [pc, #560]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8001b16:	3024      	adds	r0, #36	; 0x24
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);  
 8001b18:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001b1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b1e:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8001b20:	f7ff ff64 	bl	80019ec <RCCEx_PLL3_Config>
 8001b24:	e7e8      	b.n	8001af8 <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001b26:	4a88      	ldr	r2, [pc, #544]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8001b28:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001b2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b2e:	62d3      	str	r3, [r2, #44]	; 0x2c
    switch(PeriphClkInit->Sai1ClockSelection)
 8001b30:	462e      	mov	r6, r5
 8001b32:	e008      	b.n	8001b46 <HAL_RCCEx_PeriphCLKConfig+0xa6>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8001b34:	4a84      	ldr	r2, [pc, #528]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8001b36:	1d20      	adds	r0, r4, #4
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8001b38:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001b3a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001b3e:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8001b40:	f7ff fefa 	bl	8001938 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8001b44:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8001b46:	bb06      	cbnz	r6, 8001b8a <HAL_RCCEx_PeriphCLKConfig+0xea>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001b48:	4a7f      	ldr	r2, [pc, #508]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8001b4a:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8001b4c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8001b4e:	f023 0307 	bic.w	r3, r3, #7
 8001b52:	430b      	orrs	r3, r1
 8001b54:	6513      	str	r3, [r2, #80]	; 0x50
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23)
 8001b56:	6823      	ldr	r3, [r4, #0]
 8001b58:	0598      	lsls	r0, r3, #22
 8001b5a:	d529      	bpl.n	8001bb0 <HAL_RCCEx_PeriphCLKConfig+0x110>
    switch(PeriphClkInit->Sai23ClockSelection)
 8001b5c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001b5e:	2b80      	cmp	r3, #128	; 0x80
 8001b60:	d048      	beq.n	8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001b62:	d817      	bhi.n	8001b94 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d035      	beq.n	8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x134>
 8001b68:	2b40      	cmp	r3, #64	; 0x40
 8001b6a:	d039      	beq.n	8001be0 <HAL_RCCEx_PeriphCLKConfig+0x140>
      ret = HAL_ERROR;
 8001b6c:	2601      	movs	r6, #1
      status |= ret;
 8001b6e:	4335      	orrs	r5, r6
 8001b70:	b2ed      	uxtb	r5, r5
 8001b72:	e01d      	b.n	8001bb0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);  
 8001b74:	4a74      	ldr	r2, [pc, #464]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8001b76:	f104 0024 	add.w	r0, r4, #36	; 0x24
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);  
 8001b7a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001b7c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b80:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8001b82:	f7ff ff33 	bl	80019ec <RCCEx_PLL3_Config>
 8001b86:	e7dd      	b.n	8001b44 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      ret = HAL_ERROR;
 8001b88:	2601      	movs	r6, #1
      status |= ret;
 8001b8a:	4335      	orrs	r5, r6
 8001b8c:	b2ed      	uxtb	r5, r5
 8001b8e:	e7e2      	b.n	8001b56 <HAL_RCCEx_PeriphCLKConfig+0xb6>
 8001b90:	462e      	mov	r6, r5
 8001b92:	e7e0      	b.n	8001b56 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    switch(PeriphClkInit->Sai23ClockSelection)
 8001b94:	2bc0      	cmp	r3, #192	; 0xc0
 8001b96:	d002      	beq.n	8001b9e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8001b98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b9c:	d1e6      	bne.n	8001b6c <HAL_RCCEx_PeriphCLKConfig+0xcc>
    if(ret == HAL_OK)
 8001b9e:	2e00      	cmp	r6, #0
 8001ba0:	d1e5      	bne.n	8001b6e <HAL_RCCEx_PeriphCLKConfig+0xce>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8001ba2:	4a69      	ldr	r2, [pc, #420]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8001ba4:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8001ba6:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8001ba8:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 8001bac:	430b      	orrs	r3, r1
 8001bae:	6513      	str	r3, [r2, #80]	; 0x50
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A)
 8001bb0:	6823      	ldr	r3, [r4, #0]
 8001bb2:	0559      	lsls	r1, r3, #21
 8001bb4:	d538      	bpl.n	8001c28 <HAL_RCCEx_PeriphCLKConfig+0x188>
    switch(PeriphClkInit->Sai4AClockSelection)
 8001bb6:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8001bba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001bbe:	d055      	beq.n	8001c6c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8001bc0:	d822      	bhi.n	8001c08 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d042      	beq.n	8001c4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 8001bc6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001bca:	d045      	beq.n	8001c58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      ret = HAL_ERROR;
 8001bcc:	2601      	movs	r6, #1
      status |= ret;
 8001bce:	4335      	orrs	r5, r6
 8001bd0:	b2ed      	uxtb	r5, r5
 8001bd2:	e029      	b.n	8001c28 <HAL_RCCEx_PeriphCLKConfig+0x188>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001bd4:	4a5c      	ldr	r2, [pc, #368]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8001bd6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001bd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bdc:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8001bde:	e7de      	b.n	8001b9e <HAL_RCCEx_PeriphCLKConfig+0xfe>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8001be0:	4a59      	ldr	r2, [pc, #356]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8001be2:	1d20      	adds	r0, r4, #4
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8001be4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001be6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001bea:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8001bec:	f7ff fea4 	bl	8001938 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8001bf0:	4606      	mov	r6, r0
      break;
 8001bf2:	e7d4      	b.n	8001b9e <HAL_RCCEx_PeriphCLKConfig+0xfe>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);  
 8001bf4:	4a54      	ldr	r2, [pc, #336]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8001bf6:	f104 0024 	add.w	r0, r4, #36	; 0x24
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);  
 8001bfa:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001bfc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c00:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8001c02:	f7ff fef3 	bl	80019ec <RCCEx_PLL3_Config>
 8001c06:	e7f3      	b.n	8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x150>
    switch(PeriphClkInit->Sai4AClockSelection)
 8001c08:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8001c0c:	d002      	beq.n	8001c14 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8001c0e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001c12:	d1db      	bne.n	8001bcc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    if(ret == HAL_OK)
 8001c14:	2e00      	cmp	r6, #0
 8001c16:	d1da      	bne.n	8001bce <HAL_RCCEx_PeriphCLKConfig+0x12e>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8001c18:	4a4b      	ldr	r2, [pc, #300]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8001c1a:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 8001c1e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001c20:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 8001c24:	430b      	orrs	r3, r1
 8001c26:	6593      	str	r3, [r2, #88]	; 0x58
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B)
 8001c28:	6823      	ldr	r3, [r4, #0]
 8001c2a:	051a      	lsls	r2, r3, #20
 8001c2c:	d538      	bpl.n	8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x200>
    switch(PeriphClkInit->Sai4BClockSelection)
 8001c2e:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 8001c32:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001c36:	d04f      	beq.n	8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8001c38:	d822      	bhi.n	8001c80 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d03c      	beq.n	8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8001c3e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c42:	d03f      	beq.n	8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x224>
      ret = HAL_ERROR;
 8001c44:	2601      	movs	r6, #1
      status |= ret;
 8001c46:	4335      	orrs	r5, r6
 8001c48:	b2ed      	uxtb	r5, r5
 8001c4a:	e029      	b.n	8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001c4c:	4a3e      	ldr	r2, [pc, #248]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8001c4e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001c50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c54:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8001c56:	e7dd      	b.n	8001c14 <HAL_RCCEx_PeriphCLKConfig+0x174>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8001c58:	4a3b      	ldr	r2, [pc, #236]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8001c5a:	1d20      	adds	r0, r4, #4
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8001c5c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001c5e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001c62:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8001c64:	f7ff fe68 	bl	8001938 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8001c68:	4606      	mov	r6, r0
      break;
 8001c6a:	e7d3      	b.n	8001c14 <HAL_RCCEx_PeriphCLKConfig+0x174>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);  
 8001c6c:	4a36      	ldr	r2, [pc, #216]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8001c6e:	f104 0024 	add.w	r0, r4, #36	; 0x24
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);  
 8001c72:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001c74:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c78:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8001c7a:	f7ff feb7 	bl	80019ec <RCCEx_PLL3_Config>
 8001c7e:	e7f3      	b.n	8001c68 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    switch(PeriphClkInit->Sai4BClockSelection)
 8001c80:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001c84:	d002      	beq.n	8001c8c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 8001c86:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001c8a:	d1db      	bne.n	8001c44 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    if(ret == HAL_OK)
 8001c8c:	2e00      	cmp	r6, #0
 8001c8e:	d1da      	bne.n	8001c46 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8001c90:	4a2d      	ldr	r2, [pc, #180]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8001c92:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 8001c96:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001c98:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001c9c:	430b      	orrs	r3, r1
 8001c9e:	6593      	str	r3, [r2, #88]	; 0x58
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI)
 8001ca0:	6823      	ldr	r3, [r4, #0]
 8001ca2:	019b      	lsls	r3, r3, #6
 8001ca4:	d52f      	bpl.n	8001d06 <HAL_RCCEx_PeriphCLKConfig+0x266>
    switch(PeriphClkInit->QspiClockSelection)
 8001ca6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001ca8:	2b10      	cmp	r3, #16
 8001caa:	d03d      	beq.n	8001d28 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8001cac:	d81e      	bhi.n	8001cec <HAL_RCCEx_PeriphCLKConfig+0x24c>
 8001cae:	b30b      	cbz	r3, 8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x254>
      ret = HAL_ERROR;
 8001cb0:	2601      	movs	r6, #1
      status |= ret;
 8001cb2:	4335      	orrs	r5, r6
 8001cb4:	b2ed      	uxtb	r5, r5
 8001cb6:	e026      	b.n	8001d06 <HAL_RCCEx_PeriphCLKConfig+0x266>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001cb8:	4a23      	ldr	r2, [pc, #140]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8001cba:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001cbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cc0:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8001cc2:	e7e3      	b.n	8001c8c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8001cc4:	4a20      	ldr	r2, [pc, #128]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8001cc6:	1d20      	adds	r0, r4, #4
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8001cc8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001cca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001cce:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8001cd0:	f7ff fe32 	bl	8001938 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8001cd4:	4606      	mov	r6, r0
      break;
 8001cd6:	e7d9      	b.n	8001c8c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);  
 8001cd8:	4a1b      	ldr	r2, [pc, #108]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8001cda:	f104 0024 	add.w	r0, r4, #36	; 0x24
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);  
 8001cde:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001ce0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ce4:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8001ce6:	f7ff fe81 	bl	80019ec <RCCEx_PLL3_Config>
 8001cea:	e7f3      	b.n	8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x234>
    switch(PeriphClkInit->QspiClockSelection)
 8001cec:	2b20      	cmp	r3, #32
 8001cee:	d021      	beq.n	8001d34 <HAL_RCCEx_PeriphCLKConfig+0x294>
 8001cf0:	2b30      	cmp	r3, #48	; 0x30
 8001cf2:	d1dd      	bne.n	8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x210>
    if(ret == HAL_OK)
 8001cf4:	2e00      	cmp	r6, #0
 8001cf6:	d1dc      	bne.n	8001cb2 <HAL_RCCEx_PeriphCLKConfig+0x212>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8001cf8:	4a13      	ldr	r2, [pc, #76]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8001cfa:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8001cfc:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8001cfe:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001d02:	430b      	orrs	r3, r1
 8001d04:	64d3      	str	r3, [r2, #76]	; 0x4c
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123)
 8001d06:	6823      	ldr	r3, [r4, #0]
 8001d08:	04df      	lsls	r7, r3, #19
 8001d0a:	d52e      	bpl.n	8001d6a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    switch(PeriphClkInit->Spi123ClockSelection)
 8001d0c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001d0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d12:	d04a      	beq.n	8001daa <HAL_RCCEx_PeriphCLKConfig+0x30a>
 8001d14:	d81a      	bhi.n	8001d4c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d037      	beq.n	8001d8a <HAL_RCCEx_PeriphCLKConfig+0x2ea>
 8001d1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d1e:	d03a      	beq.n	8001d96 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
      ret = HAL_ERROR;
 8001d20:	2601      	movs	r6, #1
      status |= ret;
 8001d22:	4335      	orrs	r5, r6
 8001d24:	b2ed      	uxtb	r5, r5
 8001d26:	e020      	b.n	8001d6a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001d28:	4a07      	ldr	r2, [pc, #28]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8001d2a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001d2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d30:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8001d32:	e7df      	b.n	8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x254>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8001d34:	4a04      	ldr	r2, [pc, #16]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8001d36:	1d20      	adds	r0, r4, #4
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8001d38:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001d3a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d3e:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8001d40:	f7ff fdfa 	bl	8001938 <RCCEx_PLL2_Config>
 8001d44:	4606      	mov	r6, r0
      break;
 8001d46:	e7d5      	b.n	8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8001d48:	58024400 	.word	0x58024400
    switch(PeriphClkInit->Spi123ClockSelection)
 8001d4c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001d50:	d002      	beq.n	8001d58 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8001d52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d56:	d1e3      	bne.n	8001d20 <HAL_RCCEx_PeriphCLKConfig+0x280>
    if(ret == HAL_OK)
 8001d58:	2e00      	cmp	r6, #0
 8001d5a:	d1e2      	bne.n	8001d22 <HAL_RCCEx_PeriphCLKConfig+0x282>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8001d5c:	4aa4      	ldr	r2, [pc, #656]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8001d5e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8001d60:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8001d62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001d66:	430b      	orrs	r3, r1
 8001d68:	6513      	str	r3, [r2, #80]	; 0x50
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45)
 8001d6a:	6823      	ldr	r3, [r4, #0]
 8001d6c:	0498      	lsls	r0, r3, #18
 8001d6e:	d538      	bpl.n	8001de2 <HAL_RCCEx_PeriphCLKConfig+0x342>
    switch(PeriphClkInit->Spi45ClockSelection)
 8001d70:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001d72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001d76:	d04f      	beq.n	8001e18 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8001d78:	d821      	bhi.n	8001dbe <HAL_RCCEx_PeriphCLKConfig+0x31e>
 8001d7a:	b34b      	cbz	r3, 8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8001d7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d80:	d040      	beq.n	8001e04 <HAL_RCCEx_PeriphCLKConfig+0x364>
      ret = HAL_ERROR;
 8001d82:	2601      	movs	r6, #1
      status |= ret;
 8001d84:	4335      	orrs	r5, r6
 8001d86:	b2ed      	uxtb	r5, r5
 8001d88:	e02b      	b.n	8001de2 <HAL_RCCEx_PeriphCLKConfig+0x342>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001d8a:	4a99      	ldr	r2, [pc, #612]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8001d8c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001d8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d92:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8001d94:	e7e0      	b.n	8001d58 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8001d96:	4a96      	ldr	r2, [pc, #600]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x550>)
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8001d98:	1d20      	adds	r0, r4, #4
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8001d9a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001d9c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001da0:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8001da2:	f7ff fdc9 	bl	8001938 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8001da6:	4606      	mov	r6, r0
      break;
 8001da8:	e7d6      	b.n	8001d58 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);  
 8001daa:	4a91      	ldr	r2, [pc, #580]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x550>)
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8001dac:	f104 0024 	add.w	r0, r4, #36	; 0x24
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);  
 8001db0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001db2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001db6:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8001db8:	f7ff fe18 	bl	80019ec <RCCEx_PLL3_Config>
 8001dbc:	e7f3      	b.n	8001da6 <HAL_RCCEx_PeriphCLKConfig+0x306>
    switch(PeriphClkInit->Spi45ClockSelection)
 8001dbe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001dc2:	d005      	beq.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8001dc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001dc8:	d002      	beq.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8001dca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001dce:	d1d8      	bne.n	8001d82 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    if(ret == HAL_OK)
 8001dd0:	2e00      	cmp	r6, #0
 8001dd2:	d1d7      	bne.n	8001d84 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8001dd4:	4a86      	ldr	r2, [pc, #536]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8001dd6:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8001dd8:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8001dda:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8001dde:	430b      	orrs	r3, r1
 8001de0:	6513      	str	r3, [r2, #80]	; 0x50
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6)
 8001de2:	6823      	ldr	r3, [r4, #0]
 8001de4:	0459      	lsls	r1, r3, #17
 8001de6:	d534      	bpl.n	8001e52 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
    switch(PeriphClkInit->Spi6ClockSelection)
 8001de8:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8001dec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001df0:	d059      	beq.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8001df2:	d81b      	bhi.n	8001e2c <HAL_RCCEx_PeriphCLKConfig+0x38c>
 8001df4:	b31b      	cbz	r3, 8001e3e <HAL_RCCEx_PeriphCLKConfig+0x39e>
 8001df6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001dfa:	d04a      	beq.n	8001e92 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      ret = HAL_ERROR;
 8001dfc:	2601      	movs	r6, #1
      status |= ret;
 8001dfe:	4335      	orrs	r5, r6
 8001e00:	b2ed      	uxtb	r5, r5
 8001e02:	e026      	b.n	8001e52 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8001e04:	4a7a      	ldr	r2, [pc, #488]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x550>)
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8001e06:	1d20      	adds	r0, r4, #4
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8001e08:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001e0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e0e:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8001e10:	f7ff fd92 	bl	8001938 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8001e14:	4606      	mov	r6, r0
      break;
 8001e16:	e7db      	b.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x330>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);  
 8001e18:	4a75      	ldr	r2, [pc, #468]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x550>)
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8001e1a:	f104 0024 	add.w	r0, r4, #36	; 0x24
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);  
 8001e1e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001e20:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e24:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8001e26:	f7ff fde1 	bl	80019ec <RCCEx_PLL3_Config>
 8001e2a:	e7f3      	b.n	8001e14 <HAL_RCCEx_PeriphCLKConfig+0x374>
    switch(PeriphClkInit->Spi6ClockSelection)
 8001e2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e30:	d005      	beq.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0x39e>
 8001e32:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e36:	d002      	beq.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0x39e>
 8001e38:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8001e3c:	d1de      	bne.n	8001dfc <HAL_RCCEx_PeriphCLKConfig+0x35c>
    if(ret == HAL_OK)
 8001e3e:	2e00      	cmp	r6, #0
 8001e40:	d1dd      	bne.n	8001dfe <HAL_RCCEx_PeriphCLKConfig+0x35e>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8001e42:	4a6b      	ldr	r2, [pc, #428]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8001e44:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 8001e48:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001e4a:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8001e4e:	430b      	orrs	r3, r1
 8001e50:	6593      	str	r3, [r2, #88]	; 0x58
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN)
 8001e52:	6823      	ldr	r3, [r4, #0]
 8001e54:	041a      	lsls	r2, r3, #16
 8001e56:	d511      	bpl.n	8001e7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    switch(PeriphClkInit->FdcanClockSelection)
 8001e58:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8001e5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001e5e:	d02c      	beq.n	8001eba <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8001e60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e64:	d02f      	beq.n	8001ec6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d137      	bne.n	8001eda <HAL_RCCEx_PeriphCLKConfig+0x43a>
    if(ret == HAL_OK)
 8001e6a:	2e00      	cmp	r6, #0
 8001e6c:	d136      	bne.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0x43c>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8001e6e:	4a60      	ldr	r2, [pc, #384]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8001e70:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8001e72:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8001e74:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001e78:	430b      	orrs	r3, r1
 8001e7a:	6513      	str	r3, [r2, #80]	; 0x50
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC)
 8001e7c:	6823      	ldr	r3, [r4, #0]
 8001e7e:	01db      	lsls	r3, r3, #7
 8001e80:	d53d      	bpl.n	8001efe <HAL_RCCEx_PeriphCLKConfig+0x45e>
    switch(PeriphClkInit->FmcClockSelection)
 8001e82:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001e84:	2b03      	cmp	r3, #3
 8001e86:	f200 8099 	bhi.w	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x51c>
 8001e8a:	e8df f003 	tbb	[pc, r3]
 8001e8e:	2a2f      	.short	0x2a2f
 8001e90:	2f8d      	.short	0x2f8d
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8001e92:	4a57      	ldr	r2, [pc, #348]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x550>)
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8001e94:	1d20      	adds	r0, r4, #4
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8001e96:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001e98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e9c:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8001e9e:	f7ff fd4b 	bl	8001938 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8001ea2:	4606      	mov	r6, r0
      break;
 8001ea4:	e7cb      	b.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0x39e>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);  
 8001ea6:	4a52      	ldr	r2, [pc, #328]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x550>)
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8001ea8:	f104 0024 	add.w	r0, r4, #36	; 0x24
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);  
 8001eac:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001eae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001eb2:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8001eb4:	f7ff fd9a 	bl	80019ec <RCCEx_PLL3_Config>
 8001eb8:	e7f3      	b.n	8001ea2 <HAL_RCCEx_PeriphCLKConfig+0x402>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);        
 8001eba:	4a4d      	ldr	r2, [pc, #308]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8001ebc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001ebe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ec2:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8001ec4:	e7d1      	b.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8001ec6:	4a4a      	ldr	r2, [pc, #296]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x550>)
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8001ec8:	1d20      	adds	r0, r4, #4
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8001eca:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001ecc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001ed0:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8001ed2:	f7ff fd31 	bl	8001938 <RCCEx_PLL2_Config>
 8001ed6:	4606      	mov	r6, r0
      break;
 8001ed8:	e7c7      	b.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
      ret = HAL_ERROR;
 8001eda:	2601      	movs	r6, #1
      status |= ret;
 8001edc:	4335      	orrs	r5, r6
 8001ede:	b2ed      	uxtb	r5, r5
 8001ee0:	e7cc      	b.n	8001e7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001ee2:	4a43      	ldr	r2, [pc, #268]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8001ee4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001ee6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eea:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8001eec:	2e00      	cmp	r6, #0
 8001eee:	d166      	bne.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x51e>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8001ef0:	4a3f      	ldr	r2, [pc, #252]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8001ef2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001ef4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8001ef6:	f023 0303 	bic.w	r3, r3, #3
 8001efa:	430b      	orrs	r3, r1
 8001efc:	64d3      	str	r3, [r2, #76]	; 0x4c
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC)
 8001efe:	6823      	ldr	r3, [r4, #0]
 8001f00:	025f      	lsls	r7, r3, #9
 8001f02:	d542      	bpl.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x4ea>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f04:	4f3b      	ldr	r7, [pc, #236]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x554>)
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f0c:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8001f0e:	f7fe f9fb 	bl	8000308 <HAL_GetTick>
 8001f12:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	05d8      	lsls	r0, r3, #23
 8001f18:	d554      	bpl.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    if(ret == HAL_OK)
 8001f1a:	2e00      	cmp	r6, #0
 8001f1c:	d159      	bne.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x532>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8001f1e:	4b34      	ldr	r3, [pc, #208]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8001f20:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8001f24:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001f26:	4042      	eors	r2, r0
 8001f28:	f412 7f40 	tst.w	r2, #768	; 0x300
 8001f2c:	d00b      	beq.n	8001f46 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f2e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8001f30:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f32:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8001f36:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8001f3a:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001f3c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8001f3e:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8001f42:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8001f44:	671a      	str	r2, [r3, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8001f46:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8001f4a:	d108      	bne.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x4be>
        tickstart = HAL_GetTick();
 8001f4c:	f7fe f9dc 	bl	8000308 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f50:	4f27      	ldr	r7, [pc, #156]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x550>)
        tickstart = HAL_GetTick();
 8001f52:	4680      	mov	r8, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f54:	f241 3988 	movw	r9, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f5a:	0799      	lsls	r1, r3, #30
 8001f5c:	d53c      	bpl.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x538>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f5e:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8001f62:	4923      	ldr	r1, [pc, #140]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8001f64:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001f68:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8001f6c:	d146      	bne.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x55c>
 8001f6e:	6908      	ldr	r0, [r1, #16]
 8001f70:	4a21      	ldr	r2, [pc, #132]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001f72:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 8001f76:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8001f7a:	4302      	orrs	r2, r0
 8001f7c:	610a      	str	r2, [r1, #16]
 8001f7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f82:	4a1b      	ldr	r2, [pc, #108]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8001f84:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8001f86:	430b      	orrs	r3, r1
 8001f88:	6713      	str	r3, [r2, #112]	; 0x70
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16)
 8001f8a:	6823      	ldr	r3, [r4, #0]
 8001f8c:	07da      	lsls	r2, r3, #31
 8001f8e:	d548      	bpl.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x582>
    switch(PeriphClkInit->Usart16ClockSelection)
 8001f90:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8001f92:	2b10      	cmp	r3, #16
 8001f94:	d05a      	beq.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8001f96:	d835      	bhi.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x564>
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d039      	beq.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8001f9c:	2b08      	cmp	r3, #8
 8001f9e:	d04b      	beq.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x598>
      ret = HAL_ERROR;
 8001fa0:	2601      	movs	r6, #1
      status |= ret;
 8001fa2:	4335      	orrs	r5, r6
 8001fa4:	b2ed      	uxtb	r5, r5
 8001fa6:	e03c      	b.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x582>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8001fa8:	4a11      	ldr	r2, [pc, #68]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x550>)
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8001faa:	1d20      	adds	r0, r4, #4
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8001fac:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001fae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001fb2:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8001fb4:	f7ff fcc0 	bl	8001938 <RCCEx_PLL2_Config>
 8001fb8:	4606      	mov	r6, r0
      break;
 8001fba:	e797      	b.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x44c>
      ret = HAL_ERROR;
 8001fbc:	2601      	movs	r6, #1
      status |= ret;
 8001fbe:	4335      	orrs	r5, r6
 8001fc0:	b2ed      	uxtb	r5, r5
 8001fc2:	e79c      	b.n	8001efe <HAL_RCCEx_PeriphCLKConfig+0x45e>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fc4:	f7fe f9a0 	bl	8000308 <HAL_GetTick>
 8001fc8:	eba0 0008 	sub.w	r0, r0, r8
 8001fcc:	2864      	cmp	r0, #100	; 0x64
 8001fce:	d9a1      	bls.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0x474>
        ret = HAL_TIMEOUT;
 8001fd0:	2603      	movs	r6, #3
      status |= ret;
 8001fd2:	4335      	orrs	r5, r6
 8001fd4:	b2ed      	uxtb	r5, r5
 8001fd6:	e7d8      	b.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x4ea>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fd8:	f7fe f996 	bl	8000308 <HAL_GetTick>
 8001fdc:	eba0 0008 	sub.w	r0, r0, r8
 8001fe0:	4548      	cmp	r0, r9
 8001fe2:	d9b9      	bls.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
        status |= ret;
 8001fe4:	f045 0503 	orr.w	r5, r5, #3
            ret = HAL_TIMEOUT;
 8001fe8:	2603      	movs	r6, #3
        status |= ret;
 8001fea:	b2ed      	uxtb	r5, r5
 8001fec:	e7cd      	b.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x4ea>
 8001fee:	bf00      	nop
 8001ff0:	58024400 	.word	0x58024400
 8001ff4:	58024800 	.word	0x58024800
 8001ff8:	00ffffcf 	.word	0x00ffffcf
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ffc:	690a      	ldr	r2, [r1, #16]
 8001ffe:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8002002:	e7bb      	b.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    switch(PeriphClkInit->Usart16ClockSelection)
 8002004:	2b20      	cmp	r3, #32
 8002006:	d003      	beq.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8002008:	2b28      	cmp	r3, #40	; 0x28
 800200a:	d001      	beq.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x570>
 800200c:	2b18      	cmp	r3, #24
 800200e:	d1c7      	bne.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x500>
    if(ret == HAL_OK)
 8002010:	2e00      	cmp	r6, #0
 8002012:	d1c6      	bne.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x502>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002014:	4a79      	ldr	r2, [pc, #484]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x75c>)
 8002016:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8002018:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800201a:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800201e:	430b      	orrs	r3, r1
 8002020:	6553      	str	r3, [r2, #84]	; 0x54
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578)
 8002022:	6823      	ldr	r3, [r4, #0]
 8002024:	079b      	lsls	r3, r3, #30
 8002026:	d52c      	bpl.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x5e2>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002028:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800202a:	2b05      	cmp	r3, #5
 800202c:	d83f      	bhi.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0x60e>
 800202e:	e8df f003 	tbb	[pc, r3]
 8002032:	1720      	.short	0x1720
 8002034:	20202034 	.word	0x20202034
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8002038:	4a70      	ldr	r2, [pc, #448]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x75c>)
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 800203a:	1d20      	adds	r0, r4, #4
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800203c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800203e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002042:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8002044:	f7ff fc78 	bl	8001938 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8002048:	4606      	mov	r6, r0
      break;
 800204a:	e7e1      	b.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x570>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);  
 800204c:	4a6b      	ldr	r2, [pc, #428]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x75c>)
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 800204e:	f104 0024 	add.w	r0, r4, #36	; 0x24
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);  
 8002052:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002054:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002058:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 800205a:	f7ff fcc7 	bl	80019ec <RCCEx_PLL3_Config>
 800205e:	e7f3      	b.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8002060:	4a66      	ldr	r2, [pc, #408]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x75c>)
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8002062:	1d20      	adds	r0, r4, #4
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8002064:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002066:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800206a:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 800206c:	f7ff fc64 	bl	8001938 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8002070:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8002072:	b9ee      	cbnz	r6, 80020b0 <HAL_RCCEx_PeriphCLKConfig+0x610>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002074:	4a61      	ldr	r2, [pc, #388]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x75c>)
 8002076:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8002078:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800207a:	f023 0307 	bic.w	r3, r3, #7
 800207e:	430b      	orrs	r3, r1
 8002080:	6553      	str	r3, [r2, #84]	; 0x54
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1)
 8002082:	6823      	ldr	r3, [r4, #0]
 8002084:	075f      	lsls	r7, r3, #29
 8002086:	d528      	bpl.n	80020da <HAL_RCCEx_PeriphCLKConfig+0x63a>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002088:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800208c:	2b05      	cmp	r3, #5
 800208e:	d83f      	bhi.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x670>
 8002090:	e8df f003 	tbb	[pc, r3]
 8002094:	1a34111a 	.word	0x1a34111a
 8002098:	1a1a      	.short	0x1a1a
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);  
 800209a:	4a58      	ldr	r2, [pc, #352]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x75c>)
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 800209c:	f104 0024 	add.w	r0, r4, #36	; 0x24
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);  
 80020a0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80020a2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80020a6:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 80020a8:	f7ff fca0 	bl	80019ec <RCCEx_PLL3_Config>
 80020ac:	e7e0      	b.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
      ret = HAL_ERROR;
 80020ae:	2601      	movs	r6, #1
      status |= ret;
 80020b0:	4335      	orrs	r5, r6
 80020b2:	b2ed      	uxtb	r5, r5
 80020b4:	e7e5      	b.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x5e2>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80020b6:	4a51      	ldr	r2, [pc, #324]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x75c>)
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 80020b8:	1d20      	adds	r0, r4, #4
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80020ba:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80020bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020c0:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 80020c2:	f7ff fc39 	bl	8001938 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 80020c6:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 80020c8:	bb1e      	cbnz	r6, 8002112 <HAL_RCCEx_PeriphCLKConfig+0x672>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80020ca:	4a4c      	ldr	r2, [pc, #304]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x75c>)
 80020cc:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 80020d0:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80020d2:	f023 0307 	bic.w	r3, r3, #7
 80020d6:	430b      	orrs	r3, r1
 80020d8:	6593      	str	r3, [r2, #88]	; 0x58
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1)
 80020da:	6823      	ldr	r3, [r4, #0]
 80020dc:	0698      	lsls	r0, r3, #26
 80020de:	d52e      	bpl.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x69e>
    switch(PeriphClkInit->Lptim1ClockSelection)
 80020e0:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80020e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80020e8:	d044      	beq.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
 80020ea:	d815      	bhi.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80020ec:	b1eb      	cbz	r3, 800212a <HAL_RCCEx_PeriphCLKConfig+0x68a>
 80020ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80020f2:	d035      	beq.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      ret = HAL_ERROR;
 80020f4:	2601      	movs	r6, #1
      status |= ret;
 80020f6:	4335      	orrs	r5, r6
 80020f8:	b2ed      	uxtb	r5, r5
 80020fa:	e020      	b.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x69e>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);  
 80020fc:	4a3f      	ldr	r2, [pc, #252]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x75c>)
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 80020fe:	f104 0024 	add.w	r0, r4, #36	; 0x24
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);  
 8002102:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002104:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002108:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 800210a:	f7ff fc6f 	bl	80019ec <RCCEx_PLL3_Config>
 800210e:	e7da      	b.n	80020c6 <HAL_RCCEx_PeriphCLKConfig+0x626>
      ret = HAL_ERROR;
 8002110:	2601      	movs	r6, #1
      status |= ret;
 8002112:	4335      	orrs	r5, r6
 8002114:	b2ed      	uxtb	r5, r5
 8002116:	e7e0      	b.n	80020da <HAL_RCCEx_PeriphCLKConfig+0x63a>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002118:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800211c:	d005      	beq.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x68a>
 800211e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002122:	d002      	beq.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x68a>
 8002124:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002128:	d1e4      	bne.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x654>
    if(ret == HAL_OK)
 800212a:	2e00      	cmp	r6, #0
 800212c:	d1e3      	bne.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x656>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800212e:	4a33      	ldr	r2, [pc, #204]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x75c>)
 8002130:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8002134:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002136:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 800213a:	430b      	orrs	r3, r1
 800213c:	6553      	str	r3, [r2, #84]	; 0x54
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2)
 800213e:	6823      	ldr	r3, [r4, #0]
 8002140:	0659      	lsls	r1, r3, #25
 8002142:	d534      	bpl.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x70e>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8002144:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8002148:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800214c:	d04c      	beq.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x748>
 800214e:	d81b      	bhi.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
 8002150:	b31b      	cbz	r3, 800219a <HAL_RCCEx_PeriphCLKConfig+0x6fa>
 8002152:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002156:	d03d      	beq.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x734>
      ret = HAL_ERROR;
 8002158:	2601      	movs	r6, #1
      status |= ret;
 800215a:	4335      	orrs	r5, r6
 800215c:	b2ed      	uxtb	r5, r5
 800215e:	e026      	b.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x70e>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8002160:	4a26      	ldr	r2, [pc, #152]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x75c>)
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8002162:	1d20      	adds	r0, r4, #4
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8002164:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002166:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800216a:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 800216c:	f7ff fbe4 	bl	8001938 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8002170:	4606      	mov	r6, r0
      break;
 8002172:	e7da      	b.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x68a>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);  
 8002174:	4a21      	ldr	r2, [pc, #132]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x75c>)
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8002176:	f104 0024 	add.w	r0, r4, #36	; 0x24
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);  
 800217a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800217c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002180:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8002182:	f7ff fc33 	bl	80019ec <RCCEx_PLL3_Config>
 8002186:	e7f3      	b.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8002188:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800218c:	d005      	beq.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x6fa>
 800218e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002192:	d002      	beq.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x6fa>
 8002194:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002198:	d1de      	bne.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    if(ret == HAL_OK)
 800219a:	2e00      	cmp	r6, #0
 800219c:	d1dd      	bne.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x6ba>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800219e:	4a17      	ldr	r2, [pc, #92]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x75c>)
 80021a0:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 80021a4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80021a6:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80021aa:	430b      	orrs	r3, r1
 80021ac:	6593      	str	r3, [r2, #88]	; 0x58
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345)
 80021ae:	6823      	ldr	r3, [r4, #0]
 80021b0:	061a      	lsls	r2, r3, #24
 80021b2:	d538      	bpl.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x786>
    switch(PeriphClkInit->Lptim345ClockSelection)
 80021b4:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 80021b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80021bc:	f000 80a9 	beq.w	8002312 <HAL_RCCEx_PeriphCLKConfig+0x872>
 80021c0:	d81e      	bhi.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x760>
 80021c2:	b333      	cbz	r3, 8002212 <HAL_RCCEx_PeriphCLKConfig+0x772>
 80021c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021c8:	f000 8099 	beq.w	80022fe <HAL_RCCEx_PeriphCLKConfig+0x85e>
      ret = HAL_ERROR;
 80021cc:	2601      	movs	r6, #1
      status |= ret;
 80021ce:	4335      	orrs	r5, r6
 80021d0:	b2ed      	uxtb	r5, r5
 80021d2:	e028      	b.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x786>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80021d4:	4a09      	ldr	r2, [pc, #36]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x75c>)
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 80021d6:	1d20      	adds	r0, r4, #4
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80021d8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80021da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80021de:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 80021e0:	f7ff fbaa 	bl	8001938 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 80021e4:	4606      	mov	r6, r0
      break;
 80021e6:	e7d8      	b.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x6fa>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);  
 80021e8:	4a04      	ldr	r2, [pc, #16]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x75c>)
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 80021ea:	f104 0024 	add.w	r0, r4, #36	; 0x24
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);  
 80021ee:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80021f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021f4:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 80021f6:	f7ff fbf9 	bl	80019ec <RCCEx_PLL3_Config>
 80021fa:	e7f3      	b.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x744>
 80021fc:	58024400 	.word	0x58024400
    switch(PeriphClkInit->Lptim345ClockSelection)
 8002200:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002204:	d005      	beq.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x772>
 8002206:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800220a:	d002      	beq.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x772>
 800220c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002210:	d1dc      	bne.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x72c>
    if(ret == HAL_OK)
 8002212:	2e00      	cmp	r6, #0
 8002214:	d1db      	bne.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x72e>
      __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8002216:	4a98      	ldr	r2, [pc, #608]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002218:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 800221c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800221e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002222:	430b      	orrs	r3, r1
 8002224:	6593      	str	r3, [r2, #88]	; 0x58
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123)
 8002226:	6823      	ldr	r3, [r4, #0]
 8002228:	071b      	lsls	r3, r3, #28
 800222a:	d50d      	bpl.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x7a8>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800222c:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8002230:	4f91      	ldr	r7, [pc, #580]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002232:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002236:	d176      	bne.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x886>
      RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8002238:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800223c:	f7ff fbd6 	bl	80019ec <RCCEx_PLL3_Config>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8002240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002242:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002246:	62fb      	str	r3, [r7, #44]	; 0x2c
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4)
 8002248:	6823      	ldr	r3, [r4, #0]
 800224a:	06df      	lsls	r7, r3, #27
 800224c:	d50d      	bpl.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x7ca>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800224e:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 8002252:	4f89      	ldr	r7, [pc, #548]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002254:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8002258:	d16b      	bne.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x892>
      RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 800225a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800225e:	f7ff fbc5 	bl	80019ec <RCCEx_PLL3_Config>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8002262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002264:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002268:	62fb      	str	r3, [r7, #44]	; 0x2c
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC)
 800226a:	6823      	ldr	r3, [r4, #0]
 800226c:	0318      	lsls	r0, r3, #12
 800226e:	d51c      	bpl.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x80a>
    switch(PeriphClkInit->AdcClockSelection)
 8002270:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8002274:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002278:	d061      	beq.n	800233e <HAL_RCCEx_PeriphCLKConfig+0x89e>
 800227a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800227e:	d00a      	beq.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 8002280:	2b00      	cmp	r3, #0
 8002282:	d166      	bne.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x8b2>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8002284:	4a7c      	ldr	r2, [pc, #496]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8002286:	1d20      	adds	r0, r4, #4
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8002288:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800228a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800228e:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8002290:	f7ff fb52 	bl	8001938 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8002294:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8002296:	2e00      	cmp	r6, #0
 8002298:	d15c      	bne.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800229a:	4a77      	ldr	r2, [pc, #476]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 800229c:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 80022a0:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80022a2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80022a6:	430b      	orrs	r3, r1
 80022a8:	6593      	str	r3, [r2, #88]	; 0x58
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB)
 80022aa:	6823      	ldr	r3, [r4, #0]
 80022ac:	0359      	lsls	r1, r3, #13
 80022ae:	d519      	bpl.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x844>
    switch(PeriphClkInit->UsbClockSelection)
 80022b0:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80022b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80022b8:	d04f      	beq.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x8ba>
 80022ba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80022be:	d007      	beq.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x830>
 80022c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80022c4:	d154      	bne.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x8d0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80022c6:	4a6c      	ldr	r2, [pc, #432]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80022c8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80022ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022ce:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80022d0:	2e00      	cmp	r6, #0
 80022d2:	d14e      	bne.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x8d2>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022d4:	4a68      	ldr	r2, [pc, #416]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80022d6:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 80022da:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80022dc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80022e0:	430b      	orrs	r3, r1
 80022e2:	6553      	str	r3, [r2, #84]	; 0x54
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC)
 80022e4:	6823      	ldr	r3, [r4, #0]
 80022e6:	03da      	lsls	r2, r3, #15
 80022e8:	d554      	bpl.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    switch(PeriphClkInit->SdmmcClockSelection)
 80022ea:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d043      	beq.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
 80022f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022f4:	d06b      	beq.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x92e>
      ret = HAL_ERROR;
 80022f6:	2601      	movs	r6, #1
      status |= ret;
 80022f8:	4335      	orrs	r5, r6
 80022fa:	b2ed      	uxtb	r5, r5
 80022fc:	e04a      	b.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80022fe:	4a5e      	ldr	r2, [pc, #376]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8002300:	1d20      	adds	r0, r4, #4
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8002302:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002304:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002308:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 800230a:	f7ff fb15 	bl	8001938 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 800230e:	4606      	mov	r6, r0
      break;
 8002310:	e77f      	b.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x772>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);  
 8002312:	4a59      	ldr	r2, [pc, #356]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8002314:	f104 0024 	add.w	r0, r4, #36	; 0x24
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);  
 8002318:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800231a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800231e:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8002320:	f7ff fb64 	bl	80019ec <RCCEx_PLL3_Config>
 8002324:	e7f3      	b.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x86e>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8002326:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002328:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800232c:	4313      	orrs	r3, r2
 800232e:	657b      	str	r3, [r7, #84]	; 0x54
 8002330:	e78a      	b.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x7a8>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002332:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002334:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002338:	4313      	orrs	r3, r2
 800233a:	65bb      	str	r3, [r7, #88]	; 0x58
 800233c:	e795      	b.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x7ca>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);  
 800233e:	4a4e      	ldr	r2, [pc, #312]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8002340:	f104 0024 	add.w	r0, r4, #36	; 0x24
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);  
 8002344:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002346:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800234a:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 800234c:	f7ff fb4e 	bl	80019ec <RCCEx_PLL3_Config>
 8002350:	e7a0      	b.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x7f4>
      ret = HAL_ERROR;
 8002352:	2601      	movs	r6, #1
      status |= ret;
 8002354:	4335      	orrs	r5, r6
 8002356:	b2ed      	uxtb	r5, r5
 8002358:	e7a7      	b.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x80a>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800235a:	4a47      	ldr	r2, [pc, #284]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 800235c:	f104 0024 	add.w	r0, r4, #36	; 0x24
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8002360:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002362:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002366:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8002368:	f7ff fb40 	bl	80019ec <RCCEx_PLL3_Config>
 800236c:	4606      	mov	r6, r0
      break;
 800236e:	e7af      	b.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x830>
      ret = HAL_ERROR;
 8002370:	2601      	movs	r6, #1
      status |= ret;
 8002372:	4335      	orrs	r5, r6
 8002374:	b2ed      	uxtb	r5, r5
 8002376:	e7b5      	b.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x844>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);        
 8002378:	4a3f      	ldr	r2, [pc, #252]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 800237a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800237c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002380:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8002382:	2e00      	cmp	r6, #0
 8002384:	d1b8      	bne.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x858>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8002386:	4a3c      	ldr	r2, [pc, #240]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002388:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800238a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800238c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002390:	430b      	orrs	r3, r1
 8002392:	64d3      	str	r3, [r2, #76]	; 0x4c
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC)
 8002394:	6823      	ldr	r3, [r4, #0]
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	d50a      	bpl.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x910>
    __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);  
 800239a:	4a37      	ldr	r2, [pc, #220]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
    status |= RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 800239c:	f104 0024 	add.w	r0, r4, #36	; 0x24
    __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);  
 80023a0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80023a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023a6:	62d3      	str	r3, [r2, #44]	; 0x2c
    status |= RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 80023a8:	f7ff fb20 	bl	80019ec <RCCEx_PLL3_Config>
 80023ac:	4305      	orrs	r5, r0
 80023ae:	b2ed      	uxtb	r5, r5
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG)
 80023b0:	6823      	ldr	r3, [r4, #0]
 80023b2:	039f      	lsls	r7, r3, #14
 80023b4:	d523      	bpl.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x95e>
    switch(PeriphClkInit->RngClockSelection)
 80023b6:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80023b8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80023bc:	d017      	beq.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x94e>
 80023be:	d810      	bhi.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x942>
 80023c0:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80023c4:	d051      	beq.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x9ca>
      ret = HAL_ERROR;
 80023c6:	2601      	movs	r6, #1
      status |= ret;
 80023c8:	4335      	orrs	r5, r6
 80023ca:	b2ed      	uxtb	r5, r5
 80023cc:	e017      	b.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x95e>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80023ce:	4a2a      	ldr	r2, [pc, #168]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 80023d0:	1d20      	adds	r0, r4, #4
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80023d2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80023d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80023d8:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 80023da:	f7ff faad 	bl	8001938 <RCCEx_PLL2_Config>
 80023de:	4606      	mov	r6, r0
      break;
 80023e0:	e7cf      	b.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
    switch(PeriphClkInit->RngClockSelection)
 80023e2:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 80023e6:	d002      	beq.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x94e>
 80023e8:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 80023ec:	d1eb      	bne.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x926>
    if(ret == HAL_OK)
 80023ee:	2e00      	cmp	r6, #0
 80023f0:	d1ea      	bne.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x928>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80023f2:	4821      	ldr	r0, [pc, #132]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80023f4:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80023f6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80023fa:	430a      	orrs	r2, r1
 80023fc:	6542      	str	r2, [r0, #84]	; 0x54
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1)
 80023fe:	02de      	lsls	r6, r3, #11
 8002400:	d506      	bpl.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x970>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002402:	491d      	ldr	r1, [pc, #116]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002404:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8002406:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8002408:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800240c:	4302      	orrs	r2, r0
 800240e:	650a      	str	r2, [r1, #80]	; 0x50
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1)
 8002410:	00d8      	lsls	r0, r3, #3
 8002412:	d507      	bpl.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x984>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8002414:	4918      	ldr	r1, [pc, #96]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002416:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 800241a:	690a      	ldr	r2, [r1, #16]
 800241c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002420:	4302      	orrs	r2, r0
 8002422:	610a      	str	r2, [r1, #16]
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1)
 8002424:	0299      	lsls	r1, r3, #10
 8002426:	d506      	bpl.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x996>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002428:	4913      	ldr	r1, [pc, #76]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 800242a:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800242c:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800242e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8002432:	4302      	orrs	r2, r0
 8002434:	650a      	str	r2, [r1, #80]	; 0x50
  if((PeriphClkInit->PeriphClockSelection) & (RCC_PERIPHCLK_TIM))
 8002436:	005a      	lsls	r2, r3, #1
 8002438:	d509      	bpl.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800243a:	4a0f      	ldr	r2, [pc, #60]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 800243c:	6911      	ldr	r1, [r2, #16]
 800243e:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8002442:	6111      	str	r1, [r2, #16]
 8002444:	6911      	ldr	r1, [r2, #16]
 8002446:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 800244a:	4301      	orrs	r1, r0
 800244c:	6111      	str	r1, [r2, #16]
  if((PeriphClkInit->PeriphClockSelection) & (RCC_PERIPHCLK_CKPER))
 800244e:	2b00      	cmp	r3, #0
 8002450:	da06      	bge.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x9c0>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8002452:	4a09      	ldr	r2, [pc, #36]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002454:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8002456:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8002458:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800245c:	430b      	orrs	r3, r1
 800245e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002460:	1c28      	adds	r0, r5, #0
 8002462:	bf18      	it	ne
 8002464:	2001      	movne	r0, #1
}
 8002466:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800246a:	4803      	ldr	r0, [pc, #12]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 800246c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800246e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002472:	62c2      	str	r2, [r0, #44]	; 0x2c
      break;
 8002474:	e7bb      	b.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8002476:	bf00      	nop
 8002478:	58024400 	.word	0x58024400

0800247c <HAL_RCCEx_GetD1SysClockFreq>:
{
 800247c:	b508      	push	{r3, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> POSITION_VAL(RCC_D1CFGR_D1CPRE_0)];
 800247e:	f7ff f88b 	bl	8001598 <HAL_RCC_GetSysClockFreq>
 8002482:	4b08      	ldr	r3, [pc, #32]	; (80024a4 <HAL_RCCEx_GetD1SysClockFreq+0x28>)
 8002484:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002488:	699b      	ldr	r3, [r3, #24]
 800248a:	fa92 f2a2 	rbit	r2, r2
 800248e:	fab2 f282 	clz	r2, r2
 8002492:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002496:	40d3      	lsrs	r3, r2
 8002498:	4a03      	ldr	r2, [pc, #12]	; (80024a8 <HAL_RCCEx_GetD1SysClockFreq+0x2c>)
 800249a:	5cd3      	ldrb	r3, [r2, r3]
 800249c:	40d8      	lsrs	r0, r3
 800249e:	4b03      	ldr	r3, [pc, #12]	; (80024ac <HAL_RCCEx_GetD1SysClockFreq+0x30>)
 80024a0:	6018      	str	r0, [r3, #0]
}
 80024a2:	bd08      	pop	{r3, pc}
 80024a4:	58024400 	.word	0x58024400
 80024a8:	08004b31 	.word	0x08004b31
 80024ac:	20000004 	.word	0x20000004

080024b0 <SPI_WaitFifoStateUntilTimeout.part.2>:
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80024b0:	6802      	ldr	r2, [r0, #0]
 80024b2:	6913      	ldr	r3, [r2, #16]
 80024b4:	f423 7358 	bic.w	r3, r3, #864	; 0x360
 80024b8:	f023 0303 	bic.w	r3, r3, #3
 80024bc:	6113      	str	r3, [r2, #16]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024be:	6843      	ldr	r3, [r0, #4]
 80024c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024c4:	d109      	bne.n	80024da <SPI_WaitFifoStateUntilTimeout.part.2+0x2a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80024c6:	6883      	ldr	r3, [r0, #8]
 80024c8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80024cc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80024d0:	d103      	bne.n	80024da <SPI_WaitFifoStateUntilTimeout.part.2+0x2a>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80024d2:	6813      	ldr	r3, [r2, #0]
 80024d4:	f023 0301 	bic.w	r3, r3, #1
 80024d8:	6013      	str	r3, [r2, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80024da:	2301      	movs	r3, #1
 80024dc:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80024e0:	2300      	movs	r3, #0
 80024e2:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
      }
    }
  }

  return HAL_OK;
}
 80024e6:	2003      	movs	r0, #3
 80024e8:	4770      	bx	lr
	...

080024ec <SPI_EndRxTxTransaction.isra.3>:
  * @brief Handle the check of the RXTX or TX transaction complete.
  * @param hspi: SPI handle
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
 80024ec:	b538      	push	{r3, r4, r5, lr}
 80024ee:	4604      	mov	r4, r0
 80024f0:	460d      	mov	r5, r1
  while ((hspi->Instance->SR & Flag) != State)
 80024f2:	6823      	ldr	r3, [r4, #0]
 80024f4:	695b      	ldr	r3, [r3, #20]
 80024f6:	071b      	lsls	r3, r3, #28
 80024f8:	d408      	bmi.n	800250c <SPI_EndRxTxTransaction.isra.3+0x20>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 80024fa:	f7fd ff05 	bl	8000308 <HAL_GetTick>
 80024fe:	1b40      	subs	r0, r0, r5
 8002500:	2863      	cmp	r0, #99	; 0x63
 8002502:	d9f6      	bls.n	80024f2 <SPI_EndRxTxTransaction.isra.3+0x6>
 8002504:	4620      	mov	r0, r4
 8002506:	f7ff ffd3 	bl	80024b0 <SPI_WaitFifoStateUntilTimeout.part.2>
{
  /* wait for Tx data to be sent */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_EOT, SPI_FLAG_EOT, SPI_DEFAULT_TIMEOUT, Tickstart) != HAL_OK)
 800250a:	b9a8      	cbnz	r0, 8002538 <SPI_EndRxTxTransaction.isra.3+0x4c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }
  else
  {
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800250c:	6823      	ldr	r3, [r4, #0]
 800250e:	699a      	ldr	r2, [r3, #24]
 8002510:	f042 0208 	orr.w	r2, r2, #8
 8002514:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8002516:	699a      	ldr	r2, [r3, #24]
 8002518:	f042 0210 	orr.w	r2, r2, #16
 800251c:	619a      	str	r2, [r3, #24]
  }

  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 800251e:	4a30      	ldr	r2, [pc, #192]	; (80025e0 <SPI_EndRxTxTransaction.isra.3+0xf4>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d155      	bne.n	80025d0 <SPI_EndRxTxTransaction.isra.3+0xe4>
  {
    while ( (hspi->Instance->SR & SPI_FLAG_RXWNE) || ((hspi->Instance->SR & SPI_FLAG_FRLVL) != SPI_FRLVL_EMPTY))
 8002524:	6822      	ldr	r2, [r4, #0]
 8002526:	6953      	ldr	r3, [r2, #20]
 8002528:	041b      	lsls	r3, r3, #16
 800252a:	d40d      	bmi.n	8002548 <SPI_EndRxTxTransaction.isra.3+0x5c>
 800252c:	6953      	ldr	r3, [r2, #20]
 800252e:	f413 4fc0 	tst.w	r3, #24576	; 0x6000
 8002532:	d109      	bne.n	8002548 <SPI_EndRxTxTransaction.isra.3+0x5c>
        return  HAL_SPIEx_FlushRxFifo(hspi);
      }
    }
  }

  return HAL_OK;
 8002534:	2000      	movs	r0, #0
 8002536:	bd38      	pop	{r3, r4, r5, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002538:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    return HAL_TIMEOUT;
 800253c:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800253e:	f043 0320 	orr.w	r3, r3, #32
 8002542:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 8002546:	bd38      	pop	{r3, r4, r5, pc}
      if (hspi->RxXferCount != 0)
 8002548:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800254c:	b29b      	uxth	r3, r3
 800254e:	2b00      	cmp	r3, #0
 8002550:	d039      	beq.n	80025c6 <SPI_EndRxTxTransaction.isra.3+0xda>
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8002552:	68e1      	ldr	r1, [r4, #12]
 8002554:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002556:	290f      	cmp	r1, #15
 8002558:	d907      	bls.n	800256a <SPI_EndRxTxTransaction.isra.3+0x7e>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800255a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800255c:	f843 2b04 	str.w	r2, [r3], #4
            hspi->pRxBuffPtr += sizeof(uint8_t);
 8002560:	6663      	str	r3, [r4, #100]	; 0x64
            hspi->RxXferCount--;
 8002562:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8002566:	3b01      	subs	r3, #1
 8002568:	e019      	b.n	800259e <SPI_EndRxTxTransaction.isra.3+0xb2>
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800256a:	2907      	cmp	r1, #7
          if (hspi->Instance->SR & SPI_FLAG_RXWNE)
 800256c:	6951      	ldr	r1, [r2, #20]
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800256e:	d90d      	bls.n	800258c <SPI_EndRxTxTransaction.isra.3+0xa0>
          if (hspi->Instance->SR & SPI_FLAG_RXWNE)
 8002570:	0408      	lsls	r0, r1, #16
 8002572:	d507      	bpl.n	8002584 <SPI_EndRxTxTransaction.isra.3+0x98>
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8002574:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002576:	f843 2b04 	str.w	r2, [r3], #4
            hspi->pRxBuffPtr += sizeof(uint16_t);
 800257a:	6663      	str	r3, [r4, #100]	; 0x64
            hspi->RxXferCount-=2;
 800257c:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8002580:	3b02      	subs	r3, #2
 8002582:	e00c      	b.n	800259e <SPI_EndRxTxTransaction.isra.3+0xb2>
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
 8002584:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 8002586:	f823 2b02 	strh.w	r2, [r3], #2
 800258a:	e7e9      	b.n	8002560 <SPI_EndRxTxTransaction.isra.3+0x74>
          if (hspi->Instance->SR & SPI_FLAG_RXWNE)
 800258c:	0409      	lsls	r1, r1, #16
 800258e:	d50a      	bpl.n	80025a6 <SPI_EndRxTxTransaction.isra.3+0xba>
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8002590:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002592:	f843 2b04 	str.w	r2, [r3], #4
            hspi->pRxBuffPtr += sizeof(uint32_t);
 8002596:	6663      	str	r3, [r4, #100]	; 0x64
            hspi->RxXferCount-=4;
 8002598:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800259c:	3b04      	subs	r3, #4
            hspi->RxXferCount--;
 800259e:	b29b      	uxth	r3, r3
 80025a0:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 80025a4:	e7be      	b.n	8002524 <SPI_EndRxTxTransaction.isra.3+0x38>
          else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_FRLVL_QUARTER_FULL)
 80025a6:	6951      	ldr	r1, [r2, #20]
 80025a8:	f401 41c0 	and.w	r1, r1, #24576	; 0x6000
 80025ac:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 80025b0:	d903      	bls.n	80025ba <SPI_EndRxTxTransaction.isra.3+0xce>
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
 80025b2:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 80025b4:	f823 2b02 	strh.w	r2, [r3], #2
 80025b8:	e7df      	b.n	800257a <SPI_EndRxTxTransaction.isra.3+0x8e>
            (*hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80025ba:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 80025be:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 80025c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80025c2:	3301      	adds	r3, #1
 80025c4:	e7cc      	b.n	8002560 <SPI_EndRxTxTransaction.isra.3+0x74>
        return  HAL_SPIEx_FlushRxFifo(hspi);
 80025c6:	4620      	mov	r0, r4
}
 80025c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return  HAL_SPIEx_FlushRxFifo(hspi);
 80025cc:	f000 ba1a 	b.w	8002a04 <HAL_SPIEx_FlushRxFifo>
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 80025d0:	4a04      	ldr	r2, [pc, #16]	; (80025e4 <SPI_EndRxTxTransaction.isra.3+0xf8>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d0a6      	beq.n	8002524 <SPI_EndRxTxTransaction.isra.3+0x38>
 80025d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80025da:	4293      	cmp	r3, r2
 80025dc:	d1aa      	bne.n	8002534 <SPI_EndRxTxTransaction.isra.3+0x48>
 80025de:	e7a1      	b.n	8002524 <SPI_EndRxTxTransaction.isra.3+0x38>
 80025e0:	40013000 	.word	0x40013000
 80025e4:	40003800 	.word	0x40003800

080025e8 <HAL_SPI_Init>:
{
 80025e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hspi == NULL)
 80025ea:	4604      	mov	r4, r0
 80025ec:	2800      	cmp	r0, #0
 80025ee:	f000 80c2 	beq.w	8002776 <HAL_SPI_Init+0x18e>
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80025f2:	4b62      	ldr	r3, [pc, #392]	; (800277c <HAL_SPI_Init+0x194>)
 80025f4:	6802      	ldr	r2, [r0, #0]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	68c3      	ldr	r3, [r0, #12]
 80025fa:	d00e      	beq.n	800261a <HAL_SPI_Init+0x32>
 80025fc:	4960      	ldr	r1, [pc, #384]	; (8002780 <HAL_SPI_Init+0x198>)
 80025fe:	428a      	cmp	r2, r1
 8002600:	d00b      	beq.n	800261a <HAL_SPI_Init+0x32>
 8002602:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002606:	428a      	cmp	r2, r1
 8002608:	d007      	beq.n	800261a <HAL_SPI_Init+0x32>
 800260a:	2b0f      	cmp	r3, #15
 800260c:	f200 80b3 	bhi.w	8002776 <HAL_SPI_Init+0x18e>
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.CRCLength > SPI_CRC_LENGTH_16BIT))
 8002610:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8002612:	f5b2 2f70 	cmp.w	r2, #983040	; 0xf0000
 8002616:	f200 80ae 	bhi.w	8002776 <HAL_SPI_Init+0x18e>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_32BIT))
 800261a:	f023 0210 	bic.w	r2, r3, #16
 800261e:	2a0f      	cmp	r2, #15
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002620:	bf1c      	itt	ne
 8002622:	2200      	movne	r2, #0
 8002624:	62a2      	strne	r2, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8002626:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002628:	b932      	cbnz	r2, 8002638 <HAL_SPI_Init+0x50>
    if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800262a:	2b0f      	cmp	r3, #15
      hspi->Init.CRCLength = SPI_CRC_LENGTH_32BIT;
 800262c:	bf8c      	ite	hi
 800262e:	f44f 13f8 	movhi.w	r3, #2031616	; 0x1f0000
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8002632:	f44f 2370 	movls.w	r3, #983040	; 0xf0000
 8002636:	6323      	str	r3, [r4, #48]	; 0x30
  if (hspi->State == HAL_SPI_STATE_RESET)
 8002638:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 800263c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002640:	b923      	cbnz	r3, 800264c <HAL_SPI_Init+0x64>
    hspi->Lock = HAL_UNLOCKED;
 8002642:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
 8002646:	4620      	mov	r0, r4
 8002648:	f002 f8d0 	bl	80047ec <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 800264c:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 800264e:	2302      	movs	r3, #2
  HAL_SPIEx_DisableLockConfiguration(hspi);
 8002650:	4620      	mov	r0, r4
  hspi->State = HAL_SPI_STATE_BUSY;
 8002652:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  __HAL_SPI_DISABLE(hspi);
 8002656:	6813      	ldr	r3, [r2, #0]
 8002658:	f023 0301 	bic.w	r3, r3, #1
 800265c:	6013      	str	r3, [r2, #0]
  HAL_SPIEx_DisableLockConfiguration(hspi);
 800265e:	f000 f9f9 	bl	8002a54 <HAL_SPIEx_DisableLockConfiguration>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 8002662:	f8d4 e018 	ldr.w	lr, [r4, #24]
 8002666:	6823      	ldr	r3, [r4, #0]
 8002668:	f1be 6f80 	cmp.w	lr, #67108864	; 0x4000000
 800266c:	6861      	ldr	r1, [r4, #4]
 800266e:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 8002670:	d107      	bne.n	8002682 <HAL_SPI_Init+0x9a>
 8002672:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8002676:	d104      	bne.n	8002682 <HAL_SPI_Init+0x9a>
 8002678:	b91f      	cbnz	r7, 8002682 <HAL_SPI_Init+0x9a>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800267a:	6818      	ldr	r0, [r3, #0]
 800267c:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 8002680:	6018      	str	r0, [r3, #0]
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | hspi->Init.CRCLength |
 8002682:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8002684:	69e6      	ldr	r6, [r4, #28]
 8002686:	6b20      	ldr	r0, [r4, #48]	; 0x30
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002688:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | hspi->Init.CRCLength |
 800268c:	ea46 0605 	orr.w	r6, r6, r5
 8002690:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002692:	ea46 0600 	orr.w	r6, r6, r0
 8002696:	ea46 0602 	orr.w	r6, r6, r2
 800269a:	68e2      	ldr	r2, [r4, #12]
 800269c:	ea46 0602 	orr.w	r6, r6, r2
 80026a0:	609e      	str	r6, [r3, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 80026a2:	6b66      	ldr	r6, [r4, #52]	; 0x34
 80026a4:	ea4e 0206 	orr.w	r2, lr, r6
 80026a8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80026aa:	ea42 0206 	orr.w	r2, r2, r6
 80026ae:	6926      	ldr	r6, [r4, #16]
 80026b0:	ea42 0207 	orr.w	r2, r2, r7
 80026b4:	ea42 0206 	orr.w	r2, r2, r6
 80026b8:	6966      	ldr	r6, [r4, #20]
 80026ba:	ea42 0206 	orr.w	r2, r2, r6
 80026be:	6a26      	ldr	r6, [r4, #32]
 80026c0:	ea42 0206 	orr.w	r2, r2, r6
 80026c4:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 80026c6:	ea42 0201 	orr.w	r2, r2, r1
 80026ca:	ea42 0206 	orr.w	r2, r2, r6
 80026ce:	68a6      	ldr	r6, [r4, #8]
 80026d0:	ea42 0206 	orr.w	r2, r2, r6
 80026d4:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 80026d6:	ea42 0206 	orr.w	r2, r2, r6
 80026da:	6da6      	ldr	r6, [r4, #88]	; 0x58
 80026dc:	ea42 0206 	orr.w	r2, r2, r6
 80026e0:	60da      	str	r2, [r3, #12]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80026e2:	d125      	bne.n	8002730 <HAL_SPI_Init+0x148>
    if (hspi->Init.TxCRCInitializationPattern == SPI_CRC_INITIALIZATION_ALL_ONE_PATTERN)
 80026e4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80026e6:	2a01      	cmp	r2, #1
      SET_BIT(hspi->Instance->CR1, SPI_CR1_TCRCINI);
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	bf0c      	ite	eq
 80026ec:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
      CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_TCRCINI);
 80026f0:	f422 4200 	bicne.w	r2, r2, #32768	; 0x8000
 80026f4:	601a      	str	r2, [r3, #0]
    if (hspi->Init.RxCRCInitializationPattern == SPI_CRC_INITIALIZATION_ALL_ONE_PATTERN)
 80026f6:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80026f8:	2a01      	cmp	r2, #1
      SET_BIT(hspi->Instance->CR1, SPI_CR1_RCRCINI);
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	bf0c      	ite	eq
 80026fe:	f442 4280 	orreq.w	r2, r2, #16384	; 0x4000
      CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_RCRCINI);
 8002702:	f422 4280 	bicne.w	r2, r2, #16384	; 0x4000
 8002706:	601a      	str	r2, [r3, #0]
    if (  ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)) || \
 8002708:	4a1c      	ldr	r2, [pc, #112]	; (800277c <HAL_SPI_Init+0x194>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d030      	beq.n	8002770 <HAL_SPI_Init+0x188>
 800270e:	f5a2 4278 	sub.w	r2, r2, #63488	; 0xf800
 8002712:	4293      	cmp	r3, r2
 8002714:	d02c      	beq.n	8002770 <HAL_SPI_Init+0x188>
 8002716:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800271a:	4293      	cmp	r3, r2
 800271c:	d028      	beq.n	8002770 <HAL_SPI_Init+0x188>
 800271e:	f5b0 2f70 	cmp.w	r0, #983040	; 0xf0000
          ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance))  && (hspi->Init.CRCLength == SPI_CRC_LENGTH_32BIT)) )
 8002722:	d105      	bne.n	8002730 <HAL_SPI_Init+0x148>
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRC33_17);
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800272a:	601a      	str	r2, [r3, #0]
      WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
 800272c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800272e:	641a      	str	r2, [r3, #64]	; 0x40
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8002730:	b959      	cbnz	r1, 800274a <HAL_SPI_Init+0x162>
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8002732:	689a      	ldr	r2, [r3, #8]
 8002734:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 8002738:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800273c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800273e:	689a      	ldr	r2, [r3, #8]
 8002740:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8002744:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002748:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800274a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800274c:	f022 0201 	bic.w	r2, r2, #1
 8002750:	651a      	str	r2, [r3, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8002752:	024a      	lsls	r2, r1, #9
 8002754:	d505      	bpl.n	8002762 <HAL_SPI_Init+0x17a>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8002756:	68da      	ldr	r2, [r3, #12]
 8002758:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800275a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800275e:	430a      	orrs	r2, r1
 8002760:	60da      	str	r2, [r3, #12]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002762:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8002764:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002766:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800276a:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  return HAL_OK;
 800276e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance))  && (hspi->Init.CRCLength == SPI_CRC_LENGTH_32BIT)) )
 8002770:	f5b0 1ff8 	cmp.w	r0, #2031616	; 0x1f0000
 8002774:	e7d5      	b.n	8002722 <HAL_SPI_Init+0x13a>
    return HAL_ERROR;
 8002776:	2001      	movs	r0, #1
}
 8002778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800277a:	bf00      	nop
 800277c:	40013000 	.word	0x40013000
 8002780:	40003800 	.word	0x40003800

08002784 <HAL_SPI_ErrorCallback>:
 8002784:	4770      	bx	lr
	...

08002788 <HAL_SPI_Transmit>:
{
 8002788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800278c:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 800278e:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
{
 8002792:	4604      	mov	r4, r0
 8002794:	4688      	mov	r8, r1
  __HAL_LOCK(hspi);
 8002796:	2b01      	cmp	r3, #1
{
 8002798:	4617      	mov	r7, r2
  __HAL_LOCK(hspi);
 800279a:	d00c      	beq.n	80027b6 <HAL_SPI_Transmit+0x2e>
 800279c:	2301      	movs	r3, #1
 800279e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 80027a2:	f7fd fdb1 	bl	8000308 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 80027a6:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
  tickstart = HAL_GetTick();
 80027aa:	4605      	mov	r5, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d005      	beq.n	80027bc <HAL_SPI_Transmit+0x34>
    __HAL_UNLOCK(hspi);
 80027b0:	2300      	movs	r3, #0
 80027b2:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  __HAL_LOCK(hspi);
 80027b6:	2002      	movs	r0, #2
}
 80027b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 80027bc:	f1b8 0f00 	cmp.w	r8, #0
 80027c0:	d000      	beq.n	80027c4 <HAL_SPI_Transmit+0x3c>
 80027c2:	b92f      	cbnz	r7, 80027d0 <HAL_SPI_Transmit+0x48>
    __HAL_UNLOCK(hspi);
 80027c4:	2300      	movs	r3, #0
    return errorcode;
 80027c6:	2001      	movs	r0, #1
    __HAL_UNLOCK(hspi);
 80027c8:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    return errorcode;
 80027cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80027d0:	2303      	movs	r3, #3
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80027d2:	f8c4 805c 	str.w	r8, [r4, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 80027d6:	f8a4 7060 	strh.w	r7, [r4, #96]	; 0x60
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80027da:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80027de:	2300      	movs	r3, #0
 80027e0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  hspi->pRxBuffPtr  = NULL;
 80027e4:	6663      	str	r3, [r4, #100]	; 0x64
  hspi->TxXferCount = Size;
 80027e6:	f8a4 7062 	strh.w	r7, [r4, #98]	; 0x62
  hspi->RxXferSize  = 0U;
 80027ea:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  hspi->RxXferCount = 0U;
 80027ee:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  hspi->TxISR       = NULL;
 80027f2:	6763      	str	r3, [r4, #116]	; 0x74
  hspi->RxISR       = NULL;
 80027f4:	6723      	str	r3, [r4, #112]	; 0x70
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027f6:	68a3      	ldr	r3, [r4, #8]
 80027f8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80027fc:	6823      	ldr	r3, [r4, #0]
 80027fe:	d103      	bne.n	8002808 <HAL_SPI_Transmit+0x80>
    SPI_1LINE_TX(hspi);
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002806:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8002808:	6859      	ldr	r1, [r3, #4]
 800280a:	0c09      	lsrs	r1, r1, #16
 800280c:	0409      	lsls	r1, r1, #16
 800280e:	4339      	orrs	r1, r7
 8002810:	6059      	str	r1, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	07d1      	lsls	r1, r2, #31
 8002816:	d43b      	bmi.n	8002890 <HAL_SPI_Transmit+0x108>
      __HAL_SPI_ENABLE(hspi);
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	f042 0201 	orr.w	r2, r2, #1
 800281e:	601a      	str	r2, [r3, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002820:	6863      	ldr	r3, [r4, #4]
 8002822:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002826:	d104      	bne.n	8002832 <HAL_SPI_Transmit+0xaa>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8002828:	6822      	ldr	r2, [r4, #0]
 800282a:	6813      	ldr	r3, [r2, #0]
 800282c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002830:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8002832:	68e3      	ldr	r3, [r4, #12]
 8002834:	2b0f      	cmp	r3, #15
 8002836:	d84a      	bhi.n	80028ce <HAL_SPI_Transmit+0x146>
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002838:	2b07      	cmp	r3, #7
 800283a:	4a70      	ldr	r2, [pc, #448]	; (80029fc <HAL_SPI_Transmit+0x274>)
 800283c:	6823      	ldr	r3, [r4, #0]
 800283e:	f240 808f 	bls.w	8002960 <HAL_SPI_Transmit+0x1d8>
    if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 8002842:	4293      	cmp	r3, r2
 8002844:	d007      	beq.n	8002856 <HAL_SPI_Transmit+0xce>
 8002846:	f5a2 4278 	sub.w	r2, r2, #63488	; 0xf800
 800284a:	4293      	cmp	r3, r2
 800284c:	d003      	beq.n	8002856 <HAL_SPI_Transmit+0xce>
 800284e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002852:	4293      	cmp	r3, r2
 8002854:	d140      	bne.n	80028d8 <HAL_SPI_Transmit+0x150>
      while (hspi->TxXferCount > 0U)
 8002856:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800285a:	b29b      	uxth	r3, r3
 800285c:	2b00      	cmp	r3, #0
 800285e:	d03b      	beq.n	80028d8 <HAL_SPI_Transmit+0x150>
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002860:	6823      	ldr	r3, [r4, #0]
 8002862:	695a      	ldr	r2, [r3, #20]
 8002864:	0790      	lsls	r0, r2, #30
 8002866:	d570      	bpl.n	800294a <HAL_SPI_Transmit+0x1c2>
          if ( (hspi->TxXferCount > 1U) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8002868:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 800286c:	b292      	uxth	r2, r2
 800286e:	2a01      	cmp	r2, #1
 8002870:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002872:	d962      	bls.n	800293a <HAL_SPI_Transmit+0x1b2>
 8002874:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002876:	2900      	cmp	r1, #0
 8002878:	d05f      	beq.n	800293a <HAL_SPI_Transmit+0x1b2>
            *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800287a:	f852 1b04 	ldr.w	r1, [r2], #4
 800287e:	6219      	str	r1, [r3, #32]
            hspi->TxXferCount-=2;
 8002880:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
            hspi->pTxBuffPtr += sizeof(uint32_t);
 8002884:	65e2      	str	r2, [r4, #92]	; 0x5c
            hspi->TxXferCount-=2;
 8002886:	3b02      	subs	r3, #2
            hspi->TxXferCount--;
 8002888:	b29b      	uxth	r3, r3
 800288a:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
 800288e:	e7e2      	b.n	8002856 <HAL_SPI_Transmit+0xce>
    if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_UDR))
 8002890:	695a      	ldr	r2, [r3, #20]
 8002892:	0692      	lsls	r2, r2, #26
 8002894:	d5c4      	bpl.n	8002820 <HAL_SPI_Transmit+0x98>
      *((__IO uint8_t *)&hspi->Instance->TXDR) = 0x01U;
 8002896:	2201      	movs	r2, #1
 8002898:	f883 2020 	strb.w	r2, [r3, #32]
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800289c:	6823      	ldr	r3, [r4, #0]
 800289e:	699a      	ldr	r2, [r3, #24]
 80028a0:	f042 0220 	orr.w	r2, r2, #32
 80028a4:	619a      	str	r2, [r3, #24]
      __HAL_SPI_DISABLE(hspi);
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	f022 0201 	bic.w	r2, r2, #1
 80028ac:	601a      	str	r2, [r3, #0]
 80028ae:	e7b3      	b.n	8002818 <HAL_SPI_Transmit+0x90>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80028b0:	6822      	ldr	r2, [r4, #0]
 80028b2:	6953      	ldr	r3, [r2, #20]
 80028b4:	079b      	lsls	r3, r3, #30
 80028b6:	d526      	bpl.n	8002906 <HAL_SPI_Transmit+0x17e>
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80028b8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80028ba:	f853 1b04 	ldr.w	r1, [r3], #4
 80028be:	6211      	str	r1, [r2, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80028c0:	65e3      	str	r3, [r4, #92]	; 0x5c
        hspi->TxXferCount--;
 80028c2:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80028c6:	3b01      	subs	r3, #1
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    while (hspi->TxXferCount > 0U)
 80028ce:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d1eb      	bne.n	80028b0 <HAL_SPI_Transmit+0x128>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80028d8:	4629      	mov	r1, r5
 80028da:	4620      	mov	r0, r4
 80028dc:	f7ff fe06 	bl	80024ec <SPI_EndRxTxTransaction.isra.3>
 80028e0:	2800      	cmp	r0, #0
 80028e2:	f040 8086 	bne.w	80029f2 <HAL_SPI_Transmit+0x26a>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80028e6:	68a3      	ldr	r3, [r4, #8]
 80028e8:	b923      	cbnz	r3, 80028f4 <HAL_SPI_Transmit+0x16c>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80028ea:	6822      	ldr	r2, [r4, #0]
 80028ec:	6993      	ldr	r3, [r2, #24]
 80028ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028f2:	6193      	str	r3, [r2, #24]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80028f4:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
  hspi->State = HAL_SPI_STATE_READY;
 80028f8:	2301      	movs	r3, #1
  HAL_StatusTypeDef errorcode = HAL_OK;
 80028fa:	3000      	adds	r0, #0
  hspi->State = HAL_SPI_STATE_READY;
 80028fc:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002900:	bf18      	it	ne
 8002902:	2001      	movne	r0, #1
 8002904:	e00c      	b.n	8002920 <HAL_SPI_Transmit+0x198>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8002906:	b986      	cbnz	r6, 800292a <HAL_SPI_Transmit+0x1a2>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8002908:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
            HAL_SPI_ErrorCallback(hspi);
 800290c:	4620      	mov	r0, r4
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800290e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002912:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
            HAL_SPI_ErrorCallback(hspi);
 8002916:	f7ff ff35 	bl	8002784 <HAL_SPI_ErrorCallback>
            hspi->State = HAL_SPI_STATE_READY;
 800291a:	2001      	movs	r0, #1
 800291c:	f884 0081 	strb.w	r0, [r4, #129]	; 0x81
  __HAL_UNLOCK(hspi);
 8002920:	2300      	movs	r3, #0
 8002922:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  return errorcode;
 8002926:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 800292a:	1c77      	adds	r7, r6, #1
 800292c:	d0cf      	beq.n	80028ce <HAL_SPI_Transmit+0x146>
 800292e:	f7fd fceb 	bl	8000308 <HAL_GetTick>
 8002932:	1b40      	subs	r0, r0, r5
 8002934:	4286      	cmp	r6, r0
 8002936:	d8ca      	bhi.n	80028ce <HAL_SPI_Transmit+0x146>
 8002938:	e7e6      	b.n	8002908 <HAL_SPI_Transmit+0x180>
            *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
 800293a:	f832 1b02 	ldrh.w	r1, [r2], #2
 800293e:	8419      	strh	r1, [r3, #32]
            hspi->TxXferCount--;
 8002940:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
            hspi->pTxBuffPtr += sizeof(uint16_t);
 8002944:	65e2      	str	r2, [r4, #92]	; 0x5c
            hspi->TxXferCount--;
 8002946:	3b01      	subs	r3, #1
 8002948:	e79e      	b.n	8002888 <HAL_SPI_Transmit+0x100>
          if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 800294a:	2e00      	cmp	r6, #0
 800294c:	d0dc      	beq.n	8002908 <HAL_SPI_Transmit+0x180>
 800294e:	1c71      	adds	r1, r6, #1
 8002950:	d081      	beq.n	8002856 <HAL_SPI_Transmit+0xce>
 8002952:	f7fd fcd9 	bl	8000308 <HAL_GetTick>
 8002956:	1b40      	subs	r0, r0, r5
 8002958:	4286      	cmp	r6, r0
 800295a:	f63f af7c 	bhi.w	8002856 <HAL_SPI_Transmit+0xce>
 800295e:	e7d3      	b.n	8002908 <HAL_SPI_Transmit+0x180>
    if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 8002960:	4293      	cmp	r3, r2
 8002962:	d006      	beq.n	8002972 <HAL_SPI_Transmit+0x1ea>
 8002964:	4a26      	ldr	r2, [pc, #152]	; (8002a00 <HAL_SPI_Transmit+0x278>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d003      	beq.n	8002972 <HAL_SPI_Transmit+0x1ea>
 800296a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800296e:	4293      	cmp	r3, r2
 8002970:	d1b2      	bne.n	80028d8 <HAL_SPI_Transmit+0x150>
      while (hspi->TxXferCount > 0U)
 8002972:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8002976:	b29b      	uxth	r3, r3
 8002978:	2b00      	cmp	r3, #0
 800297a:	d0ad      	beq.n	80028d8 <HAL_SPI_Transmit+0x150>
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800297c:	6823      	ldr	r3, [r4, #0]
 800297e:	695a      	ldr	r2, [r3, #20]
 8002980:	0792      	lsls	r2, r2, #30
 8002982:	d52c      	bpl.n	80029de <HAL_SPI_Transmit+0x256>
          if ((hspi->TxXferCount > 3U) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8002984:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 8002988:	b292      	uxth	r2, r2
 800298a:	2a03      	cmp	r2, #3
 800298c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800298e:	d90d      	bls.n	80029ac <HAL_SPI_Transmit+0x224>
 8002990:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002992:	2940      	cmp	r1, #64	; 0x40
 8002994:	d90a      	bls.n	80029ac <HAL_SPI_Transmit+0x224>
            *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8002996:	f852 1b04 	ldr.w	r1, [r2], #4
 800299a:	6219      	str	r1, [r3, #32]
            hspi->TxXferCount-=4;
 800299c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
            hspi->pTxBuffPtr += sizeof(uint32_t);
 80029a0:	65e2      	str	r2, [r4, #92]	; 0x5c
            hspi->TxXferCount-=4;
 80029a2:	3b04      	subs	r3, #4
            hspi->TxXferCount--;
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
 80029aa:	e7e2      	b.n	8002972 <HAL_SPI_Transmit+0x1ea>
          else if ((hspi->TxXferCount > 1U) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80029ac:	f8b4 1062 	ldrh.w	r1, [r4, #98]	; 0x62
 80029b0:	b289      	uxth	r1, r1
 80029b2:	2901      	cmp	r1, #1
 80029b4:	d909      	bls.n	80029ca <HAL_SPI_Transmit+0x242>
 80029b6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80029b8:	b139      	cbz	r1, 80029ca <HAL_SPI_Transmit+0x242>
            *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
 80029ba:	f832 1b02 	ldrh.w	r1, [r2], #2
 80029be:	8419      	strh	r1, [r3, #32]
            hspi->TxXferCount-=2;
 80029c0:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
            hspi->pTxBuffPtr += sizeof(uint16_t);
 80029c4:	65e2      	str	r2, [r4, #92]	; 0x5c
            hspi->TxXferCount-=2;
 80029c6:	3b02      	subs	r3, #2
 80029c8:	e7ec      	b.n	80029a4 <HAL_SPI_Transmit+0x21c>
            *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 80029ca:	7812      	ldrb	r2, [r2, #0]
 80029cc:	f883 2020 	strb.w	r2, [r3, #32]
            hspi->pTxBuffPtr += sizeof(uint8_t);
 80029d0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80029d2:	3301      	adds	r3, #1
 80029d4:	65e3      	str	r3, [r4, #92]	; 0x5c
            hspi->TxXferCount--;
 80029d6:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80029da:	3b01      	subs	r3, #1
 80029dc:	e7e2      	b.n	80029a4 <HAL_SPI_Transmit+0x21c>
          if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 80029de:	2e00      	cmp	r6, #0
 80029e0:	d092      	beq.n	8002908 <HAL_SPI_Transmit+0x180>
 80029e2:	1c73      	adds	r3, r6, #1
 80029e4:	d0c5      	beq.n	8002972 <HAL_SPI_Transmit+0x1ea>
 80029e6:	f7fd fc8f 	bl	8000308 <HAL_GetTick>
 80029ea:	1b40      	subs	r0, r0, r5
 80029ec:	4286      	cmp	r6, r0
 80029ee:	d8c0      	bhi.n	8002972 <HAL_SPI_Transmit+0x1ea>
 80029f0:	e78a      	b.n	8002908 <HAL_SPI_Transmit+0x180>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80029f2:	2320      	movs	r3, #32
 80029f4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 80029f8:	e775      	b.n	80028e6 <HAL_SPI_Transmit+0x15e>
 80029fa:	bf00      	nop
 80029fc:	40013000 	.word	0x40013000
 8002a00:	40003800 	.word	0x40003800

08002a04 <HAL_SPIEx_FlushRxFifo>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_FlushRxFifo(SPI_HandleTypeDef *hspi)
{
 8002a04:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t tmpreg;
  uint8_t  count = 0;
  while ( ((hspi->Instance->SR & SPI_FLAG_FRLVL) !=  SPI_FRLVL_EMPTY) || ((hspi->Instance->SR & SPI_FLAG_RXWNE) ==  SPI_FLAG_RXWNE))
 8002a06:	6803      	ldr	r3, [r0, #0]
  uint8_t  count = 0;
 8002a08:	2200      	movs	r2, #0
  {
    count+=4;
    tmpreg = hspi->Instance->RXDR;
    UNUSED(tmpreg); /* To avoid GCC warning */
    
    if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 8002a0a:	490f      	ldr	r1, [pc, #60]	; (8002a48 <HAL_SPIEx_FlushRxFifo+0x44>)
 8002a0c:	4c0f      	ldr	r4, [pc, #60]	; (8002a4c <HAL_SPIEx_FlushRxFifo+0x48>)
 8002a0e:	4d10      	ldr	r5, [pc, #64]	; (8002a50 <HAL_SPIEx_FlushRxFifo+0x4c>)
  while ( ((hspi->Instance->SR & SPI_FLAG_FRLVL) !=  SPI_FRLVL_EMPTY) || ((hspi->Instance->SR & SPI_FLAG_RXWNE) ==  SPI_FLAG_RXWNE))
 8002a10:	6958      	ldr	r0, [r3, #20]
 8002a12:	f410 4fc0 	tst.w	r0, #24576	; 0x6000
 8002a16:	d105      	bne.n	8002a24 <HAL_SPIEx_FlushRxFifo+0x20>
 8002a18:	6958      	ldr	r0, [r3, #20]
 8002a1a:	f410 4000 	ands.w	r0, r0, #32768	; 0x8000
 8002a1e:	d101      	bne.n	8002a24 <HAL_SPIEx_FlushRxFifo+0x20>
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
}
 8002a20:	b003      	add	sp, #12
 8002a22:	bd30      	pop	{r4, r5, pc}
    tmpreg = hspi->Instance->RXDR;
 8002a24:	6b18      	ldr	r0, [r3, #48]	; 0x30
    count+=4;
 8002a26:	3204      	adds	r2, #4
    if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 8002a28:	428b      	cmp	r3, r1
    tmpreg = hspi->Instance->RXDR;
 8002a2a:	9001      	str	r0, [sp, #4]
    count+=4;
 8002a2c:	b2d2      	uxtb	r2, r2
    UNUSED(tmpreg); /* To avoid GCC warning */
 8002a2e:	9801      	ldr	r0, [sp, #4]
    if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 8002a30:	d003      	beq.n	8002a3a <HAL_SPIEx_FlushRxFifo+0x36>
 8002a32:	42a3      	cmp	r3, r4
 8002a34:	d001      	beq.n	8002a3a <HAL_SPIEx_FlushRxFifo+0x36>
 8002a36:	42ab      	cmp	r3, r5
 8002a38:	d103      	bne.n	8002a42 <HAL_SPIEx_FlushRxFifo+0x3e>
      if(count > SPI_HIGHEND_FIFO_SIZE)
 8002a3a:	2a10      	cmp	r2, #16
      if(count > SPI_LOWEND_FIFO_SIZE)
 8002a3c:	d9e8      	bls.n	8002a10 <HAL_SPIEx_FlushRxFifo+0xc>
        return HAL_TIMEOUT;
 8002a3e:	2003      	movs	r0, #3
 8002a40:	e7ee      	b.n	8002a20 <HAL_SPIEx_FlushRxFifo+0x1c>
      if(count > SPI_LOWEND_FIFO_SIZE)
 8002a42:	2a08      	cmp	r2, #8
 8002a44:	e7fa      	b.n	8002a3c <HAL_SPIEx_FlushRxFifo+0x38>
 8002a46:	bf00      	nop
 8002a48:	40013000 	.word	0x40013000
 8002a4c:	40003800 	.word	0x40003800
 8002a50:	40003c00 	.word	0x40003c00

08002a54 <HAL_SPIEx_DisableLockConfiguration>:
HAL_StatusTypeDef HAL_SPIEx_DisableLockConfiguration(SPI_HandleTypeDef *hspi)
{
  HAL_StatusTypeDef errorcode = HAL_OK;

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a54:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d00b      	beq.n	8002a74 <HAL_SPIEx_DisableLockConfiguration+0x20>
 8002a5c:	2301      	movs	r3, #1

  if (hspi->State != HAL_SPI_STATE_READY)
 8002a5e:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 8002a62:	429a      	cmp	r2, r3
  __HAL_LOCK(hspi);
 8002a64:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  if (hspi->State != HAL_SPI_STATE_READY)
 8002a68:	d006      	beq.n	8002a78 <HAL_SPIEx_DisableLockConfiguration+0x24>
  {
    errorcode = HAL_BUSY;
    hspi->State = HAL_SPI_STATE_READY;
 8002a6a:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8002a6e:	2300      	movs	r3, #0
 8002a70:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  __HAL_LOCK(hspi);
 8002a74:	2002      	movs	r0, #2

  hspi->State = HAL_SPI_STATE_READY;
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
  return errorcode;
}
 8002a76:	4770      	bx	lr
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a78:	6803      	ldr	r3, [r0, #0]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	f012 0f01 	tst.w	r2, #1
    CLEAR_BIT(hspi->Instance->CR1 , SPI_CR1_IOLOCK);
 8002a80:	681a      	ldr	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a82:	d10e      	bne.n	8002aa2 <HAL_SPIEx_DisableLockConfiguration+0x4e>
    CLEAR_BIT(hspi->Instance->CR1 , SPI_CR1_IOLOCK);
 8002a84:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    __HAL_SPI_ENABLE(hspi);
 8002a88:	601a      	str	r2, [r3, #0]
  hspi->Instance->CR1 &= ~(SPI_CR1_IOLOCK);
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002a90:	601a      	str	r2, [r3, #0]
  hspi->State = HAL_SPI_STATE_READY;
 8002a92:	2301      	movs	r3, #1
 8002a94:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  __HAL_UNLOCK(hspi);
 8002a98:	2300      	movs	r3, #0
 8002a9a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  return errorcode;
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	4770      	bx	lr
    __HAL_SPI_DISABLE(hspi);
 8002aa2:	f022 0201 	bic.w	r2, r2, #1
 8002aa6:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hspi->Instance->CR1 , SPI_CR1_IOLOCK);
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002aae:	601a      	str	r2, [r3, #0]
    __HAL_SPI_ENABLE(hspi);
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	f042 0201 	orr.w	r2, r2, #1
 8002ab6:	e7e7      	b.n	8002a88 <HAL_SPIEx_DisableLockConfiguration+0x34>

08002ab8 <HAL_TIM_Base_MspInit>:
 8002ab8:	4770      	bx	lr

08002aba <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002aba:	6802      	ldr	r2, [r0, #0]
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
      
  /* Return function status */
  return HAL_OK;
}
 8002abc:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002abe:	68d3      	ldr	r3, [r2, #12]
 8002ac0:	f043 0301 	orr.w	r3, r3, #1
 8002ac4:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_ENABLE(htim);
 8002ac6:	8813      	ldrh	r3, [r2, #0]
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	f043 0301 	orr.w	r3, r3, #1
 8002ace:	8013      	strh	r3, [r2, #0]
}
 8002ad0:	4770      	bx	lr

08002ad2 <HAL_TIM_OC_DelayElapsedCallback>:
 8002ad2:	4770      	bx	lr

08002ad4 <HAL_TIM_IC_CaptureCallback>:
 8002ad4:	4770      	bx	lr

08002ad6 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002ad6:	4770      	bx	lr

08002ad8 <HAL_TIM_TriggerCallback>:
 8002ad8:	4770      	bx	lr

08002ada <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ada:	6803      	ldr	r3, [r0, #0]
 8002adc:	691a      	ldr	r2, [r3, #16]
 8002ade:	0791      	lsls	r1, r2, #30
{
 8002ae0:	b510      	push	{r4, lr}
 8002ae2:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ae4:	d50f      	bpl.n	8002b06 <HAL_TIM_IRQHandler+0x2c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002ae6:	68da      	ldr	r2, [r3, #12]
 8002ae8:	0792      	lsls	r2, r2, #30
 8002aea:	d50c      	bpl.n	8002b06 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002aec:	f06f 0202 	mvn.w	r2, #2
 8002af0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002af2:	2201      	movs	r2, #1
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8002af4:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002af6:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8002af8:	0799      	lsls	r1, r3, #30
 8002afa:	f000 8085 	beq.w	8002c08 <HAL_TIM_IRQHandler+0x12e>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8002afe:	f7ff ffe9 	bl	8002ad4 <HAL_TIM_IC_CaptureCallback>
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b02:	2300      	movs	r3, #0
 8002b04:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b06:	6823      	ldr	r3, [r4, #0]
 8002b08:	691a      	ldr	r2, [r3, #16]
 8002b0a:	0752      	lsls	r2, r2, #29
 8002b0c:	d510      	bpl.n	8002b30 <HAL_TIM_IRQHandler+0x56>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8002b0e:	68da      	ldr	r2, [r3, #12]
 8002b10:	0750      	lsls	r0, r2, #29
 8002b12:	d50d      	bpl.n	8002b30 <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b14:	f06f 0204 	mvn.w	r2, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8002b18:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b1a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b1c:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8002b1e:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b20:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8002b22:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002b26:	d075      	beq.n	8002c14 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8002b28:	f7ff ffd4 	bl	8002ad4 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	7723      	strb	r3, [r4, #28]
    } 
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b30:	6823      	ldr	r3, [r4, #0]
 8002b32:	691a      	ldr	r2, [r3, #16]
 8002b34:	0711      	lsls	r1, r2, #28
 8002b36:	d50f      	bpl.n	8002b58 <HAL_TIM_IRQHandler+0x7e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8002b38:	68da      	ldr	r2, [r3, #12]
 8002b3a:	0712      	lsls	r2, r2, #28
 8002b3c:	d50c      	bpl.n	8002b58 <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b3e:	f06f 0208 	mvn.w	r2, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8002b42:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b46:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8002b48:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b4a:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8002b4c:	079b      	lsls	r3, r3, #30
 8002b4e:	d067      	beq.n	8002c20 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8002b50:	f7ff ffc0 	bl	8002ad4 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b54:	2300      	movs	r3, #0
 8002b56:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b58:	6823      	ldr	r3, [r4, #0]
 8002b5a:	691a      	ldr	r2, [r3, #16]
 8002b5c:	06d0      	lsls	r0, r2, #27
 8002b5e:	d510      	bpl.n	8002b82 <HAL_TIM_IRQHandler+0xa8>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002b60:	68da      	ldr	r2, [r3, #12]
 8002b62:	06d1      	lsls	r1, r2, #27
 8002b64:	d50d      	bpl.n	8002b82 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b66:	f06f 0210 	mvn.w	r2, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8002b6a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b6e:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8002b70:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b72:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8002b74:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002b78:	d058      	beq.n	8002c2c <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8002b7a:	f7ff ffab 	bl	8002ad4 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	7723      	strb	r3, [r4, #28]
    } 
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b82:	6823      	ldr	r3, [r4, #0]
 8002b84:	691a      	ldr	r2, [r3, #16]
 8002b86:	07d2      	lsls	r2, r2, #31
 8002b88:	d508      	bpl.n	8002b9c <HAL_TIM_IRQHandler+0xc2>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8002b8a:	68da      	ldr	r2, [r3, #12]
 8002b8c:	07d0      	lsls	r0, r2, #31
 8002b8e:	d505      	bpl.n	8002b9c <HAL_TIM_IRQHandler+0xc2>
    { 
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b90:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b94:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b96:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b98:	f001 fd78 	bl	800468c <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b9c:	6823      	ldr	r3, [r4, #0]
 8002b9e:	691a      	ldr	r2, [r3, #16]
 8002ba0:	0611      	lsls	r1, r2, #24
 8002ba2:	d508      	bpl.n	8002bb6 <HAL_TIM_IRQHandler+0xdc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002ba4:	68da      	ldr	r2, [r3, #12]
 8002ba6:	0612      	lsls	r2, r2, #24
 8002ba8:	d505      	bpl.n	8002bb6 <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002baa:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8002bae:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002bb0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002bb2:	f000 f8c6 	bl	8002d42 <HAL_TIMEx_BreakCallback>
    }
  } 
  /* TIM Break input2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002bb6:	6823      	ldr	r3, [r4, #0]
 8002bb8:	691a      	ldr	r2, [r3, #16]
 8002bba:	05d0      	lsls	r0, r2, #23
 8002bbc:	d508      	bpl.n	8002bd0 <HAL_TIM_IRQHandler+0xf6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002bbe:	68da      	ldr	r2, [r3, #12]
 8002bc0:	0611      	lsls	r1, r2, #24
 8002bc2:	d505      	bpl.n	8002bd0 <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002bc4:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8002bc8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002bca:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002bcc:	f000 f8b9 	bl	8002d42 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002bd0:	6823      	ldr	r3, [r4, #0]
 8002bd2:	691a      	ldr	r2, [r3, #16]
 8002bd4:	0652      	lsls	r2, r2, #25
 8002bd6:	d508      	bpl.n	8002bea <HAL_TIM_IRQHandler+0x110>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002bd8:	68da      	ldr	r2, [r3, #12]
 8002bda:	0650      	lsls	r0, r2, #25
 8002bdc:	d505      	bpl.n	8002bea <HAL_TIM_IRQHandler+0x110>
    { 
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002bde:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8002be2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002be4:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002be6:	f7ff ff77 	bl	8002ad8 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002bea:	6823      	ldr	r3, [r4, #0]
 8002bec:	691a      	ldr	r2, [r3, #16]
 8002bee:	0691      	lsls	r1, r2, #26
 8002bf0:	d522      	bpl.n	8002c38 <HAL_TIM_IRQHandler+0x15e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8002bf2:	68da      	ldr	r2, [r3, #12]
 8002bf4:	0692      	lsls	r2, r2, #26
 8002bf6:	d51f      	bpl.n	8002c38 <HAL_TIM_IRQHandler+0x15e>
    { 
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002bf8:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8002bfc:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002bfe:	611a      	str	r2, [r3, #16]
    }
  }
}
 8002c00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8002c04:	f000 b89c 	b.w	8002d40 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c08:	f7ff ff63 	bl	8002ad2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c0c:	4620      	mov	r0, r4
 8002c0e:	f7ff ff62 	bl	8002ad6 <HAL_TIM_PWM_PulseFinishedCallback>
 8002c12:	e776      	b.n	8002b02 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c14:	f7ff ff5d 	bl	8002ad2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c18:	4620      	mov	r0, r4
 8002c1a:	f7ff ff5c 	bl	8002ad6 <HAL_TIM_PWM_PulseFinishedCallback>
 8002c1e:	e785      	b.n	8002b2c <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c20:	f7ff ff57 	bl	8002ad2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8002c24:	4620      	mov	r0, r4
 8002c26:	f7ff ff56 	bl	8002ad6 <HAL_TIM_PWM_PulseFinishedCallback>
 8002c2a:	e793      	b.n	8002b54 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c2c:	f7ff ff51 	bl	8002ad2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c30:	4620      	mov	r0, r4
 8002c32:	f7ff ff50 	bl	8002ad6 <HAL_TIM_PWM_PulseFinishedCallback>
 8002c36:	e7a2      	b.n	8002b7e <HAL_TIM_IRQHandler+0xa4>
 8002c38:	bd10      	pop	{r4, pc}
	...

08002c3c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c3c:	4a31      	ldr	r2, [pc, #196]	; (8002d04 <TIM_Base_SetConfig+0xc8>)
  tmpcr1 = TIMx->CR1;
 8002c3e:	8803      	ldrh	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c40:	4290      	cmp	r0, r2
  tmpcr1 = TIMx->CR1;
 8002c42:	b29b      	uxth	r3, r3
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c44:	d012      	beq.n	8002c6c <TIM_Base_SetConfig+0x30>
 8002c46:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002c4a:	d00f      	beq.n	8002c6c <TIM_Base_SetConfig+0x30>
 8002c4c:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002c50:	4290      	cmp	r0, r2
 8002c52:	d00b      	beq.n	8002c6c <TIM_Base_SetConfig+0x30>
 8002c54:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002c58:	4290      	cmp	r0, r2
 8002c5a:	d007      	beq.n	8002c6c <TIM_Base_SetConfig+0x30>
 8002c5c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002c60:	4290      	cmp	r0, r2
 8002c62:	d003      	beq.n	8002c6c <TIM_Base_SetConfig+0x30>
 8002c64:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002c68:	4290      	cmp	r0, r2
 8002c6a:	d119      	bne.n	8002ca0 <TIM_Base_SetConfig+0x64>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8002c6c:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002c72:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c74:	4a23      	ldr	r2, [pc, #140]	; (8002d04 <TIM_Base_SetConfig+0xc8>)
 8002c76:	4290      	cmp	r0, r2
 8002c78:	d01d      	beq.n	8002cb6 <TIM_Base_SetConfig+0x7a>
 8002c7a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002c7e:	d01a      	beq.n	8002cb6 <TIM_Base_SetConfig+0x7a>
 8002c80:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002c84:	4290      	cmp	r0, r2
 8002c86:	d016      	beq.n	8002cb6 <TIM_Base_SetConfig+0x7a>
 8002c88:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002c8c:	4290      	cmp	r0, r2
 8002c8e:	d012      	beq.n	8002cb6 <TIM_Base_SetConfig+0x7a>
 8002c90:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002c94:	4290      	cmp	r0, r2
 8002c96:	d00e      	beq.n	8002cb6 <TIM_Base_SetConfig+0x7a>
 8002c98:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002c9c:	4290      	cmp	r0, r2
 8002c9e:	d00a      	beq.n	8002cb6 <TIM_Base_SetConfig+0x7a>
 8002ca0:	4a19      	ldr	r2, [pc, #100]	; (8002d08 <TIM_Base_SetConfig+0xcc>)
 8002ca2:	4290      	cmp	r0, r2
 8002ca4:	d007      	beq.n	8002cb6 <TIM_Base_SetConfig+0x7a>
 8002ca6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002caa:	4290      	cmp	r0, r2
 8002cac:	d003      	beq.n	8002cb6 <TIM_Base_SetConfig+0x7a>
 8002cae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002cb2:	4290      	cmp	r0, r2
 8002cb4:	d103      	bne.n	8002cbe <TIM_Base_SetConfig+0x82>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cba:	68ca      	ldr	r2, [r1, #12]
 8002cbc:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cbe:	694a      	ldr	r2, [r1, #20]
 8002cc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002cc4:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	8003      	strh	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cca:	688b      	ldr	r3, [r1, #8]
 8002ccc:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002cce:	880b      	ldrh	r3, [r1, #0]
 8002cd0:	8503      	strh	r3, [r0, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8002cd2:	4b0c      	ldr	r3, [pc, #48]	; (8002d04 <TIM_Base_SetConfig+0xc8>)
 8002cd4:	4298      	cmp	r0, r3
 8002cd6:	d00f      	beq.n	8002cf8 <TIM_Base_SetConfig+0xbc>
 8002cd8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002cdc:	4298      	cmp	r0, r3
 8002cde:	d00b      	beq.n	8002cf8 <TIM_Base_SetConfig+0xbc>
 8002ce0:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8002ce4:	4298      	cmp	r0, r3
 8002ce6:	d007      	beq.n	8002cf8 <TIM_Base_SetConfig+0xbc>
 8002ce8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002cec:	4298      	cmp	r0, r3
 8002cee:	d003      	beq.n	8002cf8 <TIM_Base_SetConfig+0xbc>
 8002cf0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002cf4:	4298      	cmp	r0, r3
 8002cf6:	d101      	bne.n	8002cfc <TIM_Base_SetConfig+0xc0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002cf8:	8a0b      	ldrh	r3, [r1, #16]
 8002cfa:	8603      	strh	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	6143      	str	r3, [r0, #20]
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	40010000 	.word	0x40010000
 8002d08:	40014000 	.word	0x40014000

08002d0c <HAL_TIM_Base_Init>:
{ 
 8002d0c:	b510      	push	{r4, lr}
  if(htim == NULL)
 8002d0e:	4604      	mov	r4, r0
 8002d10:	b1a0      	cbz	r0, 8002d3c <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002d12:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002d16:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002d1a:	b91b      	cbnz	r3, 8002d24 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002d1c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002d20:	f7ff feca 	bl	8002ab8 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8002d24:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002d26:	6820      	ldr	r0, [r4, #0]
 8002d28:	1d21      	adds	r1, r4, #4
  htim->State= HAL_TIM_STATE_BUSY;
 8002d2a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002d2e:	f7ff ff85 	bl	8002c3c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002d32:	2301      	movs	r3, #1
  return HAL_OK;
 8002d34:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8002d36:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002d3a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002d3c:	2001      	movs	r0, #1
}
 8002d3e:	bd10      	pop	{r4, pc}

08002d40 <HAL_TIMEx_CommutationCallback>:
 8002d40:	4770      	bx	lr

08002d42 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d42:	4770      	bx	lr

08002d44 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002d44:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8002d46:	f000 fe63 	bl	8003a10 <vTaskStartScheduler>
  
  return osOK;
}
 8002d4a:	2000      	movs	r0, #0
 8002d4c:	bd08      	pop	{r3, pc}

08002d4e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002d4e:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002d50:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
{
 8002d54:	b085      	sub	sp, #20
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002d56:	8a02      	ldrh	r2, [r0, #16]
{
 8002d58:	460b      	mov	r3, r1
  if (priority != osPriorityError) {
 8002d5a:	2c84      	cmp	r4, #132	; 0x84
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002d5c:	e890 0022 	ldmia.w	r0, {r1, r5}
    fpriority += (priority - osPriorityIdle);
 8002d60:	bf14      	ite	ne
 8002d62:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002d64:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002d66:	a803      	add	r0, sp, #12
 8002d68:	9400      	str	r4, [sp, #0]
 8002d6a:	9001      	str	r0, [sp, #4]
 8002d6c:	4628      	mov	r0, r5
 8002d6e:	f000 fd7f 	bl	8003870 <xTaskCreate>
 8002d72:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002d74:	bf0c      	ite	eq
 8002d76:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 8002d78:	2000      	movne	r0, #0
}
 8002d7a:	b005      	add	sp, #20
 8002d7c:	bd30      	pop	{r4, r5, pc}

08002d7e <osDelay>:
osStatus osDelay (uint32_t millisec)
{
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002d7e:	2800      	cmp	r0, #0
 8002d80:	bf08      	it	eq
 8002d82:	2001      	moveq	r0, #1
{
 8002d84:	b508      	push	{r3, lr}
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002d86:	f000 fff1 	bl	8003d6c <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002d8a:	2000      	movs	r0, #0
 8002d8c:	bd08      	pop	{r3, pc}

08002d8e <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8002d8e:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002d90:	f001 f93c 	bl	800400c <xTaskGetSchedulerState>
 8002d94:	2801      	cmp	r0, #1
 8002d96:	d003      	beq.n	8002da0 <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8002d98:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 8002d9c:	f000 b912 	b.w	8002fc4 <xPortSysTickHandler>
 8002da0:	bd08      	pop	{r3, pc}

08002da2 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002da2:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002da6:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002daa:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002dac:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002dae:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002db0:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002db2:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002db4:	6003      	str	r3, [r0, #0]
 8002db6:	4770      	bx	lr

08002db8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002db8:	2300      	movs	r3, #0
 8002dba:	6103      	str	r3, [r0, #16]
 8002dbc:	4770      	bx	lr

08002dbe <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8002dbe:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002dc0:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8002dc2:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002dc4:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002dc6:	689a      	ldr	r2, [r3, #8]
 8002dc8:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002dca:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8002dcc:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002dce:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	6003      	str	r3, [r0, #0]
 8002dd4:	4770      	bx	lr

08002dd6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002dd6:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002dd8:	1c53      	adds	r3, r2, #1
{
 8002dda:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 8002ddc:	d10a      	bne.n	8002df4 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002dde:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002de0:	685a      	ldr	r2, [r3, #4]
 8002de2:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002de4:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002de6:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8002de8:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8002dea:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002dec:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8002dee:	3301      	adds	r3, #1
 8002df0:	6003      	str	r3, [r0, #0]
 8002df2:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002df4:	f100 0308 	add.w	r3, r0, #8
 8002df8:	685c      	ldr	r4, [r3, #4]
 8002dfa:	6825      	ldr	r5, [r4, #0]
 8002dfc:	42aa      	cmp	r2, r5
 8002dfe:	d3ef      	bcc.n	8002de0 <vListInsert+0xa>
 8002e00:	4623      	mov	r3, r4
 8002e02:	e7f9      	b.n	8002df8 <vListInsert+0x22>

08002e04 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002e04:	6841      	ldr	r1, [r0, #4]
 8002e06:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002e08:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002e0a:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002e0c:	6882      	ldr	r2, [r0, #8]
 8002e0e:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002e10:	6859      	ldr	r1, [r3, #4]
 8002e12:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002e14:	bf08      	it	eq
 8002e16:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002e18:	2200      	movs	r2, #0
 8002e1a:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8002e1c:	6818      	ldr	r0, [r3, #0]
 8002e1e:	3801      	subs	r0, #1
 8002e20:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8002e22:	4770      	bx	lr

08002e24 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002e24:	4b0c      	ldr	r3, [pc, #48]	; (8002e58 <prvTaskExitError+0x34>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	3301      	adds	r3, #1
 8002e2a:	d00a      	beq.n	8002e42 <prvTaskExitError+0x1e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e30:	b672      	cpsid	i
 8002e32:	f383 8811 	msr	BASEPRI, r3
 8002e36:	f3bf 8f6f 	isb	sy
 8002e3a:	f3bf 8f4f 	dsb	sy
 8002e3e:	b662      	cpsie	i
 8002e40:	e7fe      	b.n	8002e40 <prvTaskExitError+0x1c>
 8002e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e46:	b672      	cpsid	i
 8002e48:	f383 8811 	msr	BASEPRI, r3
 8002e4c:	f3bf 8f6f 	isb	sy
 8002e50:	f3bf 8f4f 	dsb	sy
 8002e54:	b662      	cpsie	i
 8002e56:	e7fe      	b.n	8002e56 <prvTaskExitError+0x32>
 8002e58:	20000000 	.word	0x20000000

08002e5c <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8002e5c:	4806      	ldr	r0, [pc, #24]	; (8002e78 <prvPortStartFirstTask+0x1c>)
 8002e5e:	6800      	ldr	r0, [r0, #0]
 8002e60:	6800      	ldr	r0, [r0, #0]
 8002e62:	f380 8808 	msr	MSP, r0
 8002e66:	b662      	cpsie	i
 8002e68:	b661      	cpsie	f
 8002e6a:	f3bf 8f4f 	dsb	sy
 8002e6e:	f3bf 8f6f 	isb	sy
 8002e72:	df00      	svc	0
 8002e74:	bf00      	nop
 8002e76:	0000      	.short	0x0000
 8002e78:	e000ed08 	.word	0xe000ed08

08002e7c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002e7c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002e8c <vPortEnableVFP+0x10>
 8002e80:	6801      	ldr	r1, [r0, #0]
 8002e82:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002e86:	6001      	str	r1, [r0, #0]
 8002e88:	4770      	bx	lr
 8002e8a:	0000      	.short	0x0000
 8002e8c:	e000ed88 	.word	0xe000ed88

08002e90 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002e90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002e94:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002e98:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8002e9c:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002e9e:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002ea0:	4b03      	ldr	r3, [pc, #12]	; (8002eb0 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002ea2:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002ea4:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8002ea6:	f06f 0302 	mvn.w	r3, #2
 8002eaa:	6203      	str	r3, [r0, #32]
}
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	08002e25 	.word	0x08002e25
	...

08002ec0 <SVC_Handler>:
	__asm volatile (
 8002ec0:	4b07      	ldr	r3, [pc, #28]	; (8002ee0 <pxCurrentTCBConst2>)
 8002ec2:	6819      	ldr	r1, [r3, #0]
 8002ec4:	6808      	ldr	r0, [r1, #0]
 8002ec6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002eca:	f380 8809 	msr	PSP, r0
 8002ece:	f3bf 8f6f 	isb	sy
 8002ed2:	f04f 0000 	mov.w	r0, #0
 8002ed6:	f380 8811 	msr	BASEPRI, r0
 8002eda:	4770      	bx	lr
 8002edc:	f3af 8000 	nop.w

08002ee0 <pxCurrentTCBConst2>:
 8002ee0:	20003d08 	.word	0x20003d08

08002ee4 <vPortEnterCritical>:
 8002ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ee8:	b672      	cpsid	i
 8002eea:	f383 8811 	msr	BASEPRI, r3
 8002eee:	f3bf 8f6f 	isb	sy
 8002ef2:	f3bf 8f4f 	dsb	sy
 8002ef6:	b662      	cpsie	i
	uxCriticalNesting++;
 8002ef8:	4a0b      	ldr	r2, [pc, #44]	; (8002f28 <vPortEnterCritical+0x44>)
 8002efa:	6813      	ldr	r3, [r2, #0]
 8002efc:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8002efe:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8002f00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8002f02:	d10f      	bne.n	8002f24 <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002f04:	4b09      	ldr	r3, [pc, #36]	; (8002f2c <vPortEnterCritical+0x48>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f013 0fff 	tst.w	r3, #255	; 0xff
 8002f0c:	d00a      	beq.n	8002f24 <vPortEnterCritical+0x40>
 8002f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f12:	b672      	cpsid	i
 8002f14:	f383 8811 	msr	BASEPRI, r3
 8002f18:	f3bf 8f6f 	isb	sy
 8002f1c:	f3bf 8f4f 	dsb	sy
 8002f20:	b662      	cpsie	i
 8002f22:	e7fe      	b.n	8002f22 <vPortEnterCritical+0x3e>
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	20000000 	.word	0x20000000
 8002f2c:	e000ed04 	.word	0xe000ed04

08002f30 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8002f30:	4a09      	ldr	r2, [pc, #36]	; (8002f58 <vPortExitCritical+0x28>)
 8002f32:	6813      	ldr	r3, [r2, #0]
 8002f34:	b953      	cbnz	r3, 8002f4c <vPortExitCritical+0x1c>
 8002f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f3a:	b672      	cpsid	i
 8002f3c:	f383 8811 	msr	BASEPRI, r3
 8002f40:	f3bf 8f6f 	isb	sy
 8002f44:	f3bf 8f4f 	dsb	sy
 8002f48:	b662      	cpsie	i
 8002f4a:	e7fe      	b.n	8002f4a <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 8002f4c:	3b01      	subs	r3, #1
 8002f4e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002f50:	b90b      	cbnz	r3, 8002f56 <vPortExitCritical+0x26>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002f52:	f383 8811 	msr	BASEPRI, r3
 8002f56:	4770      	bx	lr
 8002f58:	20000000 	.word	0x20000000
 8002f5c:	00000000 	.word	0x00000000

08002f60 <PendSV_Handler>:
	__asm volatile
 8002f60:	f3ef 8009 	mrs	r0, PSP
 8002f64:	f3bf 8f6f 	isb	sy
 8002f68:	4b15      	ldr	r3, [pc, #84]	; (8002fc0 <pxCurrentTCBConst>)
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	f01e 0f10 	tst.w	lr, #16
 8002f70:	bf08      	it	eq
 8002f72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002f76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f7a:	6010      	str	r0, [r2, #0]
 8002f7c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8002f80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002f84:	b672      	cpsid	i
 8002f86:	f380 8811 	msr	BASEPRI, r0
 8002f8a:	f3bf 8f4f 	dsb	sy
 8002f8e:	f3bf 8f6f 	isb	sy
 8002f92:	b662      	cpsie	i
 8002f94:	f000 ff4a 	bl	8003e2c <vTaskSwitchContext>
 8002f98:	f04f 0000 	mov.w	r0, #0
 8002f9c:	f380 8811 	msr	BASEPRI, r0
 8002fa0:	bc08      	pop	{r3}
 8002fa2:	6819      	ldr	r1, [r3, #0]
 8002fa4:	6808      	ldr	r0, [r1, #0]
 8002fa6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002faa:	f01e 0f10 	tst.w	lr, #16
 8002fae:	bf08      	it	eq
 8002fb0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002fb4:	f380 8809 	msr	PSP, r0
 8002fb8:	f3bf 8f6f 	isb	sy
 8002fbc:	4770      	bx	lr
 8002fbe:	bf00      	nop

08002fc0 <pxCurrentTCBConst>:
 8002fc0:	20003d08 	.word	0x20003d08

08002fc4 <xPortSysTickHandler>:
{
 8002fc4:	b508      	push	{r3, lr}
	__asm volatile
 8002fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fca:	b672      	cpsid	i
 8002fcc:	f383 8811 	msr	BASEPRI, r3
 8002fd0:	f3bf 8f6f 	isb	sy
 8002fd4:	f3bf 8f4f 	dsb	sy
 8002fd8:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 8002fda:	f000 fd67 	bl	8003aac <xTaskIncrementTick>
 8002fde:	b118      	cbz	r0, 8002fe8 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002fe0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fe4:	4b02      	ldr	r3, [pc, #8]	; (8002ff0 <xPortSysTickHandler+0x2c>)
 8002fe6:	601a      	str	r2, [r3, #0]
	__asm volatile
 8002fe8:	2300      	movs	r3, #0
 8002fea:	f383 8811 	msr	BASEPRI, r3
 8002fee:	bd08      	pop	{r3, pc}
 8002ff0:	e000ed04 	.word	0xe000ed04

08002ff4 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002ff4:	4b06      	ldr	r3, [pc, #24]	; (8003010 <vPortSetupTimerInterrupt+0x1c>)
 8002ff6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	fbb3 f3f2 	udiv	r3, r3, r2
 8003000:	4a04      	ldr	r2, [pc, #16]	; (8003014 <vPortSetupTimerInterrupt+0x20>)
 8003002:	3b01      	subs	r3, #1
 8003004:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003006:	2207      	movs	r2, #7
 8003008:	4b03      	ldr	r3, [pc, #12]	; (8003018 <vPortSetupTimerInterrupt+0x24>)
 800300a:	601a      	str	r2, [r3, #0]
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	20000004 	.word	0x20000004
 8003014:	e000e014 	.word	0xe000e014
 8003018:	e000e010 	.word	0xe000e010

0800301c <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800301c:	4b23      	ldr	r3, [pc, #140]	; (80030ac <xPortStartScheduler+0x90>)
{
 800301e:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003020:	781a      	ldrb	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003022:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003024:	b2d2      	uxtb	r2, r2
 8003026:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003028:	22ff      	movs	r2, #255	; 0xff
 800302a:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800302c:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800302e:	4a20      	ldr	r2, [pc, #128]	; (80030b0 <xPortStartScheduler+0x94>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003030:	b2db      	uxtb	r3, r3
 8003032:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003036:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800303a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800303e:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003040:	2207      	movs	r2, #7
 8003042:	4b1c      	ldr	r3, [pc, #112]	; (80030b4 <xPortStartScheduler+0x98>)
 8003044:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003046:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800304a:	1e54      	subs	r4, r2, #1
 800304c:	0600      	lsls	r0, r0, #24
 800304e:	d423      	bmi.n	8003098 <xPortStartScheduler+0x7c>
 8003050:	b101      	cbz	r1, 8003054 <xPortStartScheduler+0x38>
 8003052:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003058:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800305c:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800305e:	9b01      	ldr	r3, [sp, #4]
 8003060:	4a12      	ldr	r2, [pc, #72]	; (80030ac <xPortStartScheduler+0x90>)
 8003062:	b2db      	uxtb	r3, r3
 8003064:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003066:	4b14      	ldr	r3, [pc, #80]	; (80030b8 <xPortStartScheduler+0x9c>)
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800306e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8003076:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8003078:	f7ff ffbc 	bl	8002ff4 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800307c:	2200      	movs	r2, #0
 800307e:	4b0f      	ldr	r3, [pc, #60]	; (80030bc <xPortStartScheduler+0xa0>)
 8003080:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
 8003082:	f7ff fefb 	bl	8002e7c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003086:	4a0e      	ldr	r2, [pc, #56]	; (80030c0 <xPortStartScheduler+0xa4>)
 8003088:	6813      	ldr	r3, [r2, #0]
 800308a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800308e:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8003090:	f7ff fee4 	bl	8002e5c <prvPortStartFirstTask>
	prvTaskExitError();
 8003094:	f7ff fec6 	bl	8002e24 <prvTaskExitError>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003098:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800309c:	2101      	movs	r1, #1
 800309e:	0052      	lsls	r2, r2, #1
 80030a0:	b2d2      	uxtb	r2, r2
 80030a2:	f88d 2003 	strb.w	r2, [sp, #3]
 80030a6:	4622      	mov	r2, r4
 80030a8:	e7cd      	b.n	8003046 <xPortStartScheduler+0x2a>
 80030aa:	bf00      	nop
 80030ac:	e000e400 	.word	0xe000e400
 80030b0:	200000e8 	.word	0x200000e8
 80030b4:	200000ec 	.word	0x200000ec
 80030b8:	e000ed20 	.word	0xe000ed20
 80030bc:	20000000 	.word	0x20000000
 80030c0:	e000ef34 	.word	0xe000ef34

080030c4 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80030c4:	4b0f      	ldr	r3, [pc, #60]	; (8003104 <prvInsertBlockIntoFreeList+0x40>)
{
 80030c6:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	4282      	cmp	r2, r0
 80030cc:	d318      	bcc.n	8003100 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80030ce:	685c      	ldr	r4, [r3, #4]
 80030d0:	1919      	adds	r1, r3, r4
 80030d2:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80030d4:	bf01      	itttt	eq
 80030d6:	6841      	ldreq	r1, [r0, #4]
 80030d8:	4618      	moveq	r0, r3
 80030da:	1909      	addeq	r1, r1, r4
 80030dc:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80030de:	6844      	ldr	r4, [r0, #4]
 80030e0:	1901      	adds	r1, r0, r4
 80030e2:	428a      	cmp	r2, r1
 80030e4:	d107      	bne.n	80030f6 <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80030e6:	4908      	ldr	r1, [pc, #32]	; (8003108 <prvInsertBlockIntoFreeList+0x44>)
 80030e8:	6809      	ldr	r1, [r1, #0]
 80030ea:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80030ec:	bf1f      	itttt	ne
 80030ee:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80030f0:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80030f2:	1909      	addne	r1, r1, r4
 80030f4:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80030f6:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80030f8:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80030fa:	bf18      	it	ne
 80030fc:	6018      	strne	r0, [r3, #0]
 80030fe:	bd10      	pop	{r4, pc}
 8003100:	4613      	mov	r3, r2
 8003102:	e7e1      	b.n	80030c8 <prvInsertBlockIntoFreeList+0x4>
 8003104:	20003d00 	.word	0x20003d00
 8003108:	200000f0 	.word	0x200000f0

0800310c <pvPortMalloc>:
{
 800310c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003110:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8003112:	f000 fcbd 	bl	8003a90 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8003116:	4940      	ldr	r1, [pc, #256]	; (8003218 <pvPortMalloc+0x10c>)
 8003118:	4d40      	ldr	r5, [pc, #256]	; (800321c <pvPortMalloc+0x110>)
 800311a:	680b      	ldr	r3, [r1, #0]
 800311c:	bb0b      	cbnz	r3, 8003162 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 800311e:	4a40      	ldr	r2, [pc, #256]	; (8003220 <pvPortMalloc+0x114>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003120:	0756      	lsls	r6, r2, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003122:	4e40      	ldr	r6, [pc, #256]	; (8003224 <pvPortMalloc+0x118>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003124:	bf1b      	ittet	ne
 8003126:	1dd0      	addne	r0, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003128:	f502 5370 	addne.w	r3, r2, #15360	; 0x3c00
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800312c:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003130:	f020 0007 	bicne.w	r0, r0, #7
 8003134:	bf1c      	itt	ne
 8003136:	4602      	movne	r2, r0
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003138:	1a1b      	subne	r3, r3, r0
	xStart.xBlockSize = ( size_t ) 0;
 800313a:	2000      	movs	r0, #0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800313c:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800313e:	6032      	str	r2, [r6, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003140:	6070      	str	r0, [r6, #4]
	uxAddress -= xHeapStructSize;
 8003142:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003144:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 8003148:	6018      	str	r0, [r3, #0]
	pxEnd->xBlockSize = 0;
 800314a:	6058      	str	r0, [r3, #4]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800314c:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 800314e:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003150:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003152:	4b35      	ldr	r3, [pc, #212]	; (8003228 <pvPortMalloc+0x11c>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003154:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003156:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003158:	4b34      	ldr	r3, [pc, #208]	; (800322c <pvPortMalloc+0x120>)
 800315a:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800315c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003160:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003162:	682f      	ldr	r7, [r5, #0]
 8003164:	4227      	tst	r7, r4
 8003166:	d116      	bne.n	8003196 <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 8003168:	2c00      	cmp	r4, #0
 800316a:	d042      	beq.n	80031f2 <pvPortMalloc+0xe6>
				xWantedSize += xHeapStructSize;
 800316c:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003170:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003172:	bf1c      	itt	ne
 8003174:	f023 0307 	bicne.w	r3, r3, #7
 8003178:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800317a:	b163      	cbz	r3, 8003196 <pvPortMalloc+0x8a>
 800317c:	4a2b      	ldr	r2, [pc, #172]	; (800322c <pvPortMalloc+0x120>)
 800317e:	6816      	ldr	r6, [r2, #0]
 8003180:	4690      	mov	r8, r2
 8003182:	42b3      	cmp	r3, r6
 8003184:	d807      	bhi.n	8003196 <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 8003186:	4a27      	ldr	r2, [pc, #156]	; (8003224 <pvPortMalloc+0x118>)
 8003188:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800318a:	6868      	ldr	r0, [r5, #4]
 800318c:	4283      	cmp	r3, r0
 800318e:	d804      	bhi.n	800319a <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 8003190:	6809      	ldr	r1, [r1, #0]
 8003192:	428d      	cmp	r5, r1
 8003194:	d107      	bne.n	80031a6 <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 8003196:	2400      	movs	r4, #0
 8003198:	e02b      	b.n	80031f2 <pvPortMalloc+0xe6>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800319a:	682c      	ldr	r4, [r5, #0]
 800319c:	2c00      	cmp	r4, #0
 800319e:	d0f7      	beq.n	8003190 <pvPortMalloc+0x84>
 80031a0:	462a      	mov	r2, r5
 80031a2:	4625      	mov	r5, r4
 80031a4:	e7f1      	b.n	800318a <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80031a6:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80031a8:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80031aa:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80031ac:	1ac2      	subs	r2, r0, r3
 80031ae:	2a10      	cmp	r2, #16
 80031b0:	d911      	bls.n	80031d6 <pvPortMalloc+0xca>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80031b2:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80031b4:	0741      	lsls	r1, r0, #29
 80031b6:	d00a      	beq.n	80031ce <pvPortMalloc+0xc2>
	__asm volatile
 80031b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031bc:	b672      	cpsid	i
 80031be:	f383 8811 	msr	BASEPRI, r3
 80031c2:	f3bf 8f6f 	isb	sy
 80031c6:	f3bf 8f4f 	dsb	sy
 80031ca:	b662      	cpsie	i
 80031cc:	e7fe      	b.n	80031cc <pvPortMalloc+0xc0>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80031ce:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80031d0:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80031d2:	f7ff ff77 	bl	80030c4 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80031d6:	686b      	ldr	r3, [r5, #4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80031d8:	3408      	adds	r4, #8
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80031da:	4913      	ldr	r1, [pc, #76]	; (8003228 <pvPortMalloc+0x11c>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80031dc:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80031de:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80031e0:	6808      	ldr	r0, [r1, #0]
					pxBlock->pxNextFreeBlock = NULL;
 80031e2:	2300      	movs	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80031e4:	f8c8 6000 	str.w	r6, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80031e8:	4286      	cmp	r6, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80031ea:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80031ec:	602b      	str	r3, [r5, #0]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80031ee:	bf38      	it	cc
 80031f0:	600e      	strcc	r6, [r1, #0]
	( void ) xTaskResumeAll();
 80031f2:	f000 fcef 	bl	8003bd4 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80031f6:	0763      	lsls	r3, r4, #29
 80031f8:	d00a      	beq.n	8003210 <pvPortMalloc+0x104>
 80031fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031fe:	b672      	cpsid	i
 8003200:	f383 8811 	msr	BASEPRI, r3
 8003204:	f3bf 8f6f 	isb	sy
 8003208:	f3bf 8f4f 	dsb	sy
 800320c:	b662      	cpsie	i
 800320e:	e7fe      	b.n	800320e <pvPortMalloc+0x102>
}
 8003210:	4620      	mov	r0, r4
 8003212:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003216:	bf00      	nop
 8003218:	200000f0 	.word	0x200000f0
 800321c:	20003cf4 	.word	0x20003cf4
 8003220:	200000f4 	.word	0x200000f4
 8003224:	20003d00 	.word	0x20003d00
 8003228:	20003cfc 	.word	0x20003cfc
 800322c:	20003cf8 	.word	0x20003cf8

08003230 <vPortFree>:
{
 8003230:	b510      	push	{r4, lr}
	if( pv != NULL )
 8003232:	4604      	mov	r4, r0
 8003234:	2800      	cmp	r0, #0
 8003236:	d032      	beq.n	800329e <vPortFree+0x6e>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003238:	4a19      	ldr	r2, [pc, #100]	; (80032a0 <vPortFree+0x70>)
 800323a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800323e:	6812      	ldr	r2, [r2, #0]
 8003240:	4213      	tst	r3, r2
 8003242:	d10a      	bne.n	800325a <vPortFree+0x2a>
 8003244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003248:	b672      	cpsid	i
 800324a:	f383 8811 	msr	BASEPRI, r3
 800324e:	f3bf 8f6f 	isb	sy
 8003252:	f3bf 8f4f 	dsb	sy
 8003256:	b662      	cpsie	i
 8003258:	e7fe      	b.n	8003258 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800325a:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800325e:	b151      	cbz	r1, 8003276 <vPortFree+0x46>
 8003260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003264:	b672      	cpsid	i
 8003266:	f383 8811 	msr	BASEPRI, r3
 800326a:	f3bf 8f6f 	isb	sy
 800326e:	f3bf 8f4f 	dsb	sy
 8003272:	b662      	cpsie	i
 8003274:	e7fe      	b.n	8003274 <vPortFree+0x44>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003276:	ea23 0302 	bic.w	r3, r3, r2
 800327a:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800327e:	f000 fc07 	bl	8003a90 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003282:	4a08      	ldr	r2, [pc, #32]	; (80032a4 <vPortFree+0x74>)
 8003284:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003288:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800328c:	6811      	ldr	r1, [r2, #0]
 800328e:	440b      	add	r3, r1
 8003290:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003292:	f7ff ff17 	bl	80030c4 <prvInsertBlockIntoFreeList>
}
 8003296:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 800329a:	f000 bc9b 	b.w	8003bd4 <xTaskResumeAll>
 800329e:	bd10      	pop	{r4, pc}
 80032a0:	20003cf4 	.word	0x20003cf4
 80032a4:	20003cf8 	.word	0x20003cf8

080032a8 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80032a8:	b570      	push	{r4, r5, r6, lr}
 80032aa:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80032ac:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 80032ae:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80032b0:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80032b2:	b942      	cbnz	r2, 80032c6 <prvCopyDataToQueue+0x1e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80032b4:	6805      	ldr	r5, [r0, #0]
 80032b6:	b99d      	cbnz	r5, 80032e0 <prvCopyDataToQueue+0x38>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80032b8:	6840      	ldr	r0, [r0, #4]
 80032ba:	f000 fefd 	bl	80040b8 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 80032be:	6065      	str	r5, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 80032c0:	3601      	adds	r6, #1
 80032c2:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 80032c4:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 80032c6:	b96d      	cbnz	r5, 80032e4 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80032c8:	6880      	ldr	r0, [r0, #8]
 80032ca:	f001 fbdb 	bl	8004a84 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80032ce:	68a3      	ldr	r3, [r4, #8]
 80032d0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80032d2:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80032d4:	6862      	ldr	r2, [r4, #4]
 80032d6:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80032d8:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80032da:	d301      	bcc.n	80032e0 <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80032dc:	6823      	ldr	r3, [r4, #0]
 80032de:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 80032e0:	2000      	movs	r0, #0
 80032e2:	e7ed      	b.n	80032c0 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032e4:	68c0      	ldr	r0, [r0, #12]
 80032e6:	f001 fbcd 	bl	8004a84 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80032ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80032ec:	68e2      	ldr	r2, [r4, #12]
 80032ee:	425b      	negs	r3, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80032f0:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80032f2:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80032f4:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80032f6:	60e2      	str	r2, [r4, #12]
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80032f8:	bf3e      	ittt	cc
 80032fa:	6862      	ldrcc	r2, [r4, #4]
 80032fc:	189b      	addcc	r3, r3, r2
 80032fe:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8003300:	2d02      	cmp	r5, #2
 8003302:	d1ed      	bne.n	80032e0 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003304:	b10e      	cbz	r6, 800330a <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 8003306:	3e01      	subs	r6, #1
 8003308:	e7ea      	b.n	80032e0 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 800330a:	4630      	mov	r0, r6
 800330c:	e7d8      	b.n	80032c0 <prvCopyDataToQueue+0x18>

0800330e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800330e:	4603      	mov	r3, r0
 8003310:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003312:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8003314:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003316:	b162      	cbz	r2, 8003332 <prvCopyDataFromQueue+0x24>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003318:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800331a:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800331c:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800331e:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003320:	60d9      	str	r1, [r3, #12]
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
	}
}
 8003322:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003326:	bf24      	itt	cs
 8003328:	6819      	ldrcs	r1, [r3, #0]
 800332a:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800332c:	68d9      	ldr	r1, [r3, #12]
 800332e:	f001 bba9 	b.w	8004a84 <memcpy>
}
 8003332:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003336:	4770      	bx	lr

08003338 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003338:	b570      	push	{r4, r5, r6, lr}
 800333a:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800333c:	f7ff fdd2 	bl	8002ee4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003340:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003344:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8003348:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800334a:	2d00      	cmp	r5, #0
 800334c:	dc14      	bgt.n	8003378 <prvUnlockQueue+0x40>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800334e:	23ff      	movs	r3, #255	; 0xff

		while( cRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003350:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 8003354:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8003358:	f7ff fdea 	bl	8002f30 <vPortExitCritical>
	taskENTER_CRITICAL();
 800335c:	f7ff fdc2 	bl	8002ee4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8003360:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8003364:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003366:	2d00      	cmp	r5, #0
 8003368:	dc12      	bgt.n	8003390 <prvUnlockQueue+0x58>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800336a:	23ff      	movs	r3, #255	; 0xff
 800336c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 8003370:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8003374:	f7ff bddc 	b.w	8002f30 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003378:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800337a:	2b00      	cmp	r3, #0
 800337c:	d0e7      	beq.n	800334e <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800337e:	4630      	mov	r0, r6
 8003380:	f000 fdac 	bl	8003edc <xTaskRemoveFromEventList>
 8003384:	b108      	cbz	r0, 800338a <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8003386:	f000 fe3b 	bl	8004000 <vTaskMissedYield>
 800338a:	3d01      	subs	r5, #1
 800338c:	b26d      	sxtb	r5, r5
 800338e:	e7dc      	b.n	800334a <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003390:	6923      	ldr	r3, [r4, #16]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d0e9      	beq.n	800336a <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003396:	4630      	mov	r0, r6
 8003398:	f000 fda0 	bl	8003edc <xTaskRemoveFromEventList>
 800339c:	b108      	cbz	r0, 80033a2 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 800339e:	f000 fe2f 	bl	8004000 <vTaskMissedYield>
 80033a2:	3d01      	subs	r5, #1
 80033a4:	b26d      	sxtb	r5, r5
 80033a6:	e7de      	b.n	8003366 <prvUnlockQueue+0x2e>

080033a8 <xQueueGenericReset>:
{
 80033a8:	b538      	push	{r3, r4, r5, lr}
 80033aa:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 80033ac:	4604      	mov	r4, r0
 80033ae:	b950      	cbnz	r0, 80033c6 <xQueueGenericReset+0x1e>
 80033b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033b4:	b672      	cpsid	i
 80033b6:	f383 8811 	msr	BASEPRI, r3
 80033ba:	f3bf 8f6f 	isb	sy
 80033be:	f3bf 8f4f 	dsb	sy
 80033c2:	b662      	cpsie	i
 80033c4:	e7fe      	b.n	80033c4 <xQueueGenericReset+0x1c>
	taskENTER_CRITICAL();
 80033c6:	f7ff fd8d 	bl	8002ee4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80033ca:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80033cc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80033ce:	6822      	ldr	r2, [r4, #0]
 80033d0:	4343      	muls	r3, r0
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80033d2:	60a2      	str	r2, [r4, #8]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80033d4:	18d1      	adds	r1, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80033d6:	1a1b      	subs	r3, r3, r0
 80033d8:	4413      	add	r3, r2
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80033da:	6061      	str	r1, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80033dc:	2100      	movs	r1, #0
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80033de:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80033e0:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80033e2:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 80033e4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80033e8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 80033ec:	b995      	cbnz	r5, 8003414 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80033ee:	6923      	ldr	r3, [r4, #16]
 80033f0:	b163      	cbz	r3, 800340c <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80033f2:	f104 0010 	add.w	r0, r4, #16
 80033f6:	f000 fd71 	bl	8003edc <xTaskRemoveFromEventList>
 80033fa:	b138      	cbz	r0, 800340c <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 80033fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003400:	4b09      	ldr	r3, [pc, #36]	; (8003428 <xQueueGenericReset+0x80>)
 8003402:	601a      	str	r2, [r3, #0]
 8003404:	f3bf 8f4f 	dsb	sy
 8003408:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 800340c:	f7ff fd90 	bl	8002f30 <vPortExitCritical>
}
 8003410:	2001      	movs	r0, #1
 8003412:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003414:	f104 0010 	add.w	r0, r4, #16
 8003418:	f7ff fcc3 	bl	8002da2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800341c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003420:	f7ff fcbf 	bl	8002da2 <vListInitialise>
 8003424:	e7f2      	b.n	800340c <xQueueGenericReset+0x64>
 8003426:	bf00      	nop
 8003428:	e000ed04 	.word	0xe000ed04

0800342c <xQueueGenericCreate>:
	{
 800342c:	b570      	push	{r4, r5, r6, lr}
 800342e:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003430:	4606      	mov	r6, r0
 8003432:	b950      	cbnz	r0, 800344a <xQueueGenericCreate+0x1e>
 8003434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003438:	b672      	cpsid	i
 800343a:	f383 8811 	msr	BASEPRI, r3
 800343e:	f3bf 8f6f 	isb	sy
 8003442:	f3bf 8f4f 	dsb	sy
 8003446:	b662      	cpsie	i
 8003448:	e7fe      	b.n	8003448 <xQueueGenericCreate+0x1c>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800344a:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800344c:	3048      	adds	r0, #72	; 0x48
 800344e:	f7ff fe5d 	bl	800310c <pvPortMalloc>
		if( pxNewQueue != NULL )
 8003452:	4604      	mov	r4, r0
 8003454:	b138      	cbz	r0, 8003466 <xQueueGenericCreate+0x3a>
	if( uxItemSize == ( UBaseType_t ) 0 )
 8003456:	b945      	cbnz	r5, 800346a <xQueueGenericCreate+0x3e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003458:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 800345a:	63e6      	str	r6, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800345c:	2101      	movs	r1, #1
	pxNewQueue->uxItemSize = uxItemSize;
 800345e:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003460:	4620      	mov	r0, r4
 8003462:	f7ff ffa1 	bl	80033a8 <xQueueGenericReset>
	}
 8003466:	4620      	mov	r0, r4
 8003468:	bd70      	pop	{r4, r5, r6, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800346a:	f100 0348 	add.w	r3, r0, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800346e:	6003      	str	r3, [r0, #0]
 8003470:	e7f3      	b.n	800345a <xQueueGenericCreate+0x2e>
	...

08003474 <xQueueGenericSend>:
{
 8003474:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003478:	4689      	mov	r9, r1
 800347a:	9201      	str	r2, [sp, #4]
 800347c:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 800347e:	4604      	mov	r4, r0
 8003480:	b950      	cbnz	r0, 8003498 <xQueueGenericSend+0x24>
 8003482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003486:	b672      	cpsid	i
 8003488:	f383 8811 	msr	BASEPRI, r3
 800348c:	f3bf 8f6f 	isb	sy
 8003490:	f3bf 8f4f 	dsb	sy
 8003494:	b662      	cpsie	i
 8003496:	e7fe      	b.n	8003496 <xQueueGenericSend+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003498:	2900      	cmp	r1, #0
 800349a:	f040 808c 	bne.w	80035b6 <xQueueGenericSend+0x142>
 800349e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	f000 8088 	beq.w	80035b6 <xQueueGenericSend+0x142>
 80034a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034aa:	b672      	cpsid	i
 80034ac:	f383 8811 	msr	BASEPRI, r3
 80034b0:	f3bf 8f6f 	isb	sy
 80034b4:	f3bf 8f4f 	dsb	sy
 80034b8:	b662      	cpsie	i
 80034ba:	e7fe      	b.n	80034ba <xQueueGenericSend+0x46>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80034bc:	9e01      	ldr	r6, [sp, #4]
 80034be:	2e00      	cmp	r6, #0
 80034c0:	f000 8084 	beq.w	80035cc <xQueueGenericSend+0x158>
 80034c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034c8:	b672      	cpsid	i
 80034ca:	f383 8811 	msr	BASEPRI, r3
 80034ce:	f3bf 8f6f 	isb	sy
 80034d2:	f3bf 8f4f 	dsb	sy
 80034d6:	b662      	cpsie	i
 80034d8:	e7fe      	b.n	80034d8 <xQueueGenericSend+0x64>
				if( xTicksToWait == ( TickType_t ) 0 )
 80034da:	9d01      	ldr	r5, [sp, #4]
 80034dc:	b91d      	cbnz	r5, 80034e6 <xQueueGenericSend+0x72>
					taskEXIT_CRITICAL();
 80034de:	f7ff fd27 	bl	8002f30 <vPortExitCritical>
			return errQUEUE_FULL;
 80034e2:	2000      	movs	r0, #0
 80034e4:	e058      	b.n	8003598 <xQueueGenericSend+0x124>
				else if( xEntryTimeSet == pdFALSE )
 80034e6:	b916      	cbnz	r6, 80034ee <xQueueGenericSend+0x7a>
					vTaskSetTimeOutState( &xTimeOut );
 80034e8:	a802      	add	r0, sp, #8
 80034ea:	f000 fd3b 	bl	8003f64 <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 80034ee:	f7ff fd1f 	bl	8002f30 <vPortExitCritical>
		vTaskSuspendAll();
 80034f2:	f000 facd 	bl	8003a90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80034f6:	f7ff fcf5 	bl	8002ee4 <vPortEnterCritical>
 80034fa:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80034fe:	2bff      	cmp	r3, #255	; 0xff
 8003500:	d101      	bne.n	8003506 <xQueueGenericSend+0x92>
 8003502:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 8003506:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800350a:	2bff      	cmp	r3, #255	; 0xff
 800350c:	d101      	bne.n	8003512 <xQueueGenericSend+0x9e>
 800350e:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 8003512:	f7ff fd0d 	bl	8002f30 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003516:	a901      	add	r1, sp, #4
 8003518:	a802      	add	r0, sp, #8
 800351a:	f000 fd33 	bl	8003f84 <xTaskCheckForTimeOut>
 800351e:	2800      	cmp	r0, #0
 8003520:	d143      	bne.n	80035aa <xQueueGenericSend+0x136>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003522:	f7ff fcdf 	bl	8002ee4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003526:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8003528:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800352a:	f7ff fd01 	bl	8002f30 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800352e:	42ae      	cmp	r6, r5
 8003530:	d135      	bne.n	800359e <xQueueGenericSend+0x12a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003532:	9901      	ldr	r1, [sp, #4]
 8003534:	f104 0010 	add.w	r0, r4, #16
 8003538:	f000 fcb4 	bl	8003ea4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800353c:	4620      	mov	r0, r4
 800353e:	f7ff fefb 	bl	8003338 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003542:	f000 fb47 	bl	8003bd4 <xTaskResumeAll>
 8003546:	b938      	cbnz	r0, 8003558 <xQueueGenericSend+0xe4>
					portYIELD_WITHIN_API();
 8003548:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800354c:	f8ca 3000 	str.w	r3, [sl]
 8003550:	f3bf 8f4f 	dsb	sy
 8003554:	f3bf 8f6f 	isb	sy
 8003558:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800355a:	f7ff fcc3 	bl	8002ee4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800355e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003560:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003562:	429a      	cmp	r2, r3
 8003564:	d301      	bcc.n	800356a <xQueueGenericSend+0xf6>
 8003566:	2f02      	cmp	r7, #2
 8003568:	d1b7      	bne.n	80034da <xQueueGenericSend+0x66>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800356a:	463a      	mov	r2, r7
 800356c:	4649      	mov	r1, r9
 800356e:	4620      	mov	r0, r4
 8003570:	f7ff fe9a 	bl	80032a8 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003574:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003576:	b11b      	cbz	r3, 8003580 <xQueueGenericSend+0x10c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003578:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800357c:	f000 fcae 	bl	8003edc <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8003580:	b138      	cbz	r0, 8003592 <xQueueGenericSend+0x11e>
						queueYIELD_IF_USING_PREEMPTION();
 8003582:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003586:	4b19      	ldr	r3, [pc, #100]	; (80035ec <xQueueGenericSend+0x178>)
 8003588:	601a      	str	r2, [r3, #0]
 800358a:	f3bf 8f4f 	dsb	sy
 800358e:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8003592:	f7ff fccd 	bl	8002f30 <vPortExitCritical>
				return pdPASS;
 8003596:	2001      	movs	r0, #1
}
 8003598:	b004      	add	sp, #16
 800359a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 800359e:	4620      	mov	r0, r4
 80035a0:	f7ff feca 	bl	8003338 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80035a4:	f000 fb16 	bl	8003bd4 <xTaskResumeAll>
 80035a8:	e7d6      	b.n	8003558 <xQueueGenericSend+0xe4>
			prvUnlockQueue( pxQueue );
 80035aa:	4620      	mov	r0, r4
 80035ac:	f7ff fec4 	bl	8003338 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80035b0:	f000 fb10 	bl	8003bd4 <xTaskResumeAll>
 80035b4:	e795      	b.n	80034e2 <xQueueGenericSend+0x6e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80035b6:	2f02      	cmp	r7, #2
 80035b8:	d102      	bne.n	80035c0 <xQueueGenericSend+0x14c>
 80035ba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d10a      	bne.n	80035d6 <xQueueGenericSend+0x162>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80035c0:	f000 fd24 	bl	800400c <xTaskGetSchedulerState>
 80035c4:	2800      	cmp	r0, #0
 80035c6:	f43f af79 	beq.w	80034bc <xQueueGenericSend+0x48>
 80035ca:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 80035cc:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 80035d0:	f8df a018 	ldr.w	sl, [pc, #24]	; 80035ec <xQueueGenericSend+0x178>
 80035d4:	e7c1      	b.n	800355a <xQueueGenericSend+0xe6>
 80035d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035da:	b672      	cpsid	i
 80035dc:	f383 8811 	msr	BASEPRI, r3
 80035e0:	f3bf 8f6f 	isb	sy
 80035e4:	f3bf 8f4f 	dsb	sy
 80035e8:	b662      	cpsie	i
 80035ea:	e7fe      	b.n	80035ea <xQueueGenericSend+0x176>
 80035ec:	e000ed04 	.word	0xe000ed04

080035f0 <xQueueCreateMutex>:
	{
 80035f0:	b510      	push	{r4, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80035f2:	4602      	mov	r2, r0
 80035f4:	2100      	movs	r1, #0
 80035f6:	2001      	movs	r0, #1
 80035f8:	f7ff ff18 	bl	800342c <xQueueGenericCreate>
		if( pxNewQueue != NULL )
 80035fc:	4604      	mov	r4, r0
 80035fe:	b138      	cbz	r0, 8003610 <xQueueCreateMutex+0x20>
			pxNewQueue->pxMutexHolder = NULL;
 8003600:	2300      	movs	r3, #0
 8003602:	6043      	str	r3, [r0, #4]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003604:	461a      	mov	r2, r3
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8003606:	6003      	str	r3, [r0, #0]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003608:	4619      	mov	r1, r3
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800360a:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800360c:	f7ff ff32 	bl	8003474 <xQueueGenericSend>
	}
 8003610:	4620      	mov	r0, r4
 8003612:	bd10      	pop	{r4, pc}

08003614 <xQueueGenericReceive>:
{
 8003614:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003618:	4688      	mov	r8, r1
 800361a:	9201      	str	r2, [sp, #4]
 800361c:	4699      	mov	r9, r3
	configASSERT( pxQueue );
 800361e:	4604      	mov	r4, r0
 8003620:	b950      	cbnz	r0, 8003638 <xQueueGenericReceive+0x24>
 8003622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003626:	b672      	cpsid	i
 8003628:	f383 8811 	msr	BASEPRI, r3
 800362c:	f3bf 8f6f 	isb	sy
 8003630:	f3bf 8f4f 	dsb	sy
 8003634:	b662      	cpsie	i
 8003636:	e7fe      	b.n	8003636 <xQueueGenericReceive+0x22>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003638:	2900      	cmp	r1, #0
 800363a:	f040 80a9 	bne.w	8003790 <xQueueGenericReceive+0x17c>
 800363e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003640:	2b00      	cmp	r3, #0
 8003642:	f000 80a5 	beq.w	8003790 <xQueueGenericReceive+0x17c>
 8003646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800364a:	b672      	cpsid	i
 800364c:	f383 8811 	msr	BASEPRI, r3
 8003650:	f3bf 8f6f 	isb	sy
 8003654:	f3bf 8f4f 	dsb	sy
 8003658:	b662      	cpsie	i
 800365a:	e7fe      	b.n	800365a <xQueueGenericReceive+0x46>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800365c:	9e01      	ldr	r6, [sp, #4]
 800365e:	2e00      	cmp	r6, #0
 8003660:	f000 809c 	beq.w	800379c <xQueueGenericReceive+0x188>
 8003664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003668:	b672      	cpsid	i
 800366a:	f383 8811 	msr	BASEPRI, r3
 800366e:	f3bf 8f6f 	isb	sy
 8003672:	f3bf 8f4f 	dsb	sy
 8003676:	b662      	cpsie	i
 8003678:	e7fe      	b.n	8003678 <xQueueGenericReceive+0x64>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800367a:	6a63      	ldr	r3, [r4, #36]	; 0x24
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 800367c:	60e6      	str	r6, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800367e:	2b00      	cmp	r3, #0
 8003680:	d06d      	beq.n	800375e <xQueueGenericReceive+0x14a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003682:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003686:	e05f      	b.n	8003748 <xQueueGenericReceive+0x134>
				if( xTicksToWait == ( TickType_t ) 0 )
 8003688:	9d01      	ldr	r5, [sp, #4]
 800368a:	b91d      	cbnz	r5, 8003694 <xQueueGenericReceive+0x80>
					taskEXIT_CRITICAL();
 800368c:	f7ff fc50 	bl	8002f30 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8003690:	4628      	mov	r0, r5
 8003692:	e067      	b.n	8003764 <xQueueGenericReceive+0x150>
				else if( xEntryTimeSet == pdFALSE )
 8003694:	b916      	cbnz	r6, 800369c <xQueueGenericReceive+0x88>
					vTaskSetTimeOutState( &xTimeOut );
 8003696:	a802      	add	r0, sp, #8
 8003698:	f000 fc64 	bl	8003f64 <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 800369c:	f7ff fc48 	bl	8002f30 <vPortExitCritical>
		vTaskSuspendAll();
 80036a0:	f000 f9f6 	bl	8003a90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80036a4:	f7ff fc1e 	bl	8002ee4 <vPortEnterCritical>
 80036a8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80036ac:	2bff      	cmp	r3, #255	; 0xff
 80036ae:	d101      	bne.n	80036b4 <xQueueGenericReceive+0xa0>
 80036b0:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 80036b4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80036b8:	2bff      	cmp	r3, #255	; 0xff
 80036ba:	d101      	bne.n	80036c0 <xQueueGenericReceive+0xac>
 80036bc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80036c0:	f7ff fc36 	bl	8002f30 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80036c4:	a901      	add	r1, sp, #4
 80036c6:	a802      	add	r0, sp, #8
 80036c8:	f000 fc5c 	bl	8003f84 <xTaskCheckForTimeOut>
 80036cc:	2800      	cmp	r0, #0
 80036ce:	d152      	bne.n	8003776 <xQueueGenericReceive+0x162>
	taskENTER_CRITICAL();
 80036d0:	f7ff fc08 	bl	8002ee4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80036d4:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 80036d6:	f7ff fc2b 	bl	8002f30 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80036da:	2d00      	cmp	r5, #0
 80036dc:	d145      	bne.n	800376a <xQueueGenericReceive+0x156>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80036de:	6823      	ldr	r3, [r4, #0]
 80036e0:	b933      	cbnz	r3, 80036f0 <xQueueGenericReceive+0xdc>
						taskENTER_CRITICAL();
 80036e2:	f7ff fbff 	bl	8002ee4 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80036e6:	6860      	ldr	r0, [r4, #4]
 80036e8:	f000 fca0 	bl	800402c <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 80036ec:	f7ff fc20 	bl	8002f30 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80036f0:	9901      	ldr	r1, [sp, #4]
 80036f2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80036f6:	f000 fbd5 	bl	8003ea4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80036fa:	4620      	mov	r0, r4
 80036fc:	f7ff fe1c 	bl	8003338 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003700:	f000 fa68 	bl	8003bd4 <xTaskResumeAll>
 8003704:	b938      	cbnz	r0, 8003716 <xQueueGenericReceive+0x102>
					portYIELD_WITHIN_API();
 8003706:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800370a:	f8ca 3000 	str.w	r3, [sl]
 800370e:	f3bf 8f4f 	dsb	sy
 8003712:	f3bf 8f6f 	isb	sy
 8003716:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8003718:	f7ff fbe4 	bl	8002ee4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800371c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800371e:	2d00      	cmp	r5, #0
 8003720:	d0b2      	beq.n	8003688 <xQueueGenericReceive+0x74>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003722:	4641      	mov	r1, r8
 8003724:	4620      	mov	r0, r4
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8003726:	68e6      	ldr	r6, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003728:	f7ff fdf1 	bl	800330e <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 800372c:	f1b9 0f00 	cmp.w	r9, #0
 8003730:	d1a3      	bne.n	800367a <xQueueGenericReceive+0x66>
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8003732:	3d01      	subs	r5, #1
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003734:	6823      	ldr	r3, [r4, #0]
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8003736:	63a5      	str	r5, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003738:	b913      	cbnz	r3, 8003740 <xQueueGenericReceive+0x12c>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800373a:	f000 fd11 	bl	8004160 <pvTaskIncrementMutexHeldCount>
 800373e:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003740:	6923      	ldr	r3, [r4, #16]
 8003742:	b163      	cbz	r3, 800375e <xQueueGenericReceive+0x14a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003744:	f104 0010 	add.w	r0, r4, #16
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003748:	f000 fbc8 	bl	8003edc <xTaskRemoveFromEventList>
 800374c:	b138      	cbz	r0, 800375e <xQueueGenericReceive+0x14a>
							queueYIELD_IF_USING_PREEMPTION();
 800374e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003752:	4b14      	ldr	r3, [pc, #80]	; (80037a4 <xQueueGenericReceive+0x190>)
 8003754:	601a      	str	r2, [r3, #0]
 8003756:	f3bf 8f4f 	dsb	sy
 800375a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800375e:	f7ff fbe7 	bl	8002f30 <vPortExitCritical>
				return pdPASS;
 8003762:	2001      	movs	r0, #1
}
 8003764:	b004      	add	sp, #16
 8003766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 800376a:	4620      	mov	r0, r4
 800376c:	f7ff fde4 	bl	8003338 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003770:	f000 fa30 	bl	8003bd4 <xTaskResumeAll>
 8003774:	e7cf      	b.n	8003716 <xQueueGenericReceive+0x102>
			prvUnlockQueue( pxQueue );
 8003776:	4620      	mov	r0, r4
 8003778:	f7ff fdde 	bl	8003338 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800377c:	f000 fa2a 	bl	8003bd4 <xTaskResumeAll>
	taskENTER_CRITICAL();
 8003780:	f7ff fbb0 	bl	8002ee4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003784:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 8003786:	f7ff fbd3 	bl	8002f30 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800378a:	2d00      	cmp	r5, #0
 800378c:	d1c3      	bne.n	8003716 <xQueueGenericReceive+0x102>
 800378e:	e77f      	b.n	8003690 <xQueueGenericReceive+0x7c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003790:	f000 fc3c 	bl	800400c <xTaskGetSchedulerState>
 8003794:	2800      	cmp	r0, #0
 8003796:	f43f af61 	beq.w	800365c <xQueueGenericReceive+0x48>
 800379a:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800379c:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 800379e:	f8df a004 	ldr.w	sl, [pc, #4]	; 80037a4 <xQueueGenericReceive+0x190>
 80037a2:	e7b9      	b.n	8003718 <xQueueGenericReceive+0x104>
 80037a4:	e000ed04 	.word	0xe000ed04

080037a8 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037a8:	4a06      	ldr	r2, [pc, #24]	; (80037c4 <prvResetNextTaskUnblockTime+0x1c>)
 80037aa:	6813      	ldr	r3, [r2, #0]
 80037ac:	6819      	ldr	r1, [r3, #0]
 80037ae:	4b06      	ldr	r3, [pc, #24]	; (80037c8 <prvResetNextTaskUnblockTime+0x20>)
 80037b0:	b919      	cbnz	r1, 80037ba <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80037b2:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80037b6:	601a      	str	r2, [r3, #0]
 80037b8:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80037ba:	6812      	ldr	r2, [r2, #0]
 80037bc:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80037be:	68d2      	ldr	r2, [r2, #12]
 80037c0:	6852      	ldr	r2, [r2, #4]
 80037c2:	e7f8      	b.n	80037b6 <prvResetNextTaskUnblockTime+0xe>
 80037c4:	20003d0c 	.word	0x20003d0c
 80037c8:	20003de4 	.word	0x20003de4

080037cc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80037cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80037ce:	4b1b      	ldr	r3, [pc, #108]	; (800383c <prvAddCurrentTaskToDelayedList+0x70>)
{
 80037d0:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80037d2:	4e1b      	ldr	r6, [pc, #108]	; (8003840 <prvAddCurrentTaskToDelayedList+0x74>)
{
 80037d4:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 80037d6:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80037d8:	6830      	ldr	r0, [r6, #0]
 80037da:	3004      	adds	r0, #4
 80037dc:	f7ff fb12 	bl	8002e04 <uxListRemove>
 80037e0:	4633      	mov	r3, r6
 80037e2:	b940      	cbnz	r0, 80037f6 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80037e4:	6831      	ldr	r1, [r6, #0]
 80037e6:	2001      	movs	r0, #1
 80037e8:	4e16      	ldr	r6, [pc, #88]	; (8003844 <prvAddCurrentTaskToDelayedList+0x78>)
 80037ea:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80037ec:	6832      	ldr	r2, [r6, #0]
 80037ee:	4088      	lsls	r0, r1
 80037f0:	ea22 0200 	bic.w	r2, r2, r0
 80037f4:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80037f6:	1c62      	adds	r2, r4, #1
 80037f8:	d107      	bne.n	800380a <prvAddCurrentTaskToDelayedList+0x3e>
 80037fa:	b137      	cbz	r7, 800380a <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80037fc:	6819      	ldr	r1, [r3, #0]
 80037fe:	4812      	ldr	r0, [pc, #72]	; (8003848 <prvAddCurrentTaskToDelayedList+0x7c>)
 8003800:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003802:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003806:	f7ff bada 	b.w	8002dbe <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800380a:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800380c:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 800380e:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003810:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8003812:	d907      	bls.n	8003824 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003814:	4a0d      	ldr	r2, [pc, #52]	; (800384c <prvAddCurrentTaskToDelayedList+0x80>)
 8003816:	6810      	ldr	r0, [r2, #0]
 8003818:	6819      	ldr	r1, [r3, #0]
}
 800381a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800381e:	3104      	adds	r1, #4
 8003820:	f7ff bad9 	b.w	8002dd6 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003824:	4a0a      	ldr	r2, [pc, #40]	; (8003850 <prvAddCurrentTaskToDelayedList+0x84>)
 8003826:	6810      	ldr	r0, [r2, #0]
 8003828:	6819      	ldr	r1, [r3, #0]
 800382a:	3104      	adds	r1, #4
 800382c:	f7ff fad3 	bl	8002dd6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003830:	4b08      	ldr	r3, [pc, #32]	; (8003854 <prvAddCurrentTaskToDelayedList+0x88>)
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	4294      	cmp	r4, r2
 8003836:	d200      	bcs.n	800383a <prvAddCurrentTaskToDelayedList+0x6e>
					xNextTaskUnblockTime = xTimeToWake;
 8003838:	601c      	str	r4, [r3, #0]
 800383a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800383c:	20003e2c 	.word	0x20003e2c
 8003840:	20003d08 	.word	0x20003d08
 8003844:	20003db4 	.word	0x20003db4
 8003848:	20003e04 	.word	0x20003e04
 800384c:	20003d10 	.word	0x20003d10
 8003850:	20003d0c 	.word	0x20003d0c
 8003854:	20003de4 	.word	0x20003de4

08003858 <prvTaskIsTaskSuspended.part.0>:
 8003858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800385c:	b672      	cpsid	i
 800385e:	f383 8811 	msr	BASEPRI, r3
 8003862:	f3bf 8f6f 	isb	sy
 8003866:	f3bf 8f4f 	dsb	sy
 800386a:	b662      	cpsie	i
 800386c:	e7fe      	b.n	800386c <prvTaskIsTaskSuspended.part.0+0x14>
	...

08003870 <xTaskCreate>:
	{
 8003870:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003874:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 8003878:	4680      	mov	r8, r0
 800387a:	460f      	mov	r7, r1
 800387c:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800387e:	4650      	mov	r0, sl
	{
 8003880:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003882:	f7ff fc43 	bl	800310c <pvPortMalloc>
			if( pxStack != NULL )
 8003886:	4605      	mov	r5, r0
 8003888:	2800      	cmp	r0, #0
 800388a:	f000 8096 	beq.w	80039ba <xTaskCreate+0x14a>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800388e:	2054      	movs	r0, #84	; 0x54
 8003890:	f7ff fc3c 	bl	800310c <pvPortMalloc>
				if( pxNewTCB != NULL )
 8003894:	4604      	mov	r4, r0
 8003896:	2800      	cmp	r0, #0
 8003898:	f000 808c 	beq.w	80039b4 <xTaskCreate+0x144>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800389c:	f1aa 0a04 	sub.w	sl, sl, #4
					pxNewTCB->pxStack = pxStack;
 80038a0:	6305      	str	r5, [r0, #48]	; 0x30
 80038a2:	1e7b      	subs	r3, r7, #1
 80038a4:	f100 0234 	add.w	r2, r0, #52	; 0x34
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80038a8:	4455      	add	r5, sl
 80038aa:	370f      	adds	r7, #15
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80038ac:	f025 0a07 	bic.w	sl, r5, #7
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80038b0:	7859      	ldrb	r1, [r3, #1]
 80038b2:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 80038b6:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80038ba:	b109      	cbz	r1, 80038c0 <xTaskCreate+0x50>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80038bc:	42bb      	cmp	r3, r7
 80038be:	d1f7      	bne.n	80038b0 <xTaskCreate+0x40>
 80038c0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80038c2:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80038c6:	1d27      	adds	r7, r4, #4
 80038c8:	2d06      	cmp	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80038ca:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80038ce:	4638      	mov	r0, r7
		pxNewTCB->uxMutexesHeld = 0;
 80038d0:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
 80038d4:	bf28      	it	cs
 80038d6:	2506      	movcs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 80038d8:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80038da:	6465      	str	r5, [r4, #68]	; 0x44
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038dc:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80038e0:	f7ff fa6a 	bl	8002db8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80038e4:	f104 0018 	add.w	r0, r4, #24
 80038e8:	f7ff fa66 	bl	8002db8 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 80038ec:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80038f0:	6124      	str	r4, [r4, #16]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80038f2:	464a      	mov	r2, r9
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038f4:	61a5      	str	r5, [r4, #24]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80038f6:	4641      	mov	r1, r8
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80038f8:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80038fa:	4650      	mov	r0, sl
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80038fc:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003900:	f7ff fac6 	bl	8002e90 <pxPortInitialiseStack>
 8003904:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8003906:	b106      	cbz	r6, 800390a <xTaskCreate+0x9a>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003908:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 800390a:	f7ff faeb 	bl	8002ee4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 800390e:	4b32      	ldr	r3, [pc, #200]	; (80039d8 <xTaskCreate+0x168>)
		if( pxCurrentTCB == NULL )
 8003910:	4e32      	ldr	r6, [pc, #200]	; (80039dc <xTaskCreate+0x16c>)
		uxCurrentNumberOfTasks++;
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8003a08 <xTaskCreate+0x198>
 8003918:	3201      	adds	r2, #1
 800391a:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800391c:	6835      	ldr	r5, [r6, #0]
 800391e:	2d00      	cmp	r5, #0
 8003920:	d14e      	bne.n	80039c0 <xTaskCreate+0x150>
			pxCurrentTCB = pxNewTCB;
 8003922:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	2b01      	cmp	r3, #1
 8003928:	d11d      	bne.n	8003966 <xTaskCreate+0xf6>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800392a:	eb08 0005 	add.w	r0, r8, r5
 800392e:	3514      	adds	r5, #20
 8003930:	f7ff fa37 	bl	8002da2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003934:	2d8c      	cmp	r5, #140	; 0x8c
 8003936:	d1f8      	bne.n	800392a <xTaskCreate+0xba>
	vListInitialise( &xDelayedTaskList1 );
 8003938:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8003a0c <xTaskCreate+0x19c>
	vListInitialise( &xDelayedTaskList2 );
 800393c:	4d28      	ldr	r5, [pc, #160]	; (80039e0 <xTaskCreate+0x170>)
	vListInitialise( &xDelayedTaskList1 );
 800393e:	4648      	mov	r0, r9
 8003940:	f7ff fa2f 	bl	8002da2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003944:	4628      	mov	r0, r5
 8003946:	f7ff fa2c 	bl	8002da2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800394a:	4826      	ldr	r0, [pc, #152]	; (80039e4 <xTaskCreate+0x174>)
 800394c:	f7ff fa29 	bl	8002da2 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8003950:	4825      	ldr	r0, [pc, #148]	; (80039e8 <xTaskCreate+0x178>)
 8003952:	f7ff fa26 	bl	8002da2 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8003956:	4825      	ldr	r0, [pc, #148]	; (80039ec <xTaskCreate+0x17c>)
 8003958:	f7ff fa23 	bl	8002da2 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800395c:	4b24      	ldr	r3, [pc, #144]	; (80039f0 <xTaskCreate+0x180>)
 800395e:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003962:	4b24      	ldr	r3, [pc, #144]	; (80039f4 <xTaskCreate+0x184>)
 8003964:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8003966:	4a24      	ldr	r2, [pc, #144]	; (80039f8 <xTaskCreate+0x188>)
		prvAddTaskToReadyList( pxNewTCB );
 8003968:	2501      	movs	r5, #1
 800396a:	4924      	ldr	r1, [pc, #144]	; (80039fc <xTaskCreate+0x18c>)
		uxTaskNumber++;
 800396c:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800396e:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8003970:	3301      	adds	r3, #1
 8003972:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8003974:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003976:	fa05 f302 	lsl.w	r3, r5, r2
 800397a:	4303      	orrs	r3, r0
 800397c:	2014      	movs	r0, #20
 800397e:	600b      	str	r3, [r1, #0]
 8003980:	4639      	mov	r1, r7
 8003982:	fb00 8002 	mla	r0, r0, r2, r8
 8003986:	f7ff fa1a 	bl	8002dbe <vListInsertEnd>
	taskEXIT_CRITICAL();
 800398a:	f7ff fad1 	bl	8002f30 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800398e:	4b1c      	ldr	r3, [pc, #112]	; (8003a00 <xTaskCreate+0x190>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	b163      	cbz	r3, 80039ae <xTaskCreate+0x13e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003994:	6833      	ldr	r3, [r6, #0]
 8003996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003998:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800399a:	429a      	cmp	r2, r3
 800399c:	d207      	bcs.n	80039ae <xTaskCreate+0x13e>
			taskYIELD_IF_USING_PREEMPTION();
 800399e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039a2:	4b18      	ldr	r3, [pc, #96]	; (8003a04 <xTaskCreate+0x194>)
 80039a4:	601a      	str	r2, [r3, #0]
 80039a6:	f3bf 8f4f 	dsb	sy
 80039aa:	f3bf 8f6f 	isb	sy
	}
 80039ae:	4628      	mov	r0, r5
 80039b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 80039b4:	4628      	mov	r0, r5
 80039b6:	f7ff fc3b 	bl	8003230 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80039ba:	f04f 35ff 	mov.w	r5, #4294967295
 80039be:	e7f6      	b.n	80039ae <xTaskCreate+0x13e>
			if( xSchedulerRunning == pdFALSE )
 80039c0:	4b0f      	ldr	r3, [pc, #60]	; (8003a00 <xTaskCreate+0x190>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d1ce      	bne.n	8003966 <xTaskCreate+0xf6>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80039c8:	6833      	ldr	r3, [r6, #0]
 80039ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039cc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d8c9      	bhi.n	8003966 <xTaskCreate+0xf6>
					pxCurrentTCB = pxNewTCB;
 80039d2:	6034      	str	r4, [r6, #0]
 80039d4:	e7c7      	b.n	8003966 <xTaskCreate+0xf6>
 80039d6:	bf00      	nop
 80039d8:	20003da0 	.word	0x20003da0
 80039dc:	20003d08 	.word	0x20003d08
 80039e0:	20003dcc 	.word	0x20003dcc
 80039e4:	20003dec 	.word	0x20003dec
 80039e8:	20003e18 	.word	0x20003e18
 80039ec:	20003e04 	.word	0x20003e04
 80039f0:	20003d0c 	.word	0x20003d0c
 80039f4:	20003d10 	.word	0x20003d10
 80039f8:	20003db0 	.word	0x20003db0
 80039fc:	20003db4 	.word	0x20003db4
 8003a00:	20003e00 	.word	0x20003e00
 8003a04:	e000ed04 	.word	0xe000ed04
 8003a08:	20003d14 	.word	0x20003d14
 8003a0c:	20003db8 	.word	0x20003db8

08003a10 <vTaskStartScheduler>:
{
 8003a10:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 8003a12:	4b19      	ldr	r3, [pc, #100]	; (8003a78 <vTaskStartScheduler+0x68>)
 8003a14:	2400      	movs	r4, #0
 8003a16:	2280      	movs	r2, #128	; 0x80
 8003a18:	4918      	ldr	r1, [pc, #96]	; (8003a7c <vTaskStartScheduler+0x6c>)
 8003a1a:	9301      	str	r3, [sp, #4]
 8003a1c:	4623      	mov	r3, r4
 8003a1e:	9400      	str	r4, [sp, #0]
 8003a20:	4817      	ldr	r0, [pc, #92]	; (8003a80 <vTaskStartScheduler+0x70>)
 8003a22:	f7ff ff25 	bl	8003870 <xTaskCreate>
	if( xReturn == pdPASS )
 8003a26:	2801      	cmp	r0, #1
 8003a28:	d116      	bne.n	8003a58 <vTaskStartScheduler+0x48>
 8003a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a2e:	b672      	cpsid	i
 8003a30:	f383 8811 	msr	BASEPRI, r3
 8003a34:	f3bf 8f6f 	isb	sy
 8003a38:	f3bf 8f4f 	dsb	sy
 8003a3c:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
 8003a3e:	f04f 32ff 	mov.w	r2, #4294967295
 8003a42:	4b10      	ldr	r3, [pc, #64]	; (8003a84 <vTaskStartScheduler+0x74>)
 8003a44:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003a46:	4b10      	ldr	r3, [pc, #64]	; (8003a88 <vTaskStartScheduler+0x78>)
 8003a48:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003a4a:	4b10      	ldr	r3, [pc, #64]	; (8003a8c <vTaskStartScheduler+0x7c>)
 8003a4c:	601c      	str	r4, [r3, #0]
}
 8003a4e:	b002      	add	sp, #8
 8003a50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8003a54:	f7ff bae2 	b.w	800301c <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003a58:	3001      	adds	r0, #1
 8003a5a:	d10a      	bne.n	8003a72 <vTaskStartScheduler+0x62>
 8003a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a60:	b672      	cpsid	i
 8003a62:	f383 8811 	msr	BASEPRI, r3
 8003a66:	f3bf 8f6f 	isb	sy
 8003a6a:	f3bf 8f4f 	dsb	sy
 8003a6e:	b662      	cpsie	i
 8003a70:	e7fe      	b.n	8003a70 <vTaskStartScheduler+0x60>
}
 8003a72:	b002      	add	sp, #8
 8003a74:	bd10      	pop	{r4, pc}
 8003a76:	bf00      	nop
 8003a78:	20003de0 	.word	0x20003de0
 8003a7c:	08004ad8 	.word	0x08004ad8
 8003a80:	08003db9 	.word	0x08003db9
 8003a84:	20003de4 	.word	0x20003de4
 8003a88:	20003e00 	.word	0x20003e00
 8003a8c:	20003e2c 	.word	0x20003e2c

08003a90 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8003a90:	4a02      	ldr	r2, [pc, #8]	; (8003a9c <vTaskSuspendAll+0xc>)
 8003a92:	6813      	ldr	r3, [r2, #0]
 8003a94:	3301      	adds	r3, #1
 8003a96:	6013      	str	r3, [r2, #0]
 8003a98:	4770      	bx	lr
 8003a9a:	bf00      	nop
 8003a9c:	20003dac 	.word	0x20003dac

08003aa0 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8003aa0:	4b01      	ldr	r3, [pc, #4]	; (8003aa8 <xTaskGetTickCount+0x8>)
 8003aa2:	6818      	ldr	r0, [r3, #0]
}
 8003aa4:	4770      	bx	lr
 8003aa6:	bf00      	nop
 8003aa8:	20003e2c 	.word	0x20003e2c

08003aac <xTaskIncrementTick>:
{
 8003aac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ab0:	4b3d      	ldr	r3, [pc, #244]	; (8003ba8 <xTaskIncrementTick+0xfc>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d155      	bne.n	8003b64 <xTaskIncrementTick+0xb8>
		const TickType_t xConstTickCount = xTickCount + 1;
 8003ab8:	4b3c      	ldr	r3, [pc, #240]	; (8003bac <xTaskIncrementTick+0x100>)
 8003aba:	681c      	ldr	r4, [r3, #0]
 8003abc:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8003abe:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 8003ac0:	b9cc      	cbnz	r4, 8003af6 <xTaskIncrementTick+0x4a>
			taskSWITCH_DELAYED_LISTS();
 8003ac2:	4b3b      	ldr	r3, [pc, #236]	; (8003bb0 <xTaskIncrementTick+0x104>)
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	6812      	ldr	r2, [r2, #0]
 8003ac8:	b152      	cbz	r2, 8003ae0 <xTaskIncrementTick+0x34>
 8003aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ace:	b672      	cpsid	i
 8003ad0:	f383 8811 	msr	BASEPRI, r3
 8003ad4:	f3bf 8f6f 	isb	sy
 8003ad8:	f3bf 8f4f 	dsb	sy
 8003adc:	b662      	cpsie	i
 8003ade:	e7fe      	b.n	8003ade <xTaskIncrementTick+0x32>
 8003ae0:	4a34      	ldr	r2, [pc, #208]	; (8003bb4 <xTaskIncrementTick+0x108>)
 8003ae2:	6819      	ldr	r1, [r3, #0]
 8003ae4:	6810      	ldr	r0, [r2, #0]
 8003ae6:	6018      	str	r0, [r3, #0]
 8003ae8:	6011      	str	r1, [r2, #0]
 8003aea:	4a33      	ldr	r2, [pc, #204]	; (8003bb8 <xTaskIncrementTick+0x10c>)
 8003aec:	6813      	ldr	r3, [r2, #0]
 8003aee:	3301      	adds	r3, #1
 8003af0:	6013      	str	r3, [r2, #0]
 8003af2:	f7ff fe59 	bl	80037a8 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003af6:	4d31      	ldr	r5, [pc, #196]	; (8003bbc <xTaskIncrementTick+0x110>)
 8003af8:	f04f 0b00 	mov.w	fp, #0
 8003afc:	4f30      	ldr	r7, [pc, #192]	; (8003bc0 <xTaskIncrementTick+0x114>)
 8003afe:	682b      	ldr	r3, [r5, #0]
 8003b00:	429c      	cmp	r4, r3
 8003b02:	d33e      	bcc.n	8003b82 <xTaskIncrementTick+0xd6>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b04:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8003bb0 <xTaskIncrementTick+0x104>
					prvAddTaskToReadyList( pxTCB );
 8003b08:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8003bd0 <xTaskIncrementTick+0x124>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b0c:	f8d8 2000 	ldr.w	r2, [r8]
 8003b10:	6812      	ldr	r2, [r2, #0]
 8003b12:	bb72      	cbnz	r2, 8003b72 <xTaskIncrementTick+0xc6>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b14:	f04f 32ff 	mov.w	r2, #4294967295
 8003b18:	602a      	str	r2, [r5, #0]
					break;
 8003b1a:	e032      	b.n	8003b82 <xTaskIncrementTick+0xd6>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b1c:	f106 0a04 	add.w	sl, r6, #4
 8003b20:	4650      	mov	r0, sl
 8003b22:	f7ff f96f 	bl	8002e04 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003b26:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8003b28:	b119      	cbz	r1, 8003b32 <xTaskIncrementTick+0x86>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b2a:	f106 0018 	add.w	r0, r6, #24
 8003b2e:	f7ff f969 	bl	8002e04 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003b32:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8003b34:	2201      	movs	r2, #1
 8003b36:	f8d9 3000 	ldr.w	r3, [r9]
 8003b3a:	f04f 0e14 	mov.w	lr, #20
 8003b3e:	fa02 f100 	lsl.w	r1, r2, r0
 8003b42:	4319      	orrs	r1, r3
 8003b44:	4b1f      	ldr	r3, [pc, #124]	; (8003bc4 <xTaskIncrementTick+0x118>)
 8003b46:	f8c9 1000 	str.w	r1, [r9]
 8003b4a:	4651      	mov	r1, sl
 8003b4c:	fb0e 3000 	mla	r0, lr, r0, r3
 8003b50:	f7ff f935 	bl	8002dbe <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b54:	6838      	ldr	r0, [r7, #0]
 8003b56:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8003b58:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8003b5a:	4291      	cmp	r1, r2
 8003b5c:	bf28      	it	cs
 8003b5e:	f04f 0b01 	movcs.w	fp, #1
 8003b62:	e7d3      	b.n	8003b0c <xTaskIncrementTick+0x60>
		++uxPendedTicks;
 8003b64:	4a18      	ldr	r2, [pc, #96]	; (8003bc8 <xTaskIncrementTick+0x11c>)
BaseType_t xSwitchRequired = pdFALSE;
 8003b66:	f04f 0b00 	mov.w	fp, #0
		++uxPendedTicks;
 8003b6a:	6813      	ldr	r3, [r2, #0]
 8003b6c:	3301      	adds	r3, #1
 8003b6e:	6013      	str	r3, [r2, #0]
 8003b70:	e011      	b.n	8003b96 <xTaskIncrementTick+0xea>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003b72:	f8d8 2000 	ldr.w	r2, [r8]
 8003b76:	68d2      	ldr	r2, [r2, #12]
 8003b78:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003b7a:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8003b7c:	428c      	cmp	r4, r1
 8003b7e:	d2cd      	bcs.n	8003b1c <xTaskIncrementTick+0x70>
						xNextTaskUnblockTime = xItemValue;
 8003b80:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003b82:	683a      	ldr	r2, [r7, #0]
 8003b84:	4b0f      	ldr	r3, [pc, #60]	; (8003bc4 <xTaskIncrementTick+0x118>)
 8003b86:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003b88:	2214      	movs	r2, #20
 8003b8a:	434a      	muls	r2, r1
 8003b8c:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 8003b8e:	2a02      	cmp	r2, #2
 8003b90:	bf28      	it	cs
 8003b92:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8003b96:	4a0d      	ldr	r2, [pc, #52]	; (8003bcc <xTaskIncrementTick+0x120>)
 8003b98:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8003b9a:	2a00      	cmp	r2, #0
 8003b9c:	bf18      	it	ne
 8003b9e:	f04f 0b01 	movne.w	fp, #1
}
 8003ba2:	4658      	mov	r0, fp
 8003ba4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ba8:	20003dac 	.word	0x20003dac
 8003bac:	20003e2c 	.word	0x20003e2c
 8003bb0:	20003d0c 	.word	0x20003d0c
 8003bb4:	20003d10 	.word	0x20003d10
 8003bb8:	20003de8 	.word	0x20003de8
 8003bbc:	20003de4 	.word	0x20003de4
 8003bc0:	20003d08 	.word	0x20003d08
 8003bc4:	20003d14 	.word	0x20003d14
 8003bc8:	20003da8 	.word	0x20003da8
 8003bcc:	20003e30 	.word	0x20003e30
 8003bd0:	20003db4 	.word	0x20003db4

08003bd4 <xTaskResumeAll>:
{
 8003bd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8003bd8:	4c32      	ldr	r4, [pc, #200]	; (8003ca4 <xTaskResumeAll+0xd0>)
 8003bda:	6823      	ldr	r3, [r4, #0]
 8003bdc:	b953      	cbnz	r3, 8003bf4 <xTaskResumeAll+0x20>
 8003bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be2:	b672      	cpsid	i
 8003be4:	f383 8811 	msr	BASEPRI, r3
 8003be8:	f3bf 8f6f 	isb	sy
 8003bec:	f3bf 8f4f 	dsb	sy
 8003bf0:	b662      	cpsie	i
 8003bf2:	e7fe      	b.n	8003bf2 <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
 8003bf4:	f7ff f976 	bl	8002ee4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8003bf8:	6823      	ldr	r3, [r4, #0]
 8003bfa:	3b01      	subs	r3, #1
 8003bfc:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003bfe:	6824      	ldr	r4, [r4, #0]
 8003c00:	b12c      	cbz	r4, 8003c0e <xTaskResumeAll+0x3a>
BaseType_t xAlreadyYielded = pdFALSE;
 8003c02:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8003c04:	f7ff f994 	bl	8002f30 <vPortExitCritical>
}
 8003c08:	4620      	mov	r0, r4
 8003c0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003c0e:	4b26      	ldr	r3, [pc, #152]	; (8003ca8 <xTaskResumeAll+0xd4>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d0f5      	beq.n	8003c02 <xTaskResumeAll+0x2e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c16:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8003cc0 <xTaskResumeAll+0xec>
					prvAddTaskToReadyList( pxTCB );
 8003c1a:	4f24      	ldr	r7, [pc, #144]	; (8003cac <xTaskResumeAll+0xd8>)
 8003c1c:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8003cc4 <xTaskResumeAll+0xf0>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c20:	f8d9 3000 	ldr.w	r3, [r9]
 8003c24:	b9e3      	cbnz	r3, 8003c60 <xTaskResumeAll+0x8c>
				if( pxTCB != NULL )
 8003c26:	b10c      	cbz	r4, 8003c2c <xTaskResumeAll+0x58>
					prvResetNextTaskUnblockTime();
 8003c28:	f7ff fdbe 	bl	80037a8 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003c2c:	4d20      	ldr	r5, [pc, #128]	; (8003cb0 <xTaskResumeAll+0xdc>)
 8003c2e:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003c30:	b144      	cbz	r4, 8003c44 <xTaskResumeAll+0x70>
								xYieldPending = pdTRUE;
 8003c32:	4e20      	ldr	r6, [pc, #128]	; (8003cb4 <xTaskResumeAll+0xe0>)
 8003c34:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8003c36:	f7ff ff39 	bl	8003aac <xTaskIncrementTick>
 8003c3a:	b100      	cbz	r0, 8003c3e <xTaskResumeAll+0x6a>
								xYieldPending = pdTRUE;
 8003c3c:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003c3e:	3c01      	subs	r4, #1
 8003c40:	d1f9      	bne.n	8003c36 <xTaskResumeAll+0x62>
						uxPendedTicks = 0;
 8003c42:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8003c44:	4b1b      	ldr	r3, [pc, #108]	; (8003cb4 <xTaskResumeAll+0xe0>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d0da      	beq.n	8003c02 <xTaskResumeAll+0x2e>
					taskYIELD_IF_USING_PREEMPTION();
 8003c4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c50:	4b19      	ldr	r3, [pc, #100]	; (8003cb8 <xTaskResumeAll+0xe4>)
 8003c52:	601a      	str	r2, [r3, #0]
 8003c54:	f3bf 8f4f 	dsb	sy
 8003c58:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8003c5c:	2401      	movs	r4, #1
 8003c5e:	e7d1      	b.n	8003c04 <xTaskResumeAll+0x30>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003c60:	f8d9 300c 	ldr.w	r3, [r9, #12]
					prvAddTaskToReadyList( pxTCB );
 8003c64:	2501      	movs	r5, #1
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003c66:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c68:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c6a:	f104 0018 	add.w	r0, r4, #24
 8003c6e:	f7ff f8c9 	bl	8002e04 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c72:	4630      	mov	r0, r6
 8003c74:	f7ff f8c6 	bl	8002e04 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003c78:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003c7a:	6839      	ldr	r1, [r7, #0]
 8003c7c:	2014      	movs	r0, #20
 8003c7e:	fa05 f302 	lsl.w	r3, r5, r2
 8003c82:	fb00 8002 	mla	r0, r0, r2, r8
 8003c86:	430b      	orrs	r3, r1
 8003c88:	4631      	mov	r1, r6
 8003c8a:	603b      	str	r3, [r7, #0]
 8003c8c:	f7ff f897 	bl	8002dbe <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c90:	4b0a      	ldr	r3, [pc, #40]	; (8003cbc <xTaskResumeAll+0xe8>)
 8003c92:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d3c1      	bcc.n	8003c20 <xTaskResumeAll+0x4c>
						xYieldPending = pdTRUE;
 8003c9c:	4b05      	ldr	r3, [pc, #20]	; (8003cb4 <xTaskResumeAll+0xe0>)
 8003c9e:	601d      	str	r5, [r3, #0]
 8003ca0:	e7be      	b.n	8003c20 <xTaskResumeAll+0x4c>
 8003ca2:	bf00      	nop
 8003ca4:	20003dac 	.word	0x20003dac
 8003ca8:	20003da0 	.word	0x20003da0
 8003cac:	20003db4 	.word	0x20003db4
 8003cb0:	20003da8 	.word	0x20003da8
 8003cb4:	20003e30 	.word	0x20003e30
 8003cb8:	e000ed04 	.word	0xe000ed04
 8003cbc:	20003d08 	.word	0x20003d08
 8003cc0:	20003dec 	.word	0x20003dec
 8003cc4:	20003d14 	.word	0x20003d14

08003cc8 <vTaskDelayUntil>:
	{
 8003cc8:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxPreviousWakeTime );
 8003cca:	b950      	cbnz	r0, 8003ce2 <vTaskDelayUntil+0x1a>
 8003ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd0:	b672      	cpsid	i
 8003cd2:	f383 8811 	msr	BASEPRI, r3
 8003cd6:	f3bf 8f6f 	isb	sy
 8003cda:	f3bf 8f4f 	dsb	sy
 8003cde:	b662      	cpsie	i
 8003ce0:	e7fe      	b.n	8003ce0 <vTaskDelayUntil+0x18>
		configASSERT( ( xTimeIncrement > 0U ) );
 8003ce2:	b951      	cbnz	r1, 8003cfa <vTaskDelayUntil+0x32>
 8003ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ce8:	b672      	cpsid	i
 8003cea:	f383 8811 	msr	BASEPRI, r3
 8003cee:	f3bf 8f6f 	isb	sy
 8003cf2:	f3bf 8f4f 	dsb	sy
 8003cf6:	b662      	cpsie	i
 8003cf8:	e7fe      	b.n	8003cf8 <vTaskDelayUntil+0x30>
		configASSERT( uxSchedulerSuspended == 0 );
 8003cfa:	4b19      	ldr	r3, [pc, #100]	; (8003d60 <vTaskDelayUntil+0x98>)
 8003cfc:	681c      	ldr	r4, [r3, #0]
 8003cfe:	b154      	cbz	r4, 8003d16 <vTaskDelayUntil+0x4e>
 8003d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d04:	b672      	cpsid	i
 8003d06:	f383 8811 	msr	BASEPRI, r3
 8003d0a:	f3bf 8f6f 	isb	sy
 8003d0e:	f3bf 8f4f 	dsb	sy
 8003d12:	b662      	cpsie	i
 8003d14:	e7fe      	b.n	8003d14 <vTaskDelayUntil+0x4c>
		vTaskSuspendAll();
 8003d16:	f7ff febb 	bl	8003a90 <vTaskSuspendAll>
			const TickType_t xConstTickCount = xTickCount;
 8003d1a:	4b12      	ldr	r3, [pc, #72]	; (8003d64 <vTaskDelayUntil+0x9c>)
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8003d1c:	6802      	ldr	r2, [r0, #0]
			const TickType_t xConstTickCount = xTickCount;
 8003d1e:	681d      	ldr	r5, [r3, #0]
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8003d20:	188b      	adds	r3, r1, r2
			if( xConstTickCount < *pxPreviousWakeTime )
 8003d22:	4295      	cmp	r5, r2
 8003d24:	d217      	bcs.n	8003d56 <vTaskDelayUntil+0x8e>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d903      	bls.n	8003d32 <vTaskDelayUntil+0x6a>
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8003d2a:	429d      	cmp	r5, r3
 8003d2c:	bf2c      	ite	cs
 8003d2e:	2400      	movcs	r4, #0
 8003d30:	2401      	movcc	r4, #1
			*pxPreviousWakeTime = xTimeToWake;
 8003d32:	6003      	str	r3, [r0, #0]
			if( xShouldDelay != pdFALSE )
 8003d34:	b11c      	cbz	r4, 8003d3e <vTaskDelayUntil+0x76>
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8003d36:	2100      	movs	r1, #0
 8003d38:	1b58      	subs	r0, r3, r5
 8003d3a:	f7ff fd47 	bl	80037cc <prvAddCurrentTaskToDelayedList>
		xAlreadyYielded = xTaskResumeAll();
 8003d3e:	f7ff ff49 	bl	8003bd4 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8003d42:	b938      	cbnz	r0, 8003d54 <vTaskDelayUntil+0x8c>
			portYIELD_WITHIN_API();
 8003d44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d48:	4b07      	ldr	r3, [pc, #28]	; (8003d68 <vTaskDelayUntil+0xa0>)
 8003d4a:	601a      	str	r2, [r3, #0]
 8003d4c:	f3bf 8f4f 	dsb	sy
 8003d50:	f3bf 8f6f 	isb	sy
 8003d54:	bd38      	pop	{r3, r4, r5, pc}
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d9e7      	bls.n	8003d2a <vTaskDelayUntil+0x62>
					xShouldDelay = pdTRUE;
 8003d5a:	2401      	movs	r4, #1
 8003d5c:	e7e9      	b.n	8003d32 <vTaskDelayUntil+0x6a>
 8003d5e:	bf00      	nop
 8003d60:	20003dac 	.word	0x20003dac
 8003d64:	20003e2c 	.word	0x20003e2c
 8003d68:	e000ed04 	.word	0xe000ed04

08003d6c <vTaskDelay>:
	{
 8003d6c:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003d6e:	b940      	cbnz	r0, 8003d82 <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8003d70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d74:	4b0e      	ldr	r3, [pc, #56]	; (8003db0 <vTaskDelay+0x44>)
 8003d76:	601a      	str	r2, [r3, #0]
 8003d78:	f3bf 8f4f 	dsb	sy
 8003d7c:	f3bf 8f6f 	isb	sy
 8003d80:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8003d82:	4b0c      	ldr	r3, [pc, #48]	; (8003db4 <vTaskDelay+0x48>)
 8003d84:	6819      	ldr	r1, [r3, #0]
 8003d86:	b151      	cbz	r1, 8003d9e <vTaskDelay+0x32>
 8003d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d8c:	b672      	cpsid	i
 8003d8e:	f383 8811 	msr	BASEPRI, r3
 8003d92:	f3bf 8f6f 	isb	sy
 8003d96:	f3bf 8f4f 	dsb	sy
 8003d9a:	b662      	cpsie	i
 8003d9c:	e7fe      	b.n	8003d9c <vTaskDelay+0x30>
			vTaskSuspendAll();
 8003d9e:	f7ff fe77 	bl	8003a90 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003da2:	f7ff fd13 	bl	80037cc <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8003da6:	f7ff ff15 	bl	8003bd4 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8003daa:	2800      	cmp	r0, #0
 8003dac:	d0e0      	beq.n	8003d70 <vTaskDelay+0x4>
 8003dae:	bd08      	pop	{r3, pc}
 8003db0:	e000ed04 	.word	0xe000ed04
 8003db4:	20003dac 	.word	0x20003dac

08003db8 <prvIdleTask>:
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8003db8:	4e17      	ldr	r6, [pc, #92]	; (8003e18 <prvIdleTask+0x60>)
{
 8003dba:	b508      	push	{r3, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003dbc:	4c17      	ldr	r4, [pc, #92]	; (8003e1c <prvIdleTask+0x64>)
 8003dbe:	6823      	ldr	r3, [r4, #0]
 8003dc0:	b963      	cbnz	r3, 8003ddc <prvIdleTask+0x24>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003dc2:	4b17      	ldr	r3, [pc, #92]	; (8003e20 <prvIdleTask+0x68>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d9f8      	bls.n	8003dbc <prvIdleTask+0x4>
				taskYIELD();
 8003dca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dce:	4b15      	ldr	r3, [pc, #84]	; (8003e24 <prvIdleTask+0x6c>)
 8003dd0:	601a      	str	r2, [r3, #0]
 8003dd2:	f3bf 8f4f 	dsb	sy
 8003dd6:	f3bf 8f6f 	isb	sy
 8003dda:	e7ef      	b.n	8003dbc <prvIdleTask+0x4>
			vTaskSuspendAll();
 8003ddc:	f7ff fe58 	bl	8003a90 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8003de0:	6835      	ldr	r5, [r6, #0]
			( void ) xTaskResumeAll();
 8003de2:	f7ff fef7 	bl	8003bd4 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 8003de6:	2d00      	cmp	r5, #0
 8003de8:	d0e9      	beq.n	8003dbe <prvIdleTask+0x6>
				taskENTER_CRITICAL();
 8003dea:	f7ff f87b 	bl	8002ee4 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003dee:	68f3      	ldr	r3, [r6, #12]
 8003df0:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003df2:	1d28      	adds	r0, r5, #4
 8003df4:	f7ff f806 	bl	8002e04 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8003df8:	4a0b      	ldr	r2, [pc, #44]	; (8003e28 <prvIdleTask+0x70>)
 8003dfa:	6813      	ldr	r3, [r2, #0]
 8003dfc:	3b01      	subs	r3, #1
 8003dfe:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8003e00:	6823      	ldr	r3, [r4, #0]
 8003e02:	3b01      	subs	r3, #1
 8003e04:	6023      	str	r3, [r4, #0]
				taskEXIT_CRITICAL();
 8003e06:	f7ff f893 	bl	8002f30 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 8003e0a:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8003e0c:	f7ff fa10 	bl	8003230 <vPortFree>
			vPortFree( pxTCB );
 8003e10:	4628      	mov	r0, r5
 8003e12:	f7ff fa0d 	bl	8003230 <vPortFree>
 8003e16:	e7d2      	b.n	8003dbe <prvIdleTask+0x6>
 8003e18:	20003e18 	.word	0x20003e18
 8003e1c:	20003da4 	.word	0x20003da4
 8003e20:	20003d14 	.word	0x20003d14
 8003e24:	e000ed04 	.word	0xe000ed04
 8003e28:	20003da0 	.word	0x20003da0

08003e2c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003e2c:	4b18      	ldr	r3, [pc, #96]	; (8003e90 <vTaskSwitchContext+0x64>)
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	4b18      	ldr	r3, [pc, #96]	; (8003e94 <vTaskSwitchContext+0x68>)
{
 8003e32:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003e34:	b112      	cbz	r2, 8003e3c <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8003e36:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003e38:	601a      	str	r2, [r3, #0]
 8003e3a:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8003e3c:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003e3e:	4b16      	ldr	r3, [pc, #88]	; (8003e98 <vTaskSwitchContext+0x6c>)
 8003e40:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8003e42:	fab3 f383 	clz	r3, r3
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	2214      	movs	r2, #20
 8003e4a:	4914      	ldr	r1, [pc, #80]	; (8003e9c <vTaskSwitchContext+0x70>)
 8003e4c:	f1c3 031f 	rsb	r3, r3, #31
 8003e50:	435a      	muls	r2, r3
 8003e52:	588c      	ldr	r4, [r1, r2]
 8003e54:	1888      	adds	r0, r1, r2
 8003e56:	b954      	cbnz	r4, 8003e6e <vTaskSwitchContext+0x42>
	__asm volatile
 8003e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e5c:	b672      	cpsid	i
 8003e5e:	f383 8811 	msr	BASEPRI, r3
 8003e62:	f3bf 8f6f 	isb	sy
 8003e66:	f3bf 8f4f 	dsb	sy
 8003e6a:	b662      	cpsie	i
 8003e6c:	e7fe      	b.n	8003e6c <vTaskSwitchContext+0x40>
 8003e6e:	6844      	ldr	r4, [r0, #4]
 8003e70:	3208      	adds	r2, #8
 8003e72:	6864      	ldr	r4, [r4, #4]
 8003e74:	440a      	add	r2, r1
 8003e76:	4294      	cmp	r4, r2
 8003e78:	6044      	str	r4, [r0, #4]
 8003e7a:	bf04      	itt	eq
 8003e7c:	6862      	ldreq	r2, [r4, #4]
 8003e7e:	6042      	streq	r2, [r0, #4]
 8003e80:	2214      	movs	r2, #20
 8003e82:	fb02 1303 	mla	r3, r2, r3, r1
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	68da      	ldr	r2, [r3, #12]
 8003e8a:	4b05      	ldr	r3, [pc, #20]	; (8003ea0 <vTaskSwitchContext+0x74>)
 8003e8c:	e7d4      	b.n	8003e38 <vTaskSwitchContext+0xc>
 8003e8e:	bf00      	nop
 8003e90:	20003dac 	.word	0x20003dac
 8003e94:	20003e30 	.word	0x20003e30
 8003e98:	20003db4 	.word	0x20003db4
 8003e9c:	20003d14 	.word	0x20003d14
 8003ea0:	20003d08 	.word	0x20003d08

08003ea4 <vTaskPlaceOnEventList>:
{
 8003ea4:	b510      	push	{r4, lr}
 8003ea6:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8003ea8:	b950      	cbnz	r0, 8003ec0 <vTaskPlaceOnEventList+0x1c>
 8003eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eae:	b672      	cpsid	i
 8003eb0:	f383 8811 	msr	BASEPRI, r3
 8003eb4:	f3bf 8f6f 	isb	sy
 8003eb8:	f3bf 8f4f 	dsb	sy
 8003ebc:	b662      	cpsie	i
 8003ebe:	e7fe      	b.n	8003ebe <vTaskPlaceOnEventList+0x1a>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003ec0:	4b05      	ldr	r3, [pc, #20]	; (8003ed8 <vTaskPlaceOnEventList+0x34>)
 8003ec2:	6819      	ldr	r1, [r3, #0]
 8003ec4:	3118      	adds	r1, #24
 8003ec6:	f7fe ff86 	bl	8002dd6 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003eca:	4620      	mov	r0, r4
 8003ecc:	2101      	movs	r1, #1
}
 8003ece:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003ed2:	f7ff bc7b 	b.w	80037cc <prvAddCurrentTaskToDelayedList>
 8003ed6:	bf00      	nop
 8003ed8:	20003d08 	.word	0x20003d08

08003edc <xTaskRemoveFromEventList>:
{
 8003edc:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003ede:	68c3      	ldr	r3, [r0, #12]
 8003ee0:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8003ee2:	b954      	cbnz	r4, 8003efa <xTaskRemoveFromEventList+0x1e>
 8003ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ee8:	b672      	cpsid	i
 8003eea:	f383 8811 	msr	BASEPRI, r3
 8003eee:	f3bf 8f6f 	isb	sy
 8003ef2:	f3bf 8f4f 	dsb	sy
 8003ef6:	b662      	cpsie	i
 8003ef8:	e7fe      	b.n	8003ef8 <xTaskRemoveFromEventList+0x1c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003efa:	f104 0518 	add.w	r5, r4, #24
 8003efe:	4628      	mov	r0, r5
 8003f00:	f7fe ff80 	bl	8002e04 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f04:	4b11      	ldr	r3, [pc, #68]	; (8003f4c <xTaskRemoveFromEventList+0x70>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	b9db      	cbnz	r3, 8003f42 <xTaskRemoveFromEventList+0x66>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003f0a:	1d25      	adds	r5, r4, #4
 8003f0c:	4628      	mov	r0, r5
 8003f0e:	f7fe ff79 	bl	8002e04 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003f12:	490f      	ldr	r1, [pc, #60]	; (8003f50 <xTaskRemoveFromEventList+0x74>)
 8003f14:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003f16:	2301      	movs	r3, #1
 8003f18:	6808      	ldr	r0, [r1, #0]
 8003f1a:	4093      	lsls	r3, r2
 8003f1c:	4303      	orrs	r3, r0
 8003f1e:	2014      	movs	r0, #20
 8003f20:	600b      	str	r3, [r1, #0]
 8003f22:	4629      	mov	r1, r5
 8003f24:	4b0b      	ldr	r3, [pc, #44]	; (8003f54 <xTaskRemoveFromEventList+0x78>)
 8003f26:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003f2a:	f7fe ff48 	bl	8002dbe <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003f2e:	4b0a      	ldr	r3, [pc, #40]	; (8003f58 <xTaskRemoveFromEventList+0x7c>)
 8003f30:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d906      	bls.n	8003f48 <xTaskRemoveFromEventList+0x6c>
		xYieldPending = pdTRUE;
 8003f3a:	2001      	movs	r0, #1
 8003f3c:	4b07      	ldr	r3, [pc, #28]	; (8003f5c <xTaskRemoveFromEventList+0x80>)
 8003f3e:	6018      	str	r0, [r3, #0]
 8003f40:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003f42:	4629      	mov	r1, r5
 8003f44:	4806      	ldr	r0, [pc, #24]	; (8003f60 <xTaskRemoveFromEventList+0x84>)
 8003f46:	e7f0      	b.n	8003f2a <xTaskRemoveFromEventList+0x4e>
		xReturn = pdFALSE;
 8003f48:	2000      	movs	r0, #0
}
 8003f4a:	bd38      	pop	{r3, r4, r5, pc}
 8003f4c:	20003dac 	.word	0x20003dac
 8003f50:	20003db4 	.word	0x20003db4
 8003f54:	20003d14 	.word	0x20003d14
 8003f58:	20003d08 	.word	0x20003d08
 8003f5c:	20003e30 	.word	0x20003e30
 8003f60:	20003dec 	.word	0x20003dec

08003f64 <vTaskSetTimeOutState>:
{
 8003f64:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
 8003f66:	b908      	cbnz	r0, 8003f6c <vTaskSetTimeOutState+0x8>
 8003f68:	f7ff fc76 	bl	8003858 <prvTaskIsTaskSuspended.part.0>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003f6c:	4b03      	ldr	r3, [pc, #12]	; (8003f7c <vTaskSetTimeOutState+0x18>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003f72:	4b03      	ldr	r3, [pc, #12]	; (8003f80 <vTaskSetTimeOutState+0x1c>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	6043      	str	r3, [r0, #4]
 8003f78:	bd08      	pop	{r3, pc}
 8003f7a:	bf00      	nop
 8003f7c:	20003de8 	.word	0x20003de8
 8003f80:	20003e2c 	.word	0x20003e2c

08003f84 <xTaskCheckForTimeOut>:
{
 8003f84:	b538      	push	{r3, r4, r5, lr}
 8003f86:	460d      	mov	r5, r1
	configASSERT( pxTimeOut );
 8003f88:	4604      	mov	r4, r0
 8003f8a:	b950      	cbnz	r0, 8003fa2 <xTaskCheckForTimeOut+0x1e>
 8003f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f90:	b672      	cpsid	i
 8003f92:	f383 8811 	msr	BASEPRI, r3
 8003f96:	f3bf 8f6f 	isb	sy
 8003f9a:	f3bf 8f4f 	dsb	sy
 8003f9e:	b662      	cpsie	i
 8003fa0:	e7fe      	b.n	8003fa0 <xTaskCheckForTimeOut+0x1c>
	configASSERT( pxTicksToWait );
 8003fa2:	b951      	cbnz	r1, 8003fba <xTaskCheckForTimeOut+0x36>
 8003fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fa8:	b672      	cpsid	i
 8003faa:	f383 8811 	msr	BASEPRI, r3
 8003fae:	f3bf 8f6f 	isb	sy
 8003fb2:	f3bf 8f4f 	dsb	sy
 8003fb6:	b662      	cpsie	i
 8003fb8:	e7fe      	b.n	8003fb8 <xTaskCheckForTimeOut+0x34>
	taskENTER_CRITICAL();
 8003fba:	f7fe ff93 	bl	8002ee4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8003fbe:	4b0e      	ldr	r3, [pc, #56]	; (8003ff8 <xTaskCheckForTimeOut+0x74>)
 8003fc0:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8003fc2:	682b      	ldr	r3, [r5, #0]
 8003fc4:	1c5a      	adds	r2, r3, #1
 8003fc6:	d010      	beq.n	8003fea <xTaskCheckForTimeOut+0x66>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003fc8:	4a0c      	ldr	r2, [pc, #48]	; (8003ffc <xTaskCheckForTimeOut+0x78>)
 8003fca:	6820      	ldr	r0, [r4, #0]
 8003fcc:	6812      	ldr	r2, [r2, #0]
 8003fce:	4290      	cmp	r0, r2
 8003fd0:	6862      	ldr	r2, [r4, #4]
 8003fd2:	d001      	beq.n	8003fd8 <xTaskCheckForTimeOut+0x54>
 8003fd4:	4291      	cmp	r1, r2
 8003fd6:	d20d      	bcs.n	8003ff4 <xTaskCheckForTimeOut+0x70>
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003fd8:	1a88      	subs	r0, r1, r2
 8003fda:	4283      	cmp	r3, r0
 8003fdc:	d90a      	bls.n	8003ff4 <xTaskCheckForTimeOut+0x70>
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8003fde:	1a5b      	subs	r3, r3, r1
			vTaskSetTimeOutState( pxTimeOut );
 8003fe0:	4620      	mov	r0, r4
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8003fe2:	4413      	add	r3, r2
 8003fe4:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8003fe6:	f7ff ffbd 	bl	8003f64 <vTaskSetTimeOutState>
				xReturn = pdFALSE;
 8003fea:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8003fec:	f7fe ffa0 	bl	8002f30 <vPortExitCritical>
}
 8003ff0:	4620      	mov	r0, r4
 8003ff2:	bd38      	pop	{r3, r4, r5, pc}
			xReturn = pdTRUE;
 8003ff4:	2401      	movs	r4, #1
 8003ff6:	e7f9      	b.n	8003fec <xTaskCheckForTimeOut+0x68>
 8003ff8:	20003e2c 	.word	0x20003e2c
 8003ffc:	20003de8 	.word	0x20003de8

08004000 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8004000:	2201      	movs	r2, #1
 8004002:	4b01      	ldr	r3, [pc, #4]	; (8004008 <vTaskMissedYield+0x8>)
 8004004:	601a      	str	r2, [r3, #0]
 8004006:	4770      	bx	lr
 8004008:	20003e30 	.word	0x20003e30

0800400c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800400c:	4b05      	ldr	r3, [pc, #20]	; (8004024 <xTaskGetSchedulerState+0x18>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	b133      	cbz	r3, 8004020 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004012:	4b05      	ldr	r3, [pc, #20]	; (8004028 <xTaskGetSchedulerState+0x1c>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8004018:	bf0c      	ite	eq
 800401a:	2002      	moveq	r0, #2
 800401c:	2000      	movne	r0, #0
 800401e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004020:	2001      	movs	r0, #1
	}
 8004022:	4770      	bx	lr
 8004024:	20003e00 	.word	0x20003e00
 8004028:	20003dac 	.word	0x20003dac

0800402c <vTaskPriorityInherit>:
	{
 800402c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxMutexHolder != NULL )
 8004030:	4604      	mov	r4, r0
 8004032:	2800      	cmp	r0, #0
 8004034:	d038      	beq.n	80040a8 <vTaskPriorityInherit+0x7c>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004036:	4d1d      	ldr	r5, [pc, #116]	; (80040ac <vTaskPriorityInherit+0x80>)
 8004038:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800403a:	682a      	ldr	r2, [r5, #0]
 800403c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800403e:	4293      	cmp	r3, r2
 8004040:	d232      	bcs.n	80040a8 <vTaskPriorityInherit+0x7c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004042:	6982      	ldr	r2, [r0, #24]
 8004044:	2a00      	cmp	r2, #0
 8004046:	db04      	blt.n	8004052 <vTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004048:	682a      	ldr	r2, [r5, #0]
 800404a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800404c:	f1c2 0207 	rsb	r2, r2, #7
 8004050:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004052:	4e17      	ldr	r6, [pc, #92]	; (80040b0 <vTaskPriorityInherit+0x84>)
 8004054:	2714      	movs	r7, #20
 8004056:	6962      	ldr	r2, [r4, #20]
 8004058:	fb07 6303 	mla	r3, r7, r3, r6
 800405c:	429a      	cmp	r2, r3
 800405e:	d120      	bne.n	80040a2 <vTaskPriorityInherit+0x76>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004060:	f104 0804 	add.w	r8, r4, #4
 8004064:	4640      	mov	r0, r8
 8004066:	f7fe fecd 	bl	8002e04 <uxListRemove>
 800406a:	4a12      	ldr	r2, [pc, #72]	; (80040b4 <vTaskPriorityInherit+0x88>)
 800406c:	b948      	cbnz	r0, 8004082 <vTaskPriorityInherit+0x56>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800406e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8004070:	4347      	muls	r7, r0
 8004072:	59f3      	ldr	r3, [r6, r7]
 8004074:	b92b      	cbnz	r3, 8004082 <vTaskPriorityInherit+0x56>
 8004076:	2101      	movs	r1, #1
 8004078:	6813      	ldr	r3, [r2, #0]
 800407a:	4081      	lsls	r1, r0
 800407c:	ea23 0301 	bic.w	r3, r3, r1
 8004080:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004082:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxTCB );
 8004084:	6811      	ldr	r1, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004086:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8004088:	2301      	movs	r3, #1
 800408a:	4083      	lsls	r3, r0
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800408c:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800408e:	430b      	orrs	r3, r1
 8004090:	4641      	mov	r1, r8
 8004092:	6013      	str	r3, [r2, #0]
 8004094:	2314      	movs	r3, #20
 8004096:	fb03 6000 	mla	r0, r3, r0, r6
	}
 800409a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					prvAddTaskToReadyList( pxTCB );
 800409e:	f7fe be8e 	b.w	8002dbe <vListInsertEnd>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80040a2:	682b      	ldr	r3, [r5, #0]
 80040a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80040a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040ac:	20003d08 	.word	0x20003d08
 80040b0:	20003d14 	.word	0x20003d14
 80040b4:	20003db4 	.word	0x20003db4

080040b8 <xTaskPriorityDisinherit>:
	{
 80040b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 80040ba:	4604      	mov	r4, r0
 80040bc:	b908      	cbnz	r0, 80040c2 <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 80040be:	2000      	movs	r0, #0
 80040c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 80040c2:	4b24      	ldr	r3, [pc, #144]	; (8004154 <xTaskPriorityDisinherit+0x9c>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4298      	cmp	r0, r3
 80040c8:	d00a      	beq.n	80040e0 <xTaskPriorityDisinherit+0x28>
 80040ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ce:	b672      	cpsid	i
 80040d0:	f383 8811 	msr	BASEPRI, r3
 80040d4:	f3bf 8f6f 	isb	sy
 80040d8:	f3bf 8f4f 	dsb	sy
 80040dc:	b662      	cpsie	i
 80040de:	e7fe      	b.n	80040de <xTaskPriorityDisinherit+0x26>
			configASSERT( pxTCB->uxMutexesHeld );
 80040e0:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80040e2:	b953      	cbnz	r3, 80040fa <xTaskPriorityDisinherit+0x42>
 80040e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040e8:	b672      	cpsid	i
 80040ea:	f383 8811 	msr	BASEPRI, r3
 80040ee:	f3bf 8f6f 	isb	sy
 80040f2:	f3bf 8f4f 	dsb	sy
 80040f6:	b662      	cpsie	i
 80040f8:	e7fe      	b.n	80040f8 <xTaskPriorityDisinherit+0x40>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80040fa:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 80040fc:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80040fe:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 8004100:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004102:	4291      	cmp	r1, r2
 8004104:	d0db      	beq.n	80040be <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004106:	2b00      	cmp	r3, #0
 8004108:	d1d9      	bne.n	80040be <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800410a:	1d05      	adds	r5, r0, #4
 800410c:	4e12      	ldr	r6, [pc, #72]	; (8004158 <xTaskPriorityDisinherit+0xa0>)
 800410e:	4628      	mov	r0, r5
 8004110:	f7fe fe78 	bl	8002e04 <uxListRemove>
 8004114:	4a11      	ldr	r2, [pc, #68]	; (800415c <xTaskPriorityDisinherit+0xa4>)
 8004116:	b950      	cbnz	r0, 800412e <xTaskPriorityDisinherit+0x76>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004118:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800411a:	2114      	movs	r1, #20
 800411c:	4379      	muls	r1, r7
 800411e:	5873      	ldr	r3, [r6, r1]
 8004120:	b92b      	cbnz	r3, 800412e <xTaskPriorityDisinherit+0x76>
 8004122:	2001      	movs	r0, #1
 8004124:	6813      	ldr	r3, [r2, #0]
 8004126:	40b8      	lsls	r0, r7
 8004128:	ea23 0300 	bic.w	r3, r3, r0
 800412c:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800412e:	6c63      	ldr	r3, [r4, #68]	; 0x44
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004130:	f1c3 0107 	rsb	r1, r3, #7
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004134:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004136:	61a1      	str	r1, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8004138:	2401      	movs	r4, #1
 800413a:	6811      	ldr	r1, [r2, #0]
 800413c:	fa04 f003 	lsl.w	r0, r4, r3
 8004140:	4308      	orrs	r0, r1
 8004142:	4629      	mov	r1, r5
 8004144:	6010      	str	r0, [r2, #0]
 8004146:	2014      	movs	r0, #20
 8004148:	fb00 6003 	mla	r0, r0, r3, r6
 800414c:	f7fe fe37 	bl	8002dbe <vListInsertEnd>
					xReturn = pdTRUE;
 8004150:	4620      	mov	r0, r4
	}
 8004152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004154:	20003d08 	.word	0x20003d08
 8004158:	20003d14 	.word	0x20003d14
 800415c:	20003db4 	.word	0x20003db4

08004160 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8004160:	4b04      	ldr	r3, [pc, #16]	; (8004174 <pvTaskIncrementMutexHeldCount+0x14>)
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	b11a      	cbz	r2, 800416e <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8004166:	6819      	ldr	r1, [r3, #0]
 8004168:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 800416a:	3201      	adds	r2, #1
 800416c:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 800416e:	6818      	ldr	r0, [r3, #0]
	}
 8004170:	4770      	bx	lr
 8004172:	bf00      	nop
 8004174:	20003d08 	.word	0x20003d08

08004178 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8004178:	b513      	push	{r0, r1, r4, lr}
   uint8_t MACAddr[6] ;

  heth.Instance = ETH;
 800417a:	4b18      	ldr	r3, [pc, #96]	; (80041dc <MX_ETH_Init+0x64>)
  MACAddr[0] = 0x00;
  MACAddr[1] = 0x80;
 800417c:	2280      	movs	r2, #128	; 0x80
  heth.Instance = ETH;
 800417e:	4818      	ldr	r0, [pc, #96]	; (80041e0 <MX_ETH_Init+0x68>)
  MACAddr[1] = 0x80;
 8004180:	f88d 2001 	strb.w	r2, [sp, #1]
  MACAddr[2] = 0xE1;
 8004184:	22e1      	movs	r2, #225	; 0xe1
  heth.Instance = ETH;
 8004186:	6003      	str	r3, [r0, #0]
  MACAddr[0] = 0x00;
 8004188:	2300      	movs	r3, #0
  MACAddr[2] = 0xE1;
 800418a:	f88d 2002 	strb.w	r2, [sp, #2]
  MACAddr[0] = 0x00;
 800418e:	f88d 3000 	strb.w	r3, [sp]
  MACAddr[3] = 0x00;
 8004192:	f88d 3003 	strb.w	r3, [sp, #3]
  MACAddr[4] = 0x00;
 8004196:	f88d 3004 	strb.w	r3, [sp, #4]
  MACAddr[5] = 0x00;
 800419a:	f88d 3005 	strb.w	r3, [sp, #5]
  heth.Init.MACAddr = &MACAddr[0];
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800419e:	2301      	movs	r3, #1
  heth.Init.MACAddr = &MACAddr[0];
 80041a0:	f8c0 d004 	str.w	sp, [r0, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80041a4:	7203      	strb	r3, [r0, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80041a6:	4b0f      	ldr	r3, [pc, #60]	; (80041e4 <MX_ETH_Init+0x6c>)
 80041a8:	60c3      	str	r3, [r0, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80041aa:	4b0f      	ldr	r3, [pc, #60]	; (80041e8 <MX_ETH_Init+0x70>)
 80041ac:	6103      	str	r3, [r0, #16]
  heth.Init.RxBuffLen = 1524;
 80041ae:	f240 53f4 	movw	r3, #1524	; 0x5f4
 80041b2:	6143      	str	r3, [r0, #20]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80041b4:	f7fc fa94 	bl	80006e0 <HAL_ETH_Init>
 80041b8:	b118      	cbz	r0, 80041c2 <MX_ETH_Init+0x4a>
  {
    _Error_Handler(__FILE__, __LINE__);
 80041ba:	216e      	movs	r1, #110	; 0x6e
 80041bc:	480b      	ldr	r0, [pc, #44]	; (80041ec <MX_ETH_Init+0x74>)
 80041be:	f000 fa6f 	bl	80046a0 <_Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80041c2:	4c0b      	ldr	r4, [pc, #44]	; (80041f0 <MX_ETH_Init+0x78>)
 80041c4:	2234      	movs	r2, #52	; 0x34
 80041c6:	2100      	movs	r1, #0
 80041c8:	4620      	mov	r0, r4
 80041ca:	f000 fc66 	bl	8004a9a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80041ce:	2321      	movs	r3, #33	; 0x21
 80041d0:	6023      	str	r3, [r4, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80041d2:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80041d6:	6163      	str	r3, [r4, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;

}
 80041d8:	b002      	add	sp, #8
 80041da:	bd10      	pop	{r4, pc}
 80041dc:	40028000 	.word	0x40028000
 80041e0:	20003e4c 	.word	0x20003e4c
 80041e4:	2000006c 	.word	0x2000006c
 80041e8:	2000000c 	.word	0x2000000c
 80041ec:	08004add 	.word	0x08004add
 80041f0:	20003eb4 	.word	0x20003eb4

080041f4 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(ethHandle->Instance==ETH)
 80041f4:	6802      	ldr	r2, [r0, #0]
 80041f6:	4b27      	ldr	r3, [pc, #156]	; (8004294 <HAL_ETH_MspInit+0xa0>)
 80041f8:	429a      	cmp	r2, r3
{
 80041fa:	b570      	push	{r4, r5, r6, lr}
 80041fc:	b088      	sub	sp, #32
  if(ethHandle->Instance==ETH)
 80041fe:	d146      	bne.n	800428e <HAL_ETH_MspInit+0x9a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8004200:	4b25      	ldr	r3, [pc, #148]	; (8004298 <HAL_ETH_MspInit+0xa4>)
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004202:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004204:	2602      	movs	r6, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004206:	250b      	movs	r5, #11
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8004208:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800420c:	a903      	add	r1, sp, #12
 800420e:	4823      	ldr	r0, [pc, #140]	; (800429c <HAL_ETH_MspInit+0xa8>)
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8004210:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004214:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8004218:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 800421c:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8004220:	9200      	str	r2, [sp, #0]
 8004222:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8004224:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8004228:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800422c:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8004230:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8004234:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 8004238:	9201      	str	r2, [sp, #4]
 800423a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800423c:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8004240:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004244:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8004248:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800424c:	9604      	str	r6, [sp, #16]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800424e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004252:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004254:	9406      	str	r4, [sp, #24]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8004256:	9302      	str	r3, [sp, #8]
 8004258:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800425a:	2332      	movs	r3, #50	; 0x32
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800425c:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800425e:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004260:	f7fc fb80 	bl	8000964 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8004264:	2386      	movs	r3, #134	; 0x86
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004266:	a903      	add	r1, sp, #12
 8004268:	480d      	ldr	r0, [pc, #52]	; (80042a0 <HAL_ETH_MspInit+0xac>)
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800426a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800426c:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800426e:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004270:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004272:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004274:	f7fc fb76 	bl	8000964 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8004278:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800427c:	a903      	add	r1, sp, #12
 800427e:	4809      	ldr	r0, [pc, #36]	; (80042a4 <HAL_ETH_MspInit+0xb0>)
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8004280:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004282:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004284:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004286:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004288:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800428a:	f7fc fb6b 	bl	8000964 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800428e:	b008      	add	sp, #32
 8004290:	bd70      	pop	{r4, r5, r6, pc}
 8004292:	bf00      	nop
 8004294:	40028000 	.word	0x40028000
 8004298:	58024400 	.word	0x58024400
 800429c:	58020800 	.word	0x58020800
 80042a0:	58020000 	.word	0x58020000
 80042a4:	58020400 	.word	0x58020400

080042a8 <StartDefaultTask>:
  /* USER CODE END RTOS_QUEUES */
}

/* StartDefaultTask function */
void StartDefaultTask(void const * argument)
{
 80042a8:	b508      	push	{r3, lr}

  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80042aa:	2001      	movs	r0, #1
 80042ac:	f7fe fd67 	bl	8002d7e <osDelay>
 80042b0:	e7fb      	b.n	80042aa <StartDefaultTask+0x2>
	...

080042b4 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 80042b4:	b530      	push	{r4, r5, lr}
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80042b6:	4d07      	ldr	r5, [pc, #28]	; (80042d4 <MX_FREERTOS_Init+0x20>)
void MX_FREERTOS_Init(void) {
 80042b8:	b087      	sub	sp, #28
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80042ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80042bc:	ac01      	add	r4, sp, #4
 80042be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80042c0:	682b      	ldr	r3, [r5, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80042c2:	2100      	movs	r1, #0
 80042c4:	a801      	add	r0, sp, #4
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80042c6:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80042c8:	f7fe fd41 	bl	8002d4e <osThreadCreate>
 80042cc:	4b02      	ldr	r3, [pc, #8]	; (80042d8 <MX_FREERTOS_Init+0x24>)
 80042ce:	6018      	str	r0, [r3, #0]
}
 80042d0:	b007      	add	sp, #28
 80042d2:	bd30      	pop	{r4, r5, pc}
 80042d4:	08004ac4 	.word	0x08004ac4
 80042d8:	20003ee8 	.word	0x20003ee8

080042dc <MX_GPIO_Init>:
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80042dc:	4b46      	ldr	r3, [pc, #280]	; (80043f8 <MX_GPIO_Init+0x11c>)

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80042de:	4847      	ldr	r0, [pc, #284]	; (80043fc <MX_GPIO_Init+0x120>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80042e0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80042e4:	f042 0204 	orr.w	r2, r2, #4
{
 80042e8:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80042ea:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
{
 80042ee:	b08c      	sub	sp, #48	; 0x30
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80042f0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042f4:	2400      	movs	r4, #0
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80042f6:	a907      	add	r1, sp, #28

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80042f8:	2601      	movs	r6, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80042fa:	f002 0204 	and.w	r2, r2, #4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042fe:	2502      	movs	r5, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004300:	9201      	str	r2, [sp, #4]
 8004302:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004304:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004308:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800430c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8004310:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004314:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8004318:	9202      	str	r2, [sp, #8]
 800431a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800431c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004320:	f042 0201 	orr.w	r2, r2, #1
 8004324:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8004328:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800432c:	f002 0201 	and.w	r2, r2, #1
 8004330:	9203      	str	r2, [sp, #12]
 8004332:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004334:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004338:	f042 0202 	orr.w	r2, r2, #2
 800433c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8004340:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004344:	f002 0202 	and.w	r2, r2, #2
 8004348:	9204      	str	r2, [sp, #16]
 800434a:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800434c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004350:	f042 0208 	orr.w	r2, r2, #8
 8004354:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8004358:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800435c:	f002 0208 	and.w	r2, r2, #8
 8004360:	9205      	str	r2, [sp, #20]
 8004362:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004364:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004368:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800436c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8004370:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004378:	9306      	str	r3, [sp, #24]
 800437a:	9b06      	ldr	r3, [sp, #24]
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800437c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004380:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004382:	4b1f      	ldr	r3, [pc, #124]	; (8004400 <MX_GPIO_Init+0x124>)
 8004384:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004386:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8004388:	f7fc faec 	bl	8000964 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 800438c:	f44f 4381 	mov.w	r3, #16512	; 0x4080
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004390:	a907      	add	r1, sp, #28
 8004392:	481c      	ldr	r0, [pc, #112]	; (8004404 <MX_GPIO_Init+0x128>)
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8004394:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004396:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004398:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800439a:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800439c:	f7fc fae2 	bl	8000964 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80043a0:	f44f 7340 	mov.w	r3, #768	; 0x300
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80043a4:	a907      	add	r1, sp, #28
 80043a6:	4818      	ldr	r0, [pc, #96]	; (8004408 <MX_GPIO_Init+0x12c>)
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80043a8:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80043aa:	2307      	movs	r3, #7
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043ac:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80043ae:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043b0:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043b2:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80043b4:	f7fc fad6 	bl	8000964 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80043b8:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80043ba:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80043bc:	4e13      	ldr	r6, [pc, #76]	; (800440c <MX_GPIO_Init+0x130>)
 80043be:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80043c0:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80043c2:	4630      	mov	r0, r6
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043c4:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043c6:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80043c8:	f7fc facc 	bl	8000964 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80043cc:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80043ce:	a907      	add	r1, sp, #28
 80043d0:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80043d2:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80043d4:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043d6:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80043d8:	f7fc fac4 	bl	8000964 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80043dc:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043e0:	a907      	add	r1, sp, #28
 80043e2:	480b      	ldr	r0, [pc, #44]	; (8004410 <MX_GPIO_Init+0x134>)
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80043e4:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80043e6:	230a      	movs	r3, #10
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043e8:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043ea:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043ec:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80043ee:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043f0:	f7fc fab8 	bl	8000964 <HAL_GPIO_Init>

}
 80043f4:	b00c      	add	sp, #48	; 0x30
 80043f6:	bd70      	pop	{r4, r5, r6, pc}
 80043f8:	58024400 	.word	0x58024400
 80043fc:	58020800 	.word	0x58020800
 8004400:	11110000 	.word	0x11110000
 8004404:	58020400 	.word	0x58020400
 8004408:	58020c00 	.word	0x58020c00
 800440c:	58021800 	.word	0x58021800
 8004410:	58020000 	.word	0x58020000

08004414 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8004414:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 8004416:	4815      	ldr	r0, [pc, #84]	; (800446c <MX_I2C1_Init+0x58>)
  hi2c1.Init.Timing = 0x009034B6;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004418:	2201      	movs	r2, #1
  hi2c1.Init.Timing = 0x009034B6;
 800441a:	4b15      	ldr	r3, [pc, #84]	; (8004470 <MX_I2C1_Init+0x5c>)
 800441c:	4915      	ldr	r1, [pc, #84]	; (8004474 <MX_I2C1_Init+0x60>)
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800441e:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.Timing = 0x009034B6;
 8004420:	e880 000a 	stmia.w	r0, {r1, r3}
  hi2c1.Init.OwnAddress1 = 0;
 8004424:	2300      	movs	r3, #0
 8004426:	6083      	str	r3, [r0, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004428:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800442a:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800442c:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800442e:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004430:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004432:	f7fc fc98 	bl	8000d66 <HAL_I2C_Init>
 8004436:	b118      	cbz	r0, 8004440 <MX_I2C1_Init+0x2c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004438:	214c      	movs	r1, #76	; 0x4c
 800443a:	480f      	ldr	r0, [pc, #60]	; (8004478 <MX_I2C1_Init+0x64>)
 800443c:	f000 f930 	bl	80046a0 <_Error_Handler>
  }

    /**Configure Analogue filter 
    */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004440:	2100      	movs	r1, #0
 8004442:	480a      	ldr	r0, [pc, #40]	; (800446c <MX_I2C1_Init+0x58>)
 8004444:	f7fc fe12 	bl	800106c <HAL_I2CEx_ConfigAnalogFilter>
 8004448:	b118      	cbz	r0, 8004452 <MX_I2C1_Init+0x3e>
  {
    _Error_Handler(__FILE__, __LINE__);
 800444a:	2153      	movs	r1, #83	; 0x53
 800444c:	480a      	ldr	r0, [pc, #40]	; (8004478 <MX_I2C1_Init+0x64>)
 800444e:	f000 f927 	bl	80046a0 <_Error_Handler>
  }

    /**Configure Digital filter 
    */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004452:	2100      	movs	r1, #0
 8004454:	4805      	ldr	r0, [pc, #20]	; (800446c <MX_I2C1_Init+0x58>)
 8004456:	f7fc fe2f 	bl	80010b8 <HAL_I2CEx_ConfigDigitalFilter>
 800445a:	b128      	cbz	r0, 8004468 <MX_I2C1_Init+0x54>
  {
    _Error_Handler(__FILE__, __LINE__);
 800445c:	215a      	movs	r1, #90	; 0x5a
 800445e:	4806      	ldr	r0, [pc, #24]	; (8004478 <MX_I2C1_Init+0x64>)
  }

}
 8004460:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8004464:	f000 b91c 	b.w	80046a0 <_Error_Handler>
 8004468:	bd08      	pop	{r3, pc}
 800446a:	bf00      	nop
 800446c:	20003eec 	.word	0x20003eec
 8004470:	009034b6 	.word	0x009034b6
 8004474:	40005400 	.word	0x40005400
 8004478:	08004af6 	.word	0x08004af6

0800447c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800447c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(i2cHandle->Instance==I2C1)
 800447e:	6802      	ldr	r2, [r0, #0]
 8004480:	4b10      	ldr	r3, [pc, #64]	; (80044c4 <HAL_I2C_MspInit+0x48>)
 8004482:	429a      	cmp	r2, r3
 8004484:	d11b      	bne.n	80044be <HAL_I2C_MspInit+0x42>
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8004486:	f44f 7310 	mov.w	r3, #576	; 0x240
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800448a:	480f      	ldr	r0, [pc, #60]	; (80044c8 <HAL_I2C_MspInit+0x4c>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 800448c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800448e:	2312      	movs	r3, #18
 8004490:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004492:	2300      	movs	r3, #0
 8004494:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004496:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004498:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800449a:	eb0d 0103 	add.w	r1, sp, r3
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800449e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044a0:	f7fc fa60 	bl	8000964 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80044a4:	4b09      	ldr	r3, [pc, #36]	; (80044cc <HAL_I2C_MspInit+0x50>)
 80044a6:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80044aa:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80044ae:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80044b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80044b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044ba:	9300      	str	r3, [sp, #0]
 80044bc:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80044be:	b007      	add	sp, #28
 80044c0:	f85d fb04 	ldr.w	pc, [sp], #4
 80044c4:	40005400 	.word	0x40005400
 80044c8:	58020400 	.word	0x58020400
 80044cc:	58024400 	.word	0x58024400

080044d0 <t_LEDBLINK>:
#include "si70xx.h"

/* Blink a Led Task*/
void t_LEDBLINK(void * pvParameters){
	for(;;){
		HAL_GPIO_TogglePin(GPIOB, LD2_Pin);
 80044d0:	4c05      	ldr	r4, [pc, #20]	; (80044e8 <t_LEDBLINK+0x18>)
void t_LEDBLINK(void * pvParameters){
 80044d2:	b508      	push	{r3, lr}
		HAL_GPIO_TogglePin(GPIOB, LD2_Pin);
 80044d4:	4620      	mov	r0, r4
 80044d6:	2180      	movs	r1, #128	; 0x80
 80044d8:	f7fc fb2e 	bl	8000b38 <HAL_GPIO_TogglePin>
		vTaskDelay(pdMS_TO_TICKS(1000));
 80044dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80044e0:	f7ff fc44 	bl	8003d6c <vTaskDelay>
 80044e4:	e7f6      	b.n	80044d4 <t_LEDBLINK+0x4>
 80044e6:	bf00      	nop
 80044e8:	58020400 	.word	0x58020400

080044ec <t_SPI_Write>:
	static uint8_t x;

	TickType_t xLastWakeTime;
	for(;;){
		xLastWakeTime = xTaskGetTickCount();
		data_to_be_sent[0] = Fake_REG;
 80044ec:	4d0e      	ldr	r5, [pc, #56]	; (8004528 <t_SPI_Write+0x3c>)
		data_to_be_sent[1] = x;
 80044ee:	4c0f      	ldr	r4, [pc, #60]	; (800452c <t_SPI_Write+0x40>)
		HAL_SPI_Transmit(&hspi2, data_to_be_sent, 2, 100);
 80044f0:	4e0f      	ldr	r6, [pc, #60]	; (8004530 <t_SPI_Write+0x44>)
void t_SPI_Write(void * pvParameters){
 80044f2:	b507      	push	{r0, r1, r2, lr}
		xLastWakeTime = xTaskGetTickCount();
 80044f4:	f7ff fad4 	bl	8003aa0 <xTaskGetTickCount>
		data_to_be_sent[0] = Fake_REG;
 80044f8:	2355      	movs	r3, #85	; 0x55
		xLastWakeTime = xTaskGetTickCount();
 80044fa:	9001      	str	r0, [sp, #4]
		HAL_SPI_Transmit(&hspi2, data_to_be_sent, 2, 100);
 80044fc:	2202      	movs	r2, #2
		data_to_be_sent[0] = Fake_REG;
 80044fe:	702b      	strb	r3, [r5, #0]
		HAL_SPI_Transmit(&hspi2, data_to_be_sent, 2, 100);
 8004500:	4630      	mov	r0, r6
		data_to_be_sent[1] = x;
 8004502:	7823      	ldrb	r3, [r4, #0]
		HAL_SPI_Transmit(&hspi2, data_to_be_sent, 2, 100);
 8004504:	4908      	ldr	r1, [pc, #32]	; (8004528 <t_SPI_Write+0x3c>)
		data_to_be_sent[1] = x;
 8004506:	706b      	strb	r3, [r5, #1]
		HAL_SPI_Transmit(&hspi2, data_to_be_sent, 2, 100);
 8004508:	2364      	movs	r3, #100	; 0x64
 800450a:	f7fe f93d 	bl	8002788 <HAL_SPI_Transmit>
		x++;
 800450e:	7823      	ldrb	r3, [r4, #0]
		if(x>10) x=0;
		/* pdMS_TO_TICKS is a macro to convert milliseconds to TICKS */
		vTaskDelayUntil( &xLastWakeTime, pdMS_TO_TICKS(50) );
 8004510:	2132      	movs	r1, #50	; 0x32
 8004512:	a801      	add	r0, sp, #4
		x++;
 8004514:	3301      	adds	r3, #1
 8004516:	b2db      	uxtb	r3, r3
		if(x>10) x=0;
 8004518:	2b0a      	cmp	r3, #10
 800451a:	bf88      	it	hi
 800451c:	2300      	movhi	r3, #0
 800451e:	7023      	strb	r3, [r4, #0]
		vTaskDelayUntil( &xLastWakeTime, pdMS_TO_TICKS(50) );
 8004520:	f7ff fbd2 	bl	8003cc8 <vTaskDelayUntil>
		xLastWakeTime = xTaskGetTickCount();
 8004524:	e7e6      	b.n	80044f4 <t_SPI_Write+0x8>
 8004526:	bf00      	nop
 8004528:	20003e34 	.word	0x20003e34
 800452c:	20003e36 	.word	0x20003e36
 8004530:	20003f40 	.word	0x20003f40

08004534 <SystemClock_Config>:
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Supply configuration update enable 
    */
  MODIFY_REG(PWR->CR3, PWR_CR3_SCUEN, 0);
 8004534:	4b2f      	ldr	r3, [pc, #188]	; (80045f4 <SystemClock_Config+0xc0>)
 8004536:	68da      	ldr	r2, [r3, #12]
 8004538:	f022 0204 	bic.w	r2, r2, #4
{
 800453c:	b530      	push	{r4, r5, lr}
  MODIFY_REG(PWR->CR3, PWR_CR3_SCUEN, 0);
 800453e:	60da      	str	r2, [r3, #12]
{
 8004540:	b0cd      	sub	sp, #308	; 0x134

    /**Configure the main internal regulator output voltage 
    */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004542:	2200      	movs	r2, #0
 8004544:	9201      	str	r2, [sp, #4]
 8004546:	699a      	ldr	r2, [r3, #24]
 8004548:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800454c:	619a      	str	r2, [r3, #24]
 800454e:	699a      	ldr	r2, [r3, #24]
 8004550:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8004554:	9201      	str	r2, [sp, #4]
 8004556:	9a01      	ldr	r2, [sp, #4]

  while ((PWR->D3CR & (PWR_D3CR_VOSRDY)) != PWR_D3CR_VOSRDY) 
 8004558:	699a      	ldr	r2, [r3, #24]
 800455a:	0492      	lsls	r2, r2, #18
 800455c:	d5fc      	bpl.n	8004558 <SystemClock_Config+0x24>
    
  }
    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800455e:	2301      	movs	r3, #1
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 50;
 8004560:	2232      	movs	r2, #50	; 0x32
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004562:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004564:	2504      	movs	r5, #4
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8004566:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8004568:	2310      	movs	r3, #16
  RCC_OscInitStruct.PLL.PLLN = 50;
 800456a:	9216      	str	r2, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800456c:	220c      	movs	r2, #12
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800456e:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004570:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004572:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004574:	940a      	str	r4, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004576:	9413      	str	r4, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004578:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = 4;
 800457a:	9515      	str	r5, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800457c:	9417      	str	r4, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800457e:	9418      	str	r4, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLR = 2;
 8004580:	9419      	str	r4, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8004582:	921a      	str	r2, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8004584:	931b      	str	r3, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8004586:	931c      	str	r3, [sp, #112]	; 0x70
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004588:	f7fc fdbc 	bl	8001104 <HAL_RCC_OscConfig>
 800458c:	b100      	cbz	r0, 8004590 <SystemClock_Config+0x5c>
 800458e:	e7fe      	b.n	800458e <SystemClock_Config+0x5a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004590:	233f      	movs	r3, #63	; 0x3f
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8004592:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8004596:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004598:	4621      	mov	r1, r4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800459a:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800459c:	2303      	movs	r3, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800459e:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80045a0:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80045a2:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80045a4:	2308      	movs	r3, #8
 80045a6:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80045a8:	2340      	movs	r3, #64	; 0x40
 80045aa:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80045ac:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80045ae:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80045b0:	f7fd f88e 	bl	80016d0 <HAL_RCC_ClockConfig>
 80045b4:	b100      	cbz	r0, 80045b8 <SystemClock_Config+0x84>
 80045b6:	e7fe      	b.n	80045b6 <SystemClock_Config+0x82>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2|RCC_PERIPHCLK_I2C1;
 80045b8:	f241 0308 	movw	r3, #4104	; 0x1008
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80045bc:	9034      	str	r0, [sp, #208]	; 0xd0
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80045be:	903d      	str	r0, [sp, #244]	; 0xf4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80045c0:	a81d      	add	r0, sp, #116	; 0x74
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2|RCC_PERIPHCLK_I2C1;
 80045c2:	931d      	str	r3, [sp, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80045c4:	f7fd fa6c 	bl	8001aa0 <HAL_RCCEx_PeriphCLKConfig>
 80045c8:	4604      	mov	r4, r0
 80045ca:	b100      	cbz	r0, 80045ce <SystemClock_Config+0x9a>
 80045cc:	e7fe      	b.n	80045cc <SystemClock_Config+0x98>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 80045ce:	4b0a      	ldr	r3, [pc, #40]	; (80045f8 <SystemClock_Config+0xc4>)
 80045d0:	6818      	ldr	r0, [r3, #0]
 80045d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80045d6:	fbb0 f0f3 	udiv	r0, r0, r3
 80045da:	f7fb fefd 	bl	80003d8 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80045de:	4628      	mov	r0, r5
 80045e0:	f7fb ff10 	bl	8000404 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 80045e4:	4622      	mov	r2, r4
 80045e6:	210f      	movs	r1, #15
 80045e8:	f04f 30ff 	mov.w	r0, #4294967295
 80045ec:	f7fb feae 	bl	800034c <HAL_NVIC_SetPriority>
}
 80045f0:	b04d      	add	sp, #308	; 0x134
 80045f2:	bd30      	pop	{r4, r5, pc}
 80045f4:	58024800 	.word	0x58024800
 80045f8:	20000004 	.word	0x20000004

080045fc <main>:
  if (xI2CSemaphore == NULL){
 80045fc:	4c1c      	ldr	r4, [pc, #112]	; (8004670 <main+0x74>)
{
 80045fe:	b507      	push	{r0, r1, r2, lr}
  HAL_Init();
 8004600:	f7fb fe6e 	bl	80002e0 <HAL_Init>
  SystemClock_Config();
 8004604:	f7ff ff96 	bl	8004534 <SystemClock_Config>
  MX_GPIO_Init();
 8004608:	f7ff fe68 	bl	80042dc <MX_GPIO_Init>
  MX_ETH_Init();
 800460c:	f7ff fdb4 	bl	8004178 <MX_ETH_Init>
  MX_SPI2_Init();
 8004610:	f000 f8b8 	bl	8004784 <MX_SPI2_Init>
  MX_I2C1_Init();
 8004614:	f7ff fefe 	bl	8004414 <MX_I2C1_Init>
  if (xI2CSemaphore == NULL){
 8004618:	6820      	ldr	r0, [r4, #0]
 800461a:	bb10      	cbnz	r0, 8004662 <main+0x66>
	  xI2CSemaphore = xSemaphoreCreateMutex();
 800461c:	2001      	movs	r0, #1
 800461e:	f7fe ffe7 	bl	80035f0 <xQueueCreateMutex>
 8004622:	6020      	str	r0, [r4, #0]
  xTaskCreate(t_LEDBLINK,
 8004624:	2400      	movs	r4, #0
 8004626:	2502      	movs	r5, #2
 8004628:	2280      	movs	r2, #128	; 0x80
 800462a:	4912      	ldr	r1, [pc, #72]	; (8004674 <main+0x78>)
 800462c:	4623      	mov	r3, r4
 800462e:	9401      	str	r4, [sp, #4]
 8004630:	9500      	str	r5, [sp, #0]
 8004632:	4811      	ldr	r0, [pc, #68]	; (8004678 <main+0x7c>)
 8004634:	f7ff f91c 	bl	8003870 <xTaskCreate>
  xTaskCreate(t_SPI_Write,
 8004638:	4623      	mov	r3, r4
 800463a:	2280      	movs	r2, #128	; 0x80
 800463c:	490f      	ldr	r1, [pc, #60]	; (800467c <main+0x80>)
 800463e:	9401      	str	r4, [sp, #4]
 8004640:	9500      	str	r5, [sp, #0]
 8004642:	480f      	ldr	r0, [pc, #60]	; (8004680 <main+0x84>)
 8004644:	f7ff f914 	bl	8003870 <xTaskCreate>
  xTaskCreate(t_si70xx_read_TEMP_HUMI,
 8004648:	4623      	mov	r3, r4
 800464a:	2280      	movs	r2, #128	; 0x80
 800464c:	490d      	ldr	r1, [pc, #52]	; (8004684 <main+0x88>)
 800464e:	9401      	str	r4, [sp, #4]
 8004650:	9500      	str	r5, [sp, #0]
 8004652:	480d      	ldr	r0, [pc, #52]	; (8004688 <main+0x8c>)
 8004654:	f7ff f90c 	bl	8003870 <xTaskCreate>
  MX_FREERTOS_Init();
 8004658:	f7ff fe2c 	bl	80042b4 <MX_FREERTOS_Init>
  osKernelStart();
 800465c:	f7fe fb72 	bl	8002d44 <osKernelStart>
 8004660:	e7fe      	b.n	8004660 <main+0x64>
	  xSemaphoreGive(xI2CSemaphore);
 8004662:	2300      	movs	r3, #0
 8004664:	461a      	mov	r2, r3
 8004666:	4619      	mov	r1, r3
 8004668:	f7fe ff04 	bl	8003474 <xQueueGenericSend>
 800466c:	e7da      	b.n	8004624 <main+0x28>
 800466e:	bf00      	nop
 8004670:	20003f3c 	.word	0x20003f3c
 8004674:	08004b03 	.word	0x08004b03
 8004678:	080044d1 	.word	0x080044d1
 800467c:	08004b0c 	.word	0x08004b0c
 8004680:	080044ed 	.word	0x080044ed
 8004684:	08004b18 	.word	0x08004b18
 8004688:	080046a5 	.word	0x080046a5

0800468c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
/* USER CODE BEGIN Callback 0 */

/* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800468c:	6802      	ldr	r2, [r0, #0]
 800468e:	4b03      	ldr	r3, [pc, #12]	; (800469c <HAL_TIM_PeriodElapsedCallback+0x10>)
 8004690:	429a      	cmp	r2, r3
 8004692:	d101      	bne.n	8004698 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8004694:	f7fb be30 	b.w	80002f8 <HAL_IncTick>
 8004698:	4770      	bx	lr
 800469a:	bf00      	nop
 800469c:	40010000 	.word	0x40010000

080046a0 <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 80046a0:	e7fe      	b.n	80046a0 <_Error_Handler>
	...

080046a4 <t_si70xx_read_TEMP_HUMI>:
#include "si70xx.h"

/*
 *  si70xx read Temperature and Humidity Task
 */
void t_si70xx_read_TEMP_HUMI(void * pvParameters){
 80046a4:	b583      	push	{r0, r1, r7, lr}
		float temperature;
	};

	static struct si70xx_ si70xx_reading;

	QueueSi70xx_data = xQueueCreate(2, sizeof(si70xx_reading));
 80046a6:	2200      	movs	r2, #0
 80046a8:	2108      	movs	r1, #8
 80046aa:	2002      	movs	r0, #2

	if(QueueSi70xx_data == NULL){/*Think about catch the error of queue not beeing created*/}

	for(;;){
		xLastWakeTime = xTaskGetTickCount();
 80046ac:	4e2e      	ldr	r6, [pc, #184]	; (8004768 <t_si70xx_read_TEMP_HUMI+0xc4>)
	QueueSi70xx_data = xQueueCreate(2, sizeof(si70xx_reading));
 80046ae:	f7fe febd 	bl	800342c <xQueueGenericCreate>
 80046b2:	4b2e      	ldr	r3, [pc, #184]	; (800476c <t_si70xx_read_TEMP_HUMI+0xc8>)

		//Measure Humidity (WIHTOUT CLOCK STRETCHING - NO HOLD REG TYPE)
		if( xSemaphoreTake( xI2CSemaphore, (TickType_t) 2) == pdTRUE ){
 80046b4:	4c2e      	ldr	r4, [pc, #184]	; (8004770 <t_si70xx_read_TEMP_HUMI+0xcc>)
 80046b6:	4698      	mov	r8, r3
			_REG = si70xx_MEAS_HUMI_NO_HOLD;
 80046b8:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 8004778 <t_si70xx_read_TEMP_HUMI+0xd4>
	QueueSi70xx_data = xQueueCreate(2, sizeof(si70xx_reading));
 80046bc:	6018      	str	r0, [r3, #0]
		xLastWakeTime = xTaskGetTickCount();
 80046be:	f7ff f9ef 	bl	8003aa0 <xTaskGetTickCount>
		if( xSemaphoreTake( xI2CSemaphore, (TickType_t) 2) == pdTRUE ){
 80046c2:	2300      	movs	r3, #0
		xLastWakeTime = xTaskGetTickCount();
 80046c4:	6030      	str	r0, [r6, #0]
		if( xSemaphoreTake( xI2CSemaphore, (TickType_t) 2) == pdTRUE ){
 80046c6:	2202      	movs	r2, #2
 80046c8:	4619      	mov	r1, r3
 80046ca:	6820      	ldr	r0, [r4, #0]
 80046cc:	f7fe ffa2 	bl	8003614 <xQueueGenericReceive>
 80046d0:	2801      	cmp	r0, #1
 80046d2:	4603      	mov	r3, r0
 80046d4:	d141      	bne.n	800475a <t_si70xx_read_TEMP_HUMI+0xb6>
			_REG = si70xx_MEAS_HUMI_NO_HOLD;
 80046d6:	22f5      	movs	r2, #245	; 0xf5
			HAL_I2C_Master_Transmit( &hi2c1, si70xx_ADDR, &_REG, 1, 100);
 80046d8:	2564      	movs	r5, #100	; 0x64
 80046da:	2140      	movs	r1, #64	; 0x40
 80046dc:	4825      	ldr	r0, [pc, #148]	; (8004774 <t_si70xx_read_TEMP_HUMI+0xd0>)
			_REG = si70xx_MEAS_HUMI_NO_HOLD;
 80046de:	f889 2000 	strb.w	r2, [r9]
			HAL_I2C_Master_Transmit( &hi2c1, si70xx_ADDR, &_REG, 1, 100);
 80046e2:	9500      	str	r5, [sp, #0]
 80046e4:	4a24      	ldr	r2, [pc, #144]	; (8004778 <t_si70xx_read_TEMP_HUMI+0xd4>)
 80046e6:	f7fc fb8f 	bl	8000e08 <HAL_I2C_Master_Transmit>
			//As it is a Blocking transmit, we can give semaphore back now
			xSemaphoreGive( xI2CSemaphore );
 80046ea:	2300      	movs	r3, #0
 80046ec:	6820      	ldr	r0, [r4, #0]
 80046ee:	461a      	mov	r2, r3
 80046f0:	4619      	mov	r1, r3
 80046f2:	f7fe febf 	bl	8003474 <xQueueGenericSend>
		}
		else{
			goto _sleep; //Jump to _sleep if we couldn't acquire the Semaphore
		}

		vTaskDelay(pdMS_TO_TICKS(500)); //500ms is a common time for getting the humidity reading!
 80046f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80046fa:	f7ff fb37 	bl	8003d6c <vTaskDelay>

		//Get the result of the Humidity Reading and also the temperature
		if( xSemaphoreTake( xI2CSemaphore, (TickType_t) 2) == pdTRUE ){
 80046fe:	2300      	movs	r3, #0
 8004700:	2202      	movs	r2, #2
 8004702:	6820      	ldr	r0, [r4, #0]
 8004704:	4619      	mov	r1, r3
 8004706:	f7fe ff85 	bl	8003614 <xQueueGenericReceive>
 800470a:	2801      	cmp	r0, #1
 800470c:	4607      	mov	r7, r0
 800470e:	d124      	bne.n	800475a <t_si70xx_read_TEMP_HUMI+0xb6>
			//Receive 2 bytes from the Si70xx and store in the data array
			HAL_I2C_Master_Receive( &hi2c1, si70xx_ADDR, si70xx_data, 2, 100);
 8004710:	2302      	movs	r3, #2
 8004712:	4a1a      	ldr	r2, [pc, #104]	; (800477c <t_si70xx_read_TEMP_HUMI+0xd8>)
 8004714:	2140      	movs	r1, #64	; 0x40
 8004716:	9500      	str	r5, [sp, #0]
 8004718:	4816      	ldr	r0, [pc, #88]	; (8004774 <t_si70xx_read_TEMP_HUMI+0xd0>)
 800471a:	f7fc fc0e 	bl	8000f3a <HAL_I2C_Master_Receive>
			/*
			 *  Convert humidity read to float
			 */

			//Get the temperature from last RH measurement
			_REG = si70xx_READ_TEMP_LAST_RH_MEAS;
 800471e:	23e0      	movs	r3, #224	; 0xe0
			HAL_I2C_Master_Transmit( &hi2c1, si70xx_ADDR, &_REG, 1, 100);
 8004720:	464a      	mov	r2, r9
 8004722:	2140      	movs	r1, #64	; 0x40
			_REG = si70xx_READ_TEMP_LAST_RH_MEAS;
 8004724:	f889 3000 	strb.w	r3, [r9]
			HAL_I2C_Master_Transmit( &hi2c1, si70xx_ADDR, &_REG, 1, 100);
 8004728:	463b      	mov	r3, r7
 800472a:	9500      	str	r5, [sp, #0]
 800472c:	4811      	ldr	r0, [pc, #68]	; (8004774 <t_si70xx_read_TEMP_HUMI+0xd0>)
 800472e:	f7fc fb6b 	bl	8000e08 <HAL_I2C_Master_Transmit>
			HAL_I2C_Master_Receive( &hi2c1, si70xx_ADDR, si70xx_data, 2, 100);
 8004732:	2302      	movs	r3, #2
 8004734:	4a11      	ldr	r2, [pc, #68]	; (800477c <t_si70xx_read_TEMP_HUMI+0xd8>)
 8004736:	2140      	movs	r1, #64	; 0x40
 8004738:	9500      	str	r5, [sp, #0]
 800473a:	480e      	ldr	r0, [pc, #56]	; (8004774 <t_si70xx_read_TEMP_HUMI+0xd0>)
 800473c:	f7fc fbfd 	bl	8000f3a <HAL_I2C_Master_Receive>

			/*
			 *  Convert temperature read to float
			 */

			xSemaphoreGive( xI2CSemaphore );
 8004740:	2300      	movs	r3, #0
 8004742:	6820      	ldr	r0, [r4, #0]
 8004744:	461a      	mov	r2, r3
 8004746:	4619      	mov	r1, r3
 8004748:	f7fe fe94 	bl	8003474 <xQueueGenericSend>
		}
		else{
			goto _sleep; //Jump to _sleep if we couldn't acquire the Semaphore
		}

		xQueueSendToBack(QueueSi70xx_data, &si70xx_reading, 0);
 800474c:	2300      	movs	r3, #0
 800474e:	490c      	ldr	r1, [pc, #48]	; (8004780 <t_si70xx_read_TEMP_HUMI+0xdc>)
 8004750:	461a      	mov	r2, r3
 8004752:	f8d8 0000 	ldr.w	r0, [r8]
 8004756:	f7fe fe8d 	bl	8003474 <xQueueGenericSend>

_sleep:
		// Using TaskDelayUntil to make it really 1s between sensor acquisition
		vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(si70xx_RATE_MEASUREMENT));
 800475a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800475e:	4630      	mov	r0, r6
 8004760:	f7ff fab2 	bl	8003cc8 <vTaskDelayUntil>
		xLastWakeTime = xTaskGetTickCount();
 8004764:	e7ab      	b.n	80046be <t_si70xx_read_TEMP_HUMI+0x1a>
 8004766:	bf00      	nop
 8004768:	20003e44 	.word	0x20003e44
 800476c:	20003f38 	.word	0x20003f38
 8004770:	20003f3c 	.word	0x20003f3c
 8004774:	20003eec 	.word	0x20003eec
 8004778:	20003e37 	.word	0x20003e37
 800477c:	20003e38 	.word	0x20003e38
 8004780:	20003e3c 	.word	0x20003e3c

08004784 <MX_SPI2_Init>:

/* SPI2 init function */
void MX_SPI2_Init(void)
{

  hspi2.Instance = SPI2;
 8004784:	4816      	ldr	r0, [pc, #88]	; (80047e0 <MX_SPI2_Init+0x5c>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8004786:	2203      	movs	r2, #3
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8004788:	4916      	ldr	r1, [pc, #88]	; (80047e4 <MX_SPI2_Init+0x60>)
{
 800478a:	b508      	push	{r3, lr}
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 800478c:	60c2      	str	r2, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800478e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8004792:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8004796:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8004798:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 800479c:	61c2      	str	r2, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi2.Init.CRCPolynomial = 7;
 800479e:	2207      	movs	r2, #7
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80047a0:	e880 000a 	stmia.w	r0, {r1, r3}
  hspi2.Init.CRCPolynomial = 7;
 80047a4:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80047a6:	2300      	movs	r3, #0
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80047a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80047ac:	6083      	str	r3, [r0, #8]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80047ae:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80047b0:	6143      	str	r3, [r0, #20]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80047b2:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80047b4:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80047b6:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80047b8:	6342      	str	r2, [r0, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80047ba:	6383      	str	r3, [r0, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80047bc:	63c3      	str	r3, [r0, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80047be:	6403      	str	r3, [r0, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80047c0:	6443      	str	r3, [r0, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80047c2:	6483      	str	r3, [r0, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80047c4:	64c3      	str	r3, [r0, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80047c6:	6503      	str	r3, [r0, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = 0;
 80047c8:	6543      	str	r3, [r0, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80047ca:	6583      	str	r3, [r0, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80047cc:	f7fd ff0c 	bl	80025e8 <HAL_SPI_Init>
 80047d0:	b128      	cbz	r0, 80047de <MX_SPI2_Init+0x5a>
  {
    _Error_Handler(__FILE__, __LINE__);
 80047d2:	2159      	movs	r1, #89	; 0x59
 80047d4:	4804      	ldr	r0, [pc, #16]	; (80047e8 <MX_SPI2_Init+0x64>)
  }

}
 80047d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 80047da:	f7ff bf61 	b.w	80046a0 <_Error_Handler>
 80047de:	bd08      	pop	{r3, pc}
 80047e0:	20003f40 	.word	0x20003f40
 80047e4:	40003800 	.word	0x40003800
 80047e8:	08004b24 	.word	0x08004b24

080047ec <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(spiHandle->Instance==SPI2)
 80047ec:	6802      	ldr	r2, [r0, #0]
 80047ee:	4b1b      	ldr	r3, [pc, #108]	; (800485c <HAL_SPI_MspInit+0x70>)
 80047f0:	429a      	cmp	r2, r3
{
 80047f2:	b570      	push	{r4, r5, r6, lr}
 80047f4:	b086      	sub	sp, #24
  if(spiHandle->Instance==SPI2)
 80047f6:	d12f      	bne.n	8004858 <HAL_SPI_MspInit+0x6c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80047f8:	4b19      	ldr	r3, [pc, #100]	; (8004860 <HAL_SPI_MspInit+0x74>)
    PB10     ------> SPI2_SCK
    PB4     ------> SPI2_NSS 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047fa:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047fc:	2502      	movs	r5, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80047fe:	2605      	movs	r6, #5
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004800:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004804:	a901      	add	r1, sp, #4
 8004806:	4817      	ldr	r0, [pc, #92]	; (8004864 <HAL_SPI_MspInit+0x78>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004808:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800480c:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8004810:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004814:	9502      	str	r5, [sp, #8]
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004816:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800481a:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800481c:	9404      	str	r4, [sp, #16]
    __HAL_RCC_SPI2_CLK_ENABLE();
 800481e:	9300      	str	r3, [sp, #0]
 8004820:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004822:	230c      	movs	r3, #12
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004824:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004826:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004828:	f7fc f89c 	bl	8000964 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800482c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004830:	a901      	add	r1, sp, #4
 8004832:	480d      	ldr	r0, [pc, #52]	; (8004868 <HAL_SPI_MspInit+0x7c>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004834:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004836:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004838:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800483a:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800483c:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800483e:	f7fc f891 	bl	8000964 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004842:	2310      	movs	r3, #16
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004844:	a901      	add	r1, sp, #4
 8004846:	4808      	ldr	r0, [pc, #32]	; (8004868 <HAL_SPI_MspInit+0x7c>)
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004848:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 800484a:	2307      	movs	r3, #7
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800484c:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800484e:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004850:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8004852:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004854:	f7fc f886 	bl	8000964 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8004858:	b006      	add	sp, #24
 800485a:	bd70      	pop	{r4, r5, r6, pc}
 800485c:	40003800 	.word	0x40003800
 8004860:	58024400 	.word	0x58024400
 8004864:	58020800 	.word	0x58020800
 8004868:	58020400 	.word	0x58020400

0800486c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800486c:	4b1e      	ldr	r3, [pc, #120]	; (80048e8 <HAL_MspInit+0x7c>)
{
 800486e:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004870:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004874:	2003      	movs	r0, #3
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004876:	f042 0202 	orr.w	r2, r2, #2
 800487a:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 800487e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004882:	f003 0302 	and.w	r3, r3, #2
 8004886:	9301      	str	r3, [sp, #4]
 8004888:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800488a:	f7fb fd4d 	bl	8000328 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800488e:	2200      	movs	r2, #0
 8004890:	f06f 000b 	mvn.w	r0, #11
 8004894:	4611      	mov	r1, r2
 8004896:	f7fb fd59 	bl	800034c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800489a:	2200      	movs	r2, #0
 800489c:	f06f 000a 	mvn.w	r0, #10
 80048a0:	4611      	mov	r1, r2
 80048a2:	f7fb fd53 	bl	800034c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80048a6:	2200      	movs	r2, #0
 80048a8:	f06f 0009 	mvn.w	r0, #9
 80048ac:	4611      	mov	r1, r2
 80048ae:	f7fb fd4d 	bl	800034c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80048b2:	2200      	movs	r2, #0
 80048b4:	f06f 0004 	mvn.w	r0, #4
 80048b8:	4611      	mov	r1, r2
 80048ba:	f7fb fd47 	bl	800034c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80048be:	2200      	movs	r2, #0
 80048c0:	f06f 0003 	mvn.w	r0, #3
 80048c4:	4611      	mov	r1, r2
 80048c6:	f7fb fd41 	bl	800034c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80048ca:	2200      	movs	r2, #0
 80048cc:	210f      	movs	r1, #15
 80048ce:	f06f 0001 	mvn.w	r0, #1
 80048d2:	f7fb fd3b 	bl	800034c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 80048d6:	2200      	movs	r2, #0
 80048d8:	210f      	movs	r1, #15
 80048da:	f04f 30ff 	mov.w	r0, #4294967295
 80048de:	f7fb fd35 	bl	800034c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80048e2:	b003      	add	sp, #12
 80048e4:	f85d fb04 	ldr.w	pc, [sp], #4
 80048e8:	58024400 	.word	0x58024400

080048ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80048ec:	b510      	push	{r4, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0); 
 80048ee:	4601      	mov	r1, r0
{
 80048f0:	b08a      	sub	sp, #40	; 0x28
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0); 
 80048f2:	2200      	movs	r2, #0
 80048f4:	2019      	movs	r0, #25
 80048f6:	f7fb fd29 	bl	800034c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn); 
 80048fa:	2019      	movs	r0, #25
 80048fc:	f7fb fd5e 	bl	80003bc <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8004900:	4b15      	ldr	r3, [pc, #84]	; (8004958 <HAL_InitTick+0x6c>)
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004902:	4669      	mov	r1, sp
 8004904:	a802      	add	r0, sp, #8
  __HAL_RCC_TIM1_CLK_ENABLE();
 8004906:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800490a:	4c14      	ldr	r4, [pc, #80]	; (800495c <HAL_InitTick+0x70>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 800490c:	f042 0201 	orr.w	r2, r2, #1
 8004910:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8004914:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004918:	f003 0301 	and.w	r3, r3, #1
 800491c:	9301      	str	r3, [sp, #4]
 800491e:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004920:	f7fc ffe0 	bl	80018e4 <HAL_RCC_GetClockConfig>
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8004924:	f7fc ffc8 	bl	80018b8 <HAL_RCC_GetPCLK2Freq>
  htim1.Instance = TIM1;
 8004928:	4b0d      	ldr	r3, [pc, #52]	; (8004960 <HAL_InitTick+0x74>)
 800492a:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800492c:	f240 33e7 	movw	r3, #999	; 0x3e7
 8004930:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8004932:	4b0c      	ldr	r3, [pc, #48]	; (8004964 <HAL_InitTick+0x78>)
 8004934:	fbb0 f0f3 	udiv	r0, r0, r3
 8004938:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 800493a:	2300      	movs	r3, #0
  htim1.Init.Prescaler = uwPrescalerValue;
 800493c:	6060      	str	r0, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800493e:	4620      	mov	r0, r4
  htim1.Init.ClockDivision = 0;
 8004940:	6123      	str	r3, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004942:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8004944:	f7fe f9e2 	bl	8002d0c <HAL_TIM_Base_Init>
 8004948:	b920      	cbnz	r0, 8004954 <HAL_InitTick+0x68>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800494a:	4620      	mov	r0, r4
 800494c:	f7fe f8b5 	bl	8002aba <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8004950:	b00a      	add	sp, #40	; 0x28
 8004952:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 8004954:	2001      	movs	r0, #1
 8004956:	e7fb      	b.n	8004950 <HAL_InitTick+0x64>
 8004958:	58024400 	.word	0x58024400
 800495c:	20003fc8 	.word	0x20003fc8
 8004960:	40010000 	.word	0x40010000
 8004964:	000f4240 	.word	0x000f4240

08004968 <NMI_Handler>:
 8004968:	4770      	bx	lr

0800496a <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800496a:	e7fe      	b.n	800496a <HardFault_Handler>

0800496c <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 800496c:	e7fe      	b.n	800496c <MemManage_Handler>

0800496e <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800496e:	e7fe      	b.n	800496e <BusFault_Handler>

08004970 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8004970:	4770      	bx	lr

08004972 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 8004972:	f7fe ba0c 	b.w	8002d8e <osSystickHandler>
	...

08004978 <TIM1_UP_IRQHandler>:
void TIM1_UP_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004978:	4801      	ldr	r0, [pc, #4]	; (8004980 <TIM1_UP_IRQHandler+0x8>)
 800497a:	f7fe b8ae 	b.w	8002ada <HAL_TIM_IRQHandler>
 800497e:	bf00      	nop
 8004980:	20003fc8 	.word	0x20003fc8

08004984 <SystemInit>:
  */
void SystemInit (void)
{    
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004984:	4914      	ldr	r1, [pc, #80]	; (80049d8 <SystemInit+0x54>)
  
  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= (uint32_t)0xEAF6ED7F;
 8004986:	4815      	ldr	r0, [pc, #84]	; (80049dc <SystemInit+0x58>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004988:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800498c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
{    
 8004990:	b510      	push	{r4, lr}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004992:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= RCC_CR_HSION;
 8004996:	4b12      	ldr	r3, [pc, #72]	; (80049e0 <SystemInit+0x5c>)
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	f042 0201 	orr.w	r2, r2, #1
 800499e:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80049a0:	2200      	movs	r2, #0
 80049a2:	611a      	str	r2, [r3, #16]
  RCC->CR &= (uint32_t)0xEAF6ED7F;
 80049a4:	681c      	ldr	r4, [r3, #0]
 80049a6:	4020      	ands	r0, r4
 80049a8:	6018      	str	r0, [r3, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80049aa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80049ac:	61da      	str	r2, [r3, #28]
  
  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80049ae:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 80049b0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 80049b2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 80049b4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80049b6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 80049b8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */
  
  RCC->PLL2FRACR = 0x00000000;
 80049ba:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 80049bc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80049be:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80049c0:	6818      	ldr	r0, [r3, #0]
 80049c2:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 80049c6:	6018      	str	r0, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80049c8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
  *((__IO uint32_t*)0x51008108) = 0x000000001;
 80049ca:	2201      	movs	r2, #1
 80049cc:	4b05      	ldr	r3, [pc, #20]	; (80049e4 <SystemInit+0x60>)
 80049ce:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal ITCMSRAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80049d0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80049d4:	608b      	str	r3, [r1, #8]
 80049d6:	bd10      	pop	{r4, pc}
 80049d8:	e000ed00 	.word	0xe000ed00
 80049dc:	eaf6ed7f 	.word	0xeaf6ed7f
 80049e0:	58024400 	.word	0x58024400
 80049e4:	51008108 	.word	0x51008108

080049e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80049e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004a20 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80049ec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80049ee:	e003      	b.n	80049f8 <LoopCopyDataInit>

080049f0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80049f0:	4b0c      	ldr	r3, [pc, #48]	; (8004a24 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80049f2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80049f4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80049f6:	3104      	adds	r1, #4

080049f8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80049f8:	480b      	ldr	r0, [pc, #44]	; (8004a28 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80049fa:	4b0c      	ldr	r3, [pc, #48]	; (8004a2c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80049fc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80049fe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004a00:	d3f6      	bcc.n	80049f0 <CopyDataInit>
  ldr  r2, =_sbss
 8004a02:	4a0b      	ldr	r2, [pc, #44]	; (8004a30 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004a04:	e002      	b.n	8004a0c <LoopFillZerobss>

08004a06 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004a06:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004a08:	f842 3b04 	str.w	r3, [r2], #4

08004a0c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004a0c:	4b09      	ldr	r3, [pc, #36]	; (8004a34 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004a0e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004a10:	d3f9      	bcc.n	8004a06 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004a12:	f7ff ffb7 	bl	8004984 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004a16:	f000 f811 	bl	8004a3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004a1a:	f7ff fdef 	bl	80045fc <main>
  bx  lr    
 8004a1e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004a20:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004a24:	08004b4c 	.word	0x08004b4c
  ldr  r0, =_sdata
 8004a28:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004a2c:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8004a30:	200000cc 	.word	0x200000cc
  ldr  r3, = _ebss
 8004a34:	20004008 	.word	0x20004008

08004a38 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004a38:	e7fe      	b.n	8004a38 <ADC3_IRQHandler>
	...

08004a3c <__libc_init_array>:
 8004a3c:	b570      	push	{r4, r5, r6, lr}
 8004a3e:	4e0d      	ldr	r6, [pc, #52]	; (8004a74 <__libc_init_array+0x38>)
 8004a40:	4c0d      	ldr	r4, [pc, #52]	; (8004a78 <__libc_init_array+0x3c>)
 8004a42:	1ba4      	subs	r4, r4, r6
 8004a44:	10a4      	asrs	r4, r4, #2
 8004a46:	2500      	movs	r5, #0
 8004a48:	42a5      	cmp	r5, r4
 8004a4a:	d109      	bne.n	8004a60 <__libc_init_array+0x24>
 8004a4c:	4e0b      	ldr	r6, [pc, #44]	; (8004a7c <__libc_init_array+0x40>)
 8004a4e:	4c0c      	ldr	r4, [pc, #48]	; (8004a80 <__libc_init_array+0x44>)
 8004a50:	f000 f82c 	bl	8004aac <_init>
 8004a54:	1ba4      	subs	r4, r4, r6
 8004a56:	10a4      	asrs	r4, r4, #2
 8004a58:	2500      	movs	r5, #0
 8004a5a:	42a5      	cmp	r5, r4
 8004a5c:	d105      	bne.n	8004a6a <__libc_init_array+0x2e>
 8004a5e:	bd70      	pop	{r4, r5, r6, pc}
 8004a60:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004a64:	4798      	blx	r3
 8004a66:	3501      	adds	r5, #1
 8004a68:	e7ee      	b.n	8004a48 <__libc_init_array+0xc>
 8004a6a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004a6e:	4798      	blx	r3
 8004a70:	3501      	adds	r5, #1
 8004a72:	e7f2      	b.n	8004a5a <__libc_init_array+0x1e>
 8004a74:	08004b44 	.word	0x08004b44
 8004a78:	08004b44 	.word	0x08004b44
 8004a7c:	08004b44 	.word	0x08004b44
 8004a80:	08004b48 	.word	0x08004b48

08004a84 <memcpy>:
 8004a84:	b510      	push	{r4, lr}
 8004a86:	1e43      	subs	r3, r0, #1
 8004a88:	440a      	add	r2, r1
 8004a8a:	4291      	cmp	r1, r2
 8004a8c:	d100      	bne.n	8004a90 <memcpy+0xc>
 8004a8e:	bd10      	pop	{r4, pc}
 8004a90:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a94:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a98:	e7f7      	b.n	8004a8a <memcpy+0x6>

08004a9a <memset>:
 8004a9a:	4402      	add	r2, r0
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d100      	bne.n	8004aa4 <memset+0xa>
 8004aa2:	4770      	bx	lr
 8004aa4:	f803 1b01 	strb.w	r1, [r3], #1
 8004aa8:	e7f9      	b.n	8004a9e <memset+0x4>
	...

08004aac <_init>:
 8004aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aae:	bf00      	nop
 8004ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ab2:	bc08      	pop	{r3}
 8004ab4:	469e      	mov	lr, r3
 8004ab6:	4770      	bx	lr

08004ab8 <_fini>:
 8004ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aba:	bf00      	nop
 8004abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004abe:	bc08      	pop	{r3}
 8004ac0:	469e      	mov	lr, r3
 8004ac2:	4770      	bx	lr
